{"ast":null,"code":"import shallowCopy from\"../2d-array-functions/shallow-copy\";// export default function updateNodeState(coordinates=[], matrix = [[]])\n// {\n//     let node = matrix[coordinates[0]][coordinates[1]];\n//     if(!node[\"visited\"])\n//     {\n//         node[\"visited\"] = true\n//     }\n//     else if (!node[\"shortest_path\"] && node[\"visited\"])\n//     {\n//         // node[\"visited\"] = false;\n//         node[\"shortest_path\"] = true;\n//     }\n//     matrix[coordinates[0]][coordinates[1]] = node;\n//     return shallowCopy(matrix);\n// }\nexport function changeNodeToVisited(){var coordinates=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var matrix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[[]];var node=matrix[coordinates[0]][coordinates[1]];if(!node[\"shortest_path\"]){node[\"visited\"]=true;}var flicker_element=document.getElementById(coordinates[0]+\"-\"+coordinates[1]);flicker_element.classList.add(\"flicker\");matrix[coordinates[0]][coordinates[1]]=node;return shallowCopy(matrix);}export function changeNodeToShortestPath(){var coordinates=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var matrix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[[]];var node=matrix[coordinates[0]][coordinates[1]];if(!node[\"shortest_path\"]){node[\"shortest_path\"]=true;}matrix[coordinates[0]][coordinates[1]]=node;return shallowCopy(matrix);}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/state-functions/update-node-state.js"],"names":["shallowCopy","changeNodeToVisited","coordinates","matrix","node","flicker_element","document","getElementById","classList","add","changeNodeToShortestPath"],"mappings":"AAAA,MAAOA,CAAAA,WAAP,KAAwB,oCAAxB,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,MAAO,SAASC,CAAAA,mBAAT,EACP,IADoCC,CAAAA,WACpC,2DADkD,EAClD,IADsDC,CAAAA,MACtD,2DAD+D,CAAC,EAAD,CAC/D,CACI,GAAIC,CAAAA,IAAI,CAAGD,MAAM,CAACD,WAAW,CAAC,CAAD,CAAZ,CAAN,CAAuBA,WAAW,CAAC,CAAD,CAAlC,CAAX,CACA,GAAG,CAACE,IAAI,CAAC,eAAD,CAAR,CACA,CACIA,IAAI,CAAC,SAAD,CAAJ,CAAkB,IAAlB,CACH,CAED,GAAIC,CAAAA,eAAe,CAAGC,QAAQ,CAACC,cAAT,CAAwBL,WAAW,CAAC,CAAD,CAAX,CAAe,GAAf,CAAmBA,WAAW,CAAC,CAAD,CAAtD,CAAtB,CACAG,eAAe,CAACG,SAAhB,CAA0BC,GAA1B,CAA8B,SAA9B,EAEAN,MAAM,CAACD,WAAW,CAAC,CAAD,CAAZ,CAAN,CAAuBA,WAAW,CAAC,CAAD,CAAlC,EAAyCE,IAAzC,CACA,MAAOJ,CAAAA,WAAW,CAACG,MAAD,CAAlB,CACH,CAED,MAAO,SAASO,CAAAA,wBAAT,EACP,IADyCR,CAAAA,WACzC,2DADuD,EACvD,IAD2DC,CAAAA,MAC3D,2DADoE,CAAC,EAAD,CACpE,CACI,GAAIC,CAAAA,IAAI,CAAGD,MAAM,CAACD,WAAW,CAAC,CAAD,CAAZ,CAAN,CAAuBA,WAAW,CAAC,CAAD,CAAlC,CAAX,CACA,GAAG,CAACE,IAAI,CAAC,eAAD,CAAR,CACA,CACIA,IAAI,CAAC,eAAD,CAAJ,CAAwB,IAAxB,CACH,CAEDD,MAAM,CAACD,WAAW,CAAC,CAAD,CAAZ,CAAN,CAAuBA,WAAW,CAAC,CAAD,CAAlC,EAAyCE,IAAzC,CACA,MAAOJ,CAAAA,WAAW,CAACG,MAAD,CAAlB,CACH","sourcesContent":["import shallowCopy from \"../2d-array-functions/shallow-copy\";\n// export default function updateNodeState(coordinates=[], matrix = [[]])\n// {\n//     let node = matrix[coordinates[0]][coordinates[1]];\n//     if(!node[\"visited\"])\n//     {\n//         node[\"visited\"] = true\n//     }\n//     else if (!node[\"shortest_path\"] && node[\"visited\"])\n//     {\n//         // node[\"visited\"] = false;\n//         node[\"shortest_path\"] = true;\n//     }\n\n//     matrix[coordinates[0]][coordinates[1]] = node;\n//     return shallowCopy(matrix);\n// }\n\nexport function changeNodeToVisited(coordinates = [], matrix = [[]])\n{\n    let node = matrix[coordinates[0]][coordinates[1]]\n    if(!node[\"shortest_path\"])\n    {\n        node[\"visited\"] = true;\n    }\n\n    var flicker_element = document.getElementById(coordinates[0]+\"-\"+coordinates[1]);\n    flicker_element.classList.add(\"flicker\");\n\n    matrix[coordinates[0]][coordinates[1]] = node;\n    return shallowCopy(matrix);\n}\n\nexport function changeNodeToShortestPath(coordinates = [], matrix = [[]])\n{\n    let node = matrix[coordinates[0]][coordinates[1]]\n    if(!node[\"shortest_path\"])\n    {\n        node[\"shortest_path\"] = true;\n    }\n\n    matrix[coordinates[0]][coordinates[1]] = node;\n    return shallowCopy(matrix);\n}"]},"metadata":{},"sourceType":"module"}