{"ast":null,"code":"// 1  procedure BFS(G, root) is\n// 2      let Q be a queue\n// 3      label root as discovered\n// 4      Q.enqueue(root)\n// 5      while Q is not empty do\n// 6          v := Q.dequeue()\n// 7          if v is the goal then\n// 8              return v\n// 9          for all edges from v to w in G.adjacentEdges(v) do\n// 10             if w is not labeled as discovered then\n// 11                 label w as discovered\n// 12                 w.parent := v\n// 13                 Q.enqueue(w)\nimport shallowCopy from \"../helpers/2d-array-functions/shallow-copy\"; // import { check_neighbors, update_to_visited, update_parent } from \"./dijkstra\"\n\nimport traverseShortestPath from \"./helpers/matrix-helpers/async-helpers/traverse-shortest-path\";\nimport { checkNeighbors } from \"./helpers/matrix-helpers/async-helpers/check-neighbors\";\nimport { updatetoVisited } from \"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";\nimport { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\nexport function* breadthFirstSearch(matrix = [[]], start_coordinates = [2, 2], end_coordinates = [3, 3]) {\n  yield start_coordinates;\n  let queue = [];\n  let visited = shallowCopy(matrix, false);\n  let found = false;\n  let parent_matrix = shallowCopy(matrix, null);\n  console.log(\"visited: \", visited);\n  visited[start_coordinates[0]][start_coordinates[1]] = true;\n  queue.push(start_coordinates);\n\n  while (queue.length !== 0 && !found) {\n    let vertex_coordinates = queue.shift();\n\n    if (vertex_coordinates[0] === end_coordinates[0] && vertex_coordinates[1] === end_coordinates[1]) {\n      found = true;\n      yield* traverseShortestPath(end_coordinates, parent_matrix); // yield vertex_coordinates;\n    } else {\n      const generator = checkNeighbors(vertex_coordinates, visited);\n      let result = generator.next();\n\n      while (!result.done) {\n        let value = result.value;\n\n        if (visited[value[0]][value[1]] === false) {\n          yield value;\n          updatetoVisited(value, visited);\n          updateParent(vertex_coordinates, value, parent_matrix);\n          queue.push(value);\n        }\n\n        result = generator.next();\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/breadth-first-search.js"],"names":["shallowCopy","traverseShortestPath","checkNeighbors","updatetoVisited","updateParent","breadthFirstSearch","matrix","start_coordinates","end_coordinates","queue","visited","found","parent_matrix","console","log","push","length","vertex_coordinates","shift","generator","result","next","done","value"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,WAAP,MAAwB,4CAAxB,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,+DAAjC;AACA,SAASC,cAAT,QAA+B,wDAA/B;AACA,SAASC,eAAT,QAAgC,gEAAhC;AACA,SAASC,YAAT,QAA6B,4DAA7B;AAEA,OAAO,UAAUC,kBAAV,CAA6BC,MAAM,GAAG,CAAC,EAAD,CAAtC,EAA4CC,iBAAiB,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAhE,EAAwEC,eAAe,GAAG,CAAC,CAAD,EAAI,CAAJ,CAA1F,EAAkG;AACrG,QAAMD,iBAAN;AAEA,MAAIE,KAAK,GAAG,EAAZ;AACA,MAAIC,OAAO,GAAGV,WAAW,CAACM,MAAD,EAAS,KAAT,CAAzB;AACA,MAAIK,KAAK,GAAG,KAAZ;AACA,MAAIC,aAAa,GAAGZ,WAAW,CAACM,MAAD,EAAS,IAAT,CAA/B;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,OAAzB;AACAA,EAAAA,OAAO,CAACH,iBAAiB,CAAC,CAAD,CAAlB,CAAP,CAA8BA,iBAAiB,CAAC,CAAD,CAA/C,IAAsD,IAAtD;AACAE,EAAAA,KAAK,CAACM,IAAN,CAAWR,iBAAX;;AAGA,SAAOE,KAAK,CAACO,MAAN,KAAiB,CAAjB,IAAsB,CAACL,KAA9B,EAAqC;AACjC,QAAIM,kBAAkB,GAAGR,KAAK,CAACS,KAAN,EAAzB;;AACA,QAAKD,kBAAkB,CAAC,CAAD,CAAlB,KAA2BT,eAAe,CAAC,CAAD,CAA3C,IAAoDS,kBAAkB,CAAC,CAAD,CAAlB,KAA0BT,eAAe,CAAC,CAAD,CAAjG,EAAuG;AACnGG,MAAAA,KAAK,GAAG,IAAR;AACA,aAAOV,oBAAoB,CAACO,eAAD,EAAiBI,aAAjB,CAA3B,CAFmG,CAGnG;AACH,KAJD,MAKK;AACD,YAAMO,SAAS,GAAGjB,cAAc,CAACe,kBAAD,EAAqBP,OAArB,CAAhC;AACA,UAAIU,MAAM,GAAGD,SAAS,CAACE,IAAV,EAAb;;AAEA,aAAO,CAACD,MAAM,CAACE,IAAf,EAAqB;AACjB,YAAIC,KAAK,GAAGH,MAAM,CAACG,KAAnB;;AAEA,YAAIb,OAAO,CAACa,KAAK,CAAC,CAAD,CAAN,CAAP,CAAkBA,KAAK,CAAC,CAAD,CAAvB,MAAgC,KAApC,EACA;AACI,gBAAMA,KAAN;AACApB,UAAAA,eAAe,CAACoB,KAAD,EAAQb,OAAR,CAAf;AACAN,UAAAA,YAAY,CAACa,kBAAD,EAAoBM,KAApB,EAA0BX,aAA1B,CAAZ;AACAH,UAAAA,KAAK,CAACM,IAAN,CAAWQ,KAAX;AACH;;AACDH,QAAAA,MAAM,GAAGD,SAAS,CAACE,IAAV,EAAT;AACH;AACJ;AACJ;AACJ","sourcesContent":["// 1  procedure BFS(G, root) is\n// 2      let Q be a queue\n// 3      label root as discovered\n// 4      Q.enqueue(root)\n// 5      while Q is not empty do\n// 6          v := Q.dequeue()\n// 7          if v is the goal then\n// 8              return v\n// 9          for all edges from v to w in G.adjacentEdges(v) do\n// 10             if w is not labeled as discovered then\n// 11                 label w as discovered\n// 12                 w.parent := v\n// 13                 Q.enqueue(w)\n\nimport shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\n// import { check_neighbors, update_to_visited, update_parent } from \"./dijkstra\"\nimport traverseShortestPath from \"./helpers/matrix-helpers/async-helpers/traverse-shortest-path\";\nimport { checkNeighbors } from \"./helpers/matrix-helpers/async-helpers/check-neighbors\";\nimport { updatetoVisited } from \"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";\nimport { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\n\nexport function* breadthFirstSearch(matrix = [[]], start_coordinates = [2, 2], end_coordinates = [3, 3]) {\n    yield start_coordinates;\n\n    let queue = [];\n    let visited = shallowCopy(matrix, false);\n    let found = false;\n    let parent_matrix = shallowCopy(matrix, null);\n    console.log(\"visited: \", visited);\n    visited[start_coordinates[0]][start_coordinates[1]] = true;\n    queue.push(start_coordinates);\n\n\n    while (queue.length !== 0 && !found) {\n        let vertex_coordinates = queue.shift();\n        if ((vertex_coordinates[0] ===  end_coordinates[0]) && (vertex_coordinates[1] === end_coordinates[1])) {\n            found = true;\n            yield* traverseShortestPath(end_coordinates,parent_matrix);\n            // yield vertex_coordinates;\n        }\n        else {\n            const generator = checkNeighbors(vertex_coordinates, visited);\n            let result = generator.next();\n\n            while (!result.done) {\n                let value = result.value\n\n                if (visited[value[0]][value[1]] === false)\n                {\n                    yield value;\n                    updatetoVisited(value, visited);\n                    updateParent(vertex_coordinates,value,parent_matrix);\n                    queue.push(value);\n                }    \n                result = generator.next();\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}