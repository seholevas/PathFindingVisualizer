{"ast":null,"code":"import { getValueByElementId } from \"../helpers/functions/get-value-by-element-id\";\nimport store from \"../redux/stores/store\";\nimport dijkstra from \"../algorithms/dijkstra\";\n\nfunction getAlgorithm(array = [[]], type = \"mergesort\") {\n  if (type === \"a*\") {// return Merge(array);\n  } else if (type === \"bfs\") {// return BubbleSort(array);\n  } else if (type === \"dfs\") {// return SelectionSort(array);\n  } else if (type === \"dijkstra\") {\n    return dijkstra(array);\n  } // else if (type === \"insertionsort\") {\n  //     return InsertionSort(array);\n  // }\n  // else if (type === \"quicksort\") {\n  //     return QuickSort(array, 0, array.length - 1);\n  // }\n  // else if (type === \"cocktailsort\") {\n  // }\n\n}\n\nexport default async function startPathFinding() {\n  const array = store.getState().grid;\n  const playing = store.getState().settings;\n  console.log(\"playing: \", playing);\n  console.log(\"grid: \", array);\n  const pathFindingType = getValueByElementId(\"algorithms\");\n  const generator = getAlgorithm(array, pathFindingType); // let result = generator.next();\n\n  do {\n    let result = generator.next();\n    let value = result.value;\n    console.log(\"value: \", value);\n    playing = await store.getState().settings;\n  } while (playing); // dispatchSortStopped()\n\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/pathfind.js"],"names":["getValueByElementId","store","dijkstra","getAlgorithm","array","type","startPathFinding","getState","grid","playing","settings","console","log","pathFindingType","generator","result","next","value"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,8CAApC;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,SAASC,YAAT,CAAsBC,KAAK,GAAG,CAAC,EAAD,CAA9B,EAAoCC,IAAI,GAAG,WAA3C,EAAwD;AACpD,MAAIA,IAAI,KAAK,IAAb,EAAmB,CACf;AACH,GAFD,MAGK,IAAIA,IAAI,KAAK,KAAb,EAAoB,CACrB;AACH,GAFI,MAGA,IAAIA,IAAI,KAAK,KAAb,EAAoB,CACrB;AACH,GAFI,MAGA,IAAIA,IAAI,KAAK,UAAb,EAAyB;AAC1B,WAAOH,QAAQ,CAACE,KAAD,CAAf;AACH,GAZmD,CAapD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACH;;AAED,eAAe,eAAeE,gBAAf,GAAkC;AAC7C,QAAMF,KAAK,GAAGH,KAAK,CAACM,QAAN,GAAiBC,IAA/B;AACA,QAAMC,OAAO,GAAGR,KAAK,CAACM,QAAN,GAAiBG,QAAjC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,OAAzB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,KAAtB;AAGA,QAAMS,eAAe,GAAGb,mBAAmB,CAAC,YAAD,CAA3C;AACA,QAAMc,SAAS,GAAGX,YAAY,CAACC,KAAD,EAAQS,eAAR,CAA9B,CAR6C,CAU7C;;AACA,KACA;AACI,QAAIE,MAAM,GAAGD,SAAS,CAACE,IAAV,EAAb;AACA,QAAIC,KAAK,GAAGF,MAAM,CAACE,KAAnB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBK,KAAvB;AACAR,IAAAA,OAAO,GAAG,MAAMR,KAAK,CAACM,QAAN,GAAiBG,QAAjC;AACH,GAND,QAOMD,OAPN,EAX6C,CAmB7C;;AACH","sourcesContent":["import { getValueByElementId } from \"../helpers/functions/get-value-by-element-id\";\nimport store from \"../redux/stores/store\"\nimport dijkstra from \"../algorithms/dijkstra\"\n\nfunction getAlgorithm(array = [[]], type = \"mergesort\") {\n    if (type === \"a*\") {\n        // return Merge(array);\n    }\n    else if (type === \"bfs\") {\n        // return BubbleSort(array);\n    }\n    else if (type === \"dfs\") {\n        // return SelectionSort(array);\n    }\n    else if (type === \"dijkstra\") {\n        return dijkstra(array);\n    }\n    // else if (type === \"insertionsort\") {\n    //     return InsertionSort(array);\n    // }\n    // else if (type === \"quicksort\") {\n    //     return QuickSort(array, 0, array.length - 1);\n    // }\n    // else if (type === \"cocktailsort\") {\n\n    // }\n}\n\nexport default async function startPathFinding() {\n    const array = store.getState().grid;\n    const playing = store.getState().settings;\n    console.log(\"playing: \", playing);\n    console.log(\"grid: \", array);\n\n\n    const pathFindingType = getValueByElementId(\"algorithms\");\n    const generator = getAlgorithm(array, pathFindingType);\n\n    // let result = generator.next();\n    do\n    {\n        let result = generator.next();\n        let value = result.value;\n        console.log(\"value: \", value)\n        playing = await store.getState().settings;\n    }\n    while(playing);\n    // dispatchSortStopped()\n}"]},"metadata":{},"sourceType":"module"}