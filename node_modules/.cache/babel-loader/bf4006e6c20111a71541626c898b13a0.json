{"ast":null,"code":"import shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\nimport { checkNeighbors } from \"./helpers/matrix-helpers/async-helpers/check-neighbors\";\nimport { updatetoVisited } from \"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";\nimport { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\nimport getShortestPath from \"./helpers/matrix-helpers/setters-and-getters/get-shortest-path\";\nimport coordinatesAreEqual from \"./helpers/matrix-helpers/setters-and-getters/coordinates-are-equal\";\nexport function* breadthFirstSearch(matrix = [[]], start = [0, 0], end = [3, 3], additional_destinations, walls) {\n  let visited_coordinates = [];\n  let queue = [];\n  let path = [];\n  let start_coordinates = [...start];\n  let end_coordinates = [...end];\n  let visited = shallowCopy(matrix, false);\n  let found = false;\n  let additional_dest = Object.assign({}, additional_destinations);\n  let parent_matrix = shallowCopy(matrix, null);\n  console.log(\"visited: \", visited);\n  visited[start_coordinates[0]][start_coordinates[1]] = true;\n  visited_coordinates.push(start_coordinates);\n  queue.push(start_coordinates);\n\n  while (queue.length !== 0 && !found) {\n    let vertex_coordinates = queue.shift();\n\n    if (additional_dest[vertex_coordinates] !== undefined) {\n      delete additional_dest[vertex_coordinates];\n      let new_path = breadthFirstSearch(matrix, vertex_coordinates, end_coordinates, additional_dest, walls);\n      let add_to_visited_nodes = new_path.next().value;\n      let add_to_path = new_path.next().value;\n      visited_coordinates = visited_coordinates.concat(add_to_visited_nodes);\n      path = path.concat(add_to_path);\n      end_coordinates = vertex_coordinates;\n    }\n\n    if (vertex_coordinates[0] === end_coordinates[0] && vertex_coordinates[1] === end_coordinates[1] && Object.keys(additional_dest).length === 0) {\n      found = true;\n    } else {\n      const generator = checkNeighbors(vertex_coordinates, visited);\n      let result = generator.next();\n\n      while (!result.done) {\n        let value = result.value;\n\n        if (!visited[value[0]][value[1]] && walls[value] === undefined) {\n          // yield value;\n          updatetoVisited(value, visited);\n          updateParent(vertex_coordinates, value, parent_matrix);\n          queue.push(value);\n          visited_coordinates.push(value);\n        }\n\n        result = generator.next();\n      }\n    }\n  }\n\n  path = getShortestPath(end_coordinates, parent_matrix).concat(path); // path = path.concat(getShortestPath(end_coordinates, parent_matrix));\n\n  yield visited_coordinates;\n  yield path;\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/breadth-first-search.js"],"names":["shallowCopy","checkNeighbors","updatetoVisited","updateParent","getShortestPath","coordinatesAreEqual","breadthFirstSearch","matrix","start","end","additional_destinations","walls","visited_coordinates","queue","path","start_coordinates","end_coordinates","visited","found","additional_dest","Object","assign","parent_matrix","console","log","push","length","vertex_coordinates","shift","undefined","new_path","add_to_visited_nodes","next","value","add_to_path","concat","keys","generator","result","done"],"mappings":"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","sourcesContent":["import shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\nimport { checkNeighbors } from \"./helpers/matrix-helpers/async-helpers/check-neighbors\";\nimport { updatetoVisited } from \"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";\nimport { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\nimport getShortestPath from \"./helpers/matrix-helpers/setters-and-getters/get-shortest-path\"\nimport coordinatesAreEqual from \"./helpers/matrix-helpers/setters-and-getters/coordinates-are-equal\";\nexport function* breadthFirstSearch(matrix = [[]], start = [0, 0], end = [3,3], additional_destinations, walls) {\n    let visited_coordinates = [];\n    let queue = [];\n    let path = []\n    let start_coordinates =[...start];\n    let end_coordinates =[...end];\n    let visited = shallowCopy(matrix, false);\n    let found = false;\n    let additional_dest = Object.assign({},additional_destinations);\n    let parent_matrix = shallowCopy(matrix, null);\n    console.log(\"visited: \", visited);\n    visited[start_coordinates[0]][start_coordinates[1]] = true;\n    visited_coordinates.push(start_coordinates);\n    queue.push(start_coordinates);\n\n\n    while (queue.length !== 0 && !found) {\n        let vertex_coordinates = queue.shift();\n        if(additional_dest[vertex_coordinates] !== undefined)\n        {\n            delete additional_dest[vertex_coordinates];\n            let new_path = breadthFirstSearch(matrix,vertex_coordinates,end_coordinates,additional_dest,walls)\n            let add_to_visited_nodes = new_path.next().value\n            let add_to_path = new_path.next().value\n            visited_coordinates = visited_coordinates.concat(add_to_visited_nodes);\n            path = path.concat(add_to_path);\n            end_coordinates = vertex_coordinates;\n\n        }\n        if (((vertex_coordinates[0] ===  end_coordinates[0]) && (vertex_coordinates[1] === end_coordinates[1])) && Object.keys(additional_dest).length === 0) {\n            found = true;            \n        }\n        else {\n            const generator = checkNeighbors(vertex_coordinates, visited);\n            let result = generator.next();\n\n            while (!result.done) {\n                let value = result.value\n\n                if (!visited[value[0]][value[1]] && walls[value] === undefined)\n                {\n                    // yield value;\n                    updatetoVisited(value, visited);\n                    updateParent(vertex_coordinates,value,parent_matrix);\n                    queue.push(value);\n                    visited_coordinates.push(value);\n                }    \n                result = generator.next();\n            }\n        }\n    }\n    path = getShortestPath(end_coordinates, parent_matrix).concat(path);\n    // path = path.concat(getShortestPath(end_coordinates, parent_matrix));\n\n    yield visited_coordinates;\n    yield path\n}"]},"metadata":{},"sourceType":"module"}