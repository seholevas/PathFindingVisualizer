{"ast":null,"code":"import _regeneratorRuntime from\"/home/steven/SWE/Code/path-finding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/steven/SWE/Code/path-finding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{getValueByElementId}from\"../helpers/functions/get-value-by-element-id\";import store from\"../redux/stores/store\";import dijkstra from\"../algorithms/dijkstra\";import{changeNodeToVisited,changeNodeToShortestPath}from\"../helpers/state-functions/update-node-state\";import{dispatchedChangedNodeType}from\"../redux/dispatchs/grid-dispatchs\";import{sleep}from\"../helpers/async-functions/sleep\";import{dispatchedStartedSearch,dispatchedStoppedSearch}from\"../redux/dispatchs/settings-dispatchs\";import{breadthFirstSearch}from\"./breadth-first-search\";import depthFirstSearch from\"./depth-first-search\";import aStar from\"./a-star\";import flicker from\"../helpers/dom-helpers/flicker\";import{clearPath}from\"../helpers/state-functions/clear-matrix\";function getAlgorithm(){var array=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[[]];var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"mergesort\";var start_coordinates=arguments.length>2?arguments[2]:undefined;var end_coordinates=arguments.length>3?arguments[3]:undefined;var additional_destinations=arguments.length>4?arguments[4]:undefined;var walls=arguments.length>5?arguments[5]:undefined;var weights=arguments.length>6?arguments[6]:undefined;var copy_add_dest=Object.assign({},additional_destinations);if(type===\"a*\"){return aStar(array,start_coordinates,end_coordinates,copy_add_dest,walls,weights);}else if(type===\"bfs\"){return breadthFirstSearch(array,start_coordinates,end_coordinates,additional_destinations,walls);}else if(type===\"dfs\"){return depthFirstSearch(array,start_coordinates,end_coordinates,additional_destinations,walls,weights);}else if(type===\"dijkstra\"){return dijkstra(array,start_coordinates,end_coordinates,additional_destinations,walls,weights);}// else if (type === \"insertionsort\") {\n//     return InsertionSort(array);\n// }\n// else if (type === \"quicksort\") {\n//     return QuickSort(array, 0, array.length - 1);\n// }\n// else if (type === \"cocktailsort\") {\n// }\n}export default function startPathFinding(){return _startPathFinding.apply(this,arguments);}function _startPathFinding(){_startPathFinding=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var array,playing,start_coordinates,end_coordinates,weights,walls,additional_destinations,pathFindingType,generator,visited_nodes,shortest_path_nodes,i,copy_matrix,_copy_matrix;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return store.getState().grid;case 2:array=_context.sent;_context.next=5;return store.getState().settings;case 5:playing=_context.sent;_context.next=8;return store.getState().nodes.start_coordinates;case 8:start_coordinates=_context.sent;_context.next=11;return store.getState().nodes.end_coordinates;case 11:end_coordinates=_context.sent;_context.next=14;return store.getState().nodes.weight_coordinates;case 14:weights=_context.sent;_context.next=17;return store.getState().nodes.wall_coordinates;case 17:walls=_context.sent;_context.next=20;return store.getState().nodes.additional_destination_coordinates;case 20:additional_destinations=_context.sent;if(!playing){_context.next=25;break;}return _context.abrupt(\"return\");case 25:clearPath();case 26:dispatchedStartedSearch();_context.next=29;return store.getState().settings;case 29:playing=_context.sent;// console.log(\"playing: \", playing);\n// console.log(\"grid: \", array);\npathFindingType=getValueByElementId(\"algorithms\");generator=getAlgorithm(array,pathFindingType,start_coordinates,end_coordinates,additional_destinations,walls,weights);visited_nodes=generator.next().value;shortest_path_nodes=generator.next().value;i=0;case 35:if(!(playing&&i<visited_nodes.length)){_context.next=49;break;}copy_matrix=changeNodeToVisited(visited_nodes[i],array);_context.next=39;return dispatchedChangedNodeType(copy_matrix);case 39:_context.next=41;return flicker(visited_nodes[i]);case 41:_context.next=43;return store.getState().settings;case 43:playing=_context.sent;i++;_context.next=47;return sleep(500/getValueByElementId(\"speed\"));case 47:_context.next=35;break;case 49:_context.next=51;return store.getState().grid;case 51:array=_context.sent;i=0;if(!(shortest_path_nodes===undefined)){_context.next=56;break;}alert(\"There is no path to the end desination!\");return _context.abrupt(\"return\");case 56:if(!(playing&&i<shortest_path_nodes.length)){_context.next=70;break;}_copy_matrix=changeNodeToShortestPath(shortest_path_nodes[i],array);_context.next=60;return dispatchedChangedNodeType(_copy_matrix);case 60:_context.next=62;return flicker(shortest_path_nodes[i]);case 62:_context.next=64;return store.getState().settings;case 64:playing=_context.sent;i++;_context.next=68;return sleep(500/getValueByElementId(\"speed\"));case 68:_context.next=56;break;case 70:_context.next=72;return dispatchedStoppedSearch();case 72:case\"end\":return _context.stop();}}},_callee);}));return _startPathFinding.apply(this,arguments);}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/pathfind.js"],"names":["getValueByElementId","store","dijkstra","changeNodeToVisited","changeNodeToShortestPath","dispatchedChangedNodeType","sleep","dispatchedStartedSearch","dispatchedStoppedSearch","breadthFirstSearch","depthFirstSearch","aStar","flicker","clearPath","getAlgorithm","array","type","start_coordinates","end_coordinates","additional_destinations","walls","weights","copy_add_dest","Object","assign","startPathFinding","getState","grid","settings","playing","nodes","weight_coordinates","wall_coordinates","additional_destination_coordinates","pathFindingType","generator","visited_nodes","next","value","shortest_path_nodes","i","length","copy_matrix","undefined","alert"],"mappings":"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","sourcesContent":["import { getValueByElementId } from \"../helpers/functions/get-value-by-element-id\";\nimport store from \"../redux/stores/store\"\nimport dijkstra from \"../algorithms/dijkstra\"\nimport { changeNodeToVisited, changeNodeToShortestPath } from \"../helpers/state-functions/update-node-state\";\nimport { dispatchedChangedNodeType } from \"../redux/dispatchs/grid-dispatchs\";\nimport { sleep } from \"../helpers/async-functions/sleep\";\nimport { dispatchedStartedSearch, dispatchedStoppedSearch } from \"../redux/dispatchs/settings-dispatchs\";\nimport { breadthFirstSearch } from \"./breadth-first-search\";\nimport depthFirstSearch from \"./depth-first-search\";\nimport aStar from \"./a-star\";\nimport flicker from \"../helpers/dom-helpers/flicker\";\nimport { clearPath } from \"../helpers/state-functions/clear-matrix\";\n\nfunction getAlgorithm(array = [[]], type = \"mergesort\", start_coordinates, end_coordinates, additional_destinations, walls, weights) {\n    let copy_add_dest = Object.assign({}, additional_destinations);\n\n\n    if (type === \"a*\") {\n        return aStar(array, start_coordinates, end_coordinates, copy_add_dest, walls, weights);\n    }\n    else if (type === \"bfs\") {\n        return breadthFirstSearch(array, start_coordinates, end_coordinates, additional_destinations, walls);\n    }\n    else if (type === \"dfs\") {\n        return depthFirstSearch(array, start_coordinates, end_coordinates, additional_destinations, walls, weights);\n    }\n    else if (type === \"dijkstra\") {\n        return dijkstra(array, start_coordinates, end_coordinates, additional_destinations, walls, weights);\n    }\n    // else if (type === \"insertionsort\") {\n    //     return InsertionSort(array);\n    // }\n    // else if (type === \"quicksort\") {\n    //     return QuickSort(array, 0, array.length - 1);\n    // }\n    // else if (type === \"cocktailsort\") {\n\n    // }\n}\n\nexport default async function startPathFinding() {\n    var array = await store.getState().grid;\n    let playing = await store.getState().settings;\n    let start_coordinates = await store.getState().nodes.start_coordinates;\n    let end_coordinates = await store.getState().nodes.end_coordinates;\n    let weights = await store.getState().nodes.weight_coordinates;\n    let walls = await store.getState().nodes.wall_coordinates;\n    let additional_destinations = await store.getState().nodes.additional_destination_coordinates;\n\n    if (playing) {\n        return;\n    }\n    else\n    {\n        clearPath();\n    }\n\n    dispatchedStartedSearch();\n    playing = await store.getState().settings;\n\n    // console.log(\"playing: \", playing);\n    // console.log(\"grid: \", array);\n\n\n    const pathFindingType = getValueByElementId(\"algorithms\");\n    const generator = getAlgorithm(array, pathFindingType, start_coordinates, end_coordinates, additional_destinations, walls, weights);\n\n    let visited_nodes = generator.next().value;\n\n    let shortest_path_nodes = generator.next().value;\n\n\n    var i = 0;\n    while (playing && i < visited_nodes.length) {\n        \n        let copy_matrix = changeNodeToVisited(visited_nodes[i], array);\n        await dispatchedChangedNodeType(copy_matrix);\n        await flicker(visited_nodes[i]);\n        playing = await store.getState().settings;\n        i++;\n        await sleep(500 / getValueByElementId(\"speed\"));\n\n    }\n\n    array = await store.getState().grid;\n    i = 0;\n    if(shortest_path_nodes === undefined)\n    {\n        alert(\"There is no path to the end desination!\");\n        return;\n    }\n\n    while (playing && i < shortest_path_nodes.length) {\n\n        let copy_matrix = changeNodeToShortestPath(shortest_path_nodes[i], array);\n        await dispatchedChangedNodeType(copy_matrix);\n        await flicker(shortest_path_nodes[i])\n        playing = await store.getState().settings;\n        i++;\n        await sleep(500 / getValueByElementId(\"speed\"));\n\n    }\n    await dispatchedStoppedSearch();\n}"]},"metadata":{},"sourceType":"module"}