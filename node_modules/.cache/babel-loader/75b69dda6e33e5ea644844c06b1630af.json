{"ast":null,"code":"import shallowCopy from\"../2d-array-functions/shallow-copy\";// export default function updateNodeState(coordinates=[], matrix = [[]])\n// {\n//     let node = matrix[coordinates[0]][coordinates[1]];\n//     if(!node[\"visited\"])\n//     {\n//         node[\"visited\"] = true\n//     }\n//     else if (!node[\"shortest_path\"] && node[\"visited\"])\n//     {\n//         // node[\"visited\"] = false;\n//         node[\"shortest_path\"] = true;\n//     }\n//     matrix[coordinates[0]][coordinates[1]] = node;\n//     return shallowCopy(matrix);\n// }\n// changeNodeToVisited.ON_ADDITIONAL_PATH = false;\nexport function changeNodeToVisited(){var coordinates=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var matrix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[[]];var node=matrix[coordinates[0]][coordinates[1]];if(node[\"visited\"]){changeNodeToVisited.ON_ADDITIONAL_PATH=true;}// if (changeNodeToVisited.ON_ADDITIONAL_PATH) {\n//     var additional_path_element = document.getElementById(coordinates[0] + \"-\" + coordinates[1]);\n//     additional_path_element.classList.add(\"visited-by-additional-path\");\n// }\nif(!node[\"shortest_path\"]){node[\"visited\"]=true;}matrix[coordinates[0]][coordinates[1]]=node;return shallowCopy(matrix);}export function changeNodeToShortestPath(){var coordinates=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var matrix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[[]];var node=matrix[coordinates[0]][coordinates[1]];if(!node[\"shortest_path\"]){node[\"shortest_path\"]=true;}matrix[coordinates[0]][coordinates[1]]=node;return shallowCopy(matrix);}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/state-functions/update-node-state.js"],"names":["shallowCopy","changeNodeToVisited","coordinates","matrix","node","ON_ADDITIONAL_PATH","changeNodeToShortestPath"],"mappings":"AAAA,MAAOA,CAAAA,WAAP,KAAwB,oCAAxB,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,MAAO,SAASC,CAAAA,mBAAT,EAA8D,IAAjCC,CAAAA,WAAiC,2DAAnB,EAAmB,IAAfC,CAAAA,MAAe,2DAAN,CAAC,EAAD,CAAM,CACjE,GAAIC,CAAAA,IAAI,CAAGD,MAAM,CAACD,WAAW,CAAC,CAAD,CAAZ,CAAN,CAAuBA,WAAW,CAAC,CAAD,CAAlC,CAAX,CACA,GAAIE,IAAI,CAAC,SAAD,CAAR,CAAqB,CACjBH,mBAAmB,CAACI,kBAApB,CAAyC,IAAzC,CAEH,CACD;AACA;AACA;AACA;AACA,GAAI,CAACD,IAAI,CAAC,eAAD,CAAT,CAA4B,CACxBA,IAAI,CAAC,SAAD,CAAJ,CAAkB,IAAlB,CACH,CAGDD,MAAM,CAACD,WAAW,CAAC,CAAD,CAAZ,CAAN,CAAuBA,WAAW,CAAC,CAAD,CAAlC,EAAyCE,IAAzC,CACA,MAAOJ,CAAAA,WAAW,CAACG,MAAD,CAAlB,CACH,CAED,MAAO,SAASG,CAAAA,wBAAT,EAAmE,IAAjCJ,CAAAA,WAAiC,2DAAnB,EAAmB,IAAfC,CAAAA,MAAe,2DAAN,CAAC,EAAD,CAAM,CACtE,GAAIC,CAAAA,IAAI,CAAGD,MAAM,CAACD,WAAW,CAAC,CAAD,CAAZ,CAAN,CAAuBA,WAAW,CAAC,CAAD,CAAlC,CAAX,CACA,GAAI,CAACE,IAAI,CAAC,eAAD,CAAT,CAA4B,CACxBA,IAAI,CAAC,eAAD,CAAJ,CAAwB,IAAxB,CACH,CAEDD,MAAM,CAACD,WAAW,CAAC,CAAD,CAAZ,CAAN,CAAuBA,WAAW,CAAC,CAAD,CAAlC,EAAyCE,IAAzC,CACA,MAAOJ,CAAAA,WAAW,CAACG,MAAD,CAAlB,CACH","sourcesContent":["import shallowCopy from \"../2d-array-functions/shallow-copy\";\n// export default function updateNodeState(coordinates=[], matrix = [[]])\n// {\n//     let node = matrix[coordinates[0]][coordinates[1]];\n//     if(!node[\"visited\"])\n//     {\n//         node[\"visited\"] = true\n//     }\n//     else if (!node[\"shortest_path\"] && node[\"visited\"])\n//     {\n//         // node[\"visited\"] = false;\n//         node[\"shortest_path\"] = true;\n//     }\n\n//     matrix[coordinates[0]][coordinates[1]] = node;\n//     return shallowCopy(matrix);\n// }\n// changeNodeToVisited.ON_ADDITIONAL_PATH = false;\nexport function changeNodeToVisited(coordinates = [], matrix = [[]]) {\n    let node = matrix[coordinates[0]][coordinates[1]]\n    if (node[\"visited\"]) {\n        changeNodeToVisited.ON_ADDITIONAL_PATH = true\n\n    }\n    // if (changeNodeToVisited.ON_ADDITIONAL_PATH) {\n    //     var additional_path_element = document.getElementById(coordinates[0] + \"-\" + coordinates[1]);\n    //     additional_path_element.classList.add(\"visited-by-additional-path\");\n    // }\n    if (!node[\"shortest_path\"]) {\n        node[\"visited\"] = true;\n    }\n\n\n    matrix[coordinates[0]][coordinates[1]] = node;\n    return shallowCopy(matrix);\n}\n\nexport function changeNodeToShortestPath(coordinates = [], matrix = [[]]) {\n    let node = matrix[coordinates[0]][coordinates[1]]\n    if (!node[\"shortest_path\"]) {\n        node[\"shortest_path\"] = true;\n    }\n\n    matrix[coordinates[0]][coordinates[1]] = node;\n    return shallowCopy(matrix);\n}"]},"metadata":{},"sourceType":"module"}