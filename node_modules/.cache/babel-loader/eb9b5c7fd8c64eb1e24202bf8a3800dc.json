{"ast":null,"code":"import store from \"../../redux/stores/store\";\nimport { dispatchedChangedNodeType } from \"../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\nlet node = null;\nlet prev_coordinates = null;\n\nfunction _getIdCoordinates(id = \"\") {\n  let str_coordinates = id.split(\"-\");\n  let row = parseInt(str_coordinates[0]);\n  let column = parseInt(str_coordinates[1]);\n  return [row, column];\n}\n\nfunction _updatePrevCoordinates(id = \"\") {\n  let str_coordinates = id.split(\"-\");\n  let row = parseInt(str_coordinates[0]);\n  let column = parseInt(str_coordinates[1]);\n  prev_coordinates = [row, column];\n}\n\nfunction _updatePressedNode(id) {\n  const grid = store.getState().grid;\n  node = grid[row][column];\n}\n\nexport function grabItem(id) {}\nexport function holdingItem(id) {}\nexport function releaseItem(id) {// let str_coordinates = id.split(\"-\");\n  // let row = parseInt(str_coordinates[0]);\n  // let column = parseInt(str_coordinates[1]);\n  // let grid = store.getState().grid\n  // // || node['type'] === \"end_node\"\n  // if (node['type'] === \"start_node\") {\n  //     // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n  //     grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n  //     grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n  // }\n  // console.log(\"released at: \", id);\n  // console.log(\"node released: \", node);\n  // const copy = shallowCopy(grid);\n  // dispatchedChangedNodeType(copy);\n} // export function grabItem(id) {\n//     let str_coordinates = id.split(\"-\");\n//     console.log(\"grabbed at: \", str_coordinates)\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     prev_coordinates = [row, column];\n//     let grid = store.getState().grid\n//     node = grid[row][column];\n// }\n// export function holdingItem(id)\n// {\n//     let str_coordinates = id.split(\"-\");\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     let grid = store.getState().grid\n//     // || node['type'] === \"end_node\"\n//     if (node['type'] === \"start_node\") {\n//         // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n//         grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n//         grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n//     }\n//     console.log(\"released at: \", id);\n//     console.log(\"node released: \", node);\n//     const copy = shallowCopy(grid);\n//     dispatchedChangedNodeType(copy); \n// }\n// export function releaseItem(id) {\n//     let str_coordinates = id.split(\"-\");\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     let grid = store.getState().grid\n//     // || node['type'] === \"end_node\"\n//     if (node['type'] === \"start_node\") {\n//         // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n//         grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n//         grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n//     }\n//     console.log(\"released at: \", id);\n//     console.log(\"node released: \", node);\n//     const copy = shallowCopy(grid);\n//     dispatchedChangedNodeType(copy);\n// }","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/action-listeners/on-mouse.js"],"names":["store","dispatchedChangedNodeType","shallowCopy","node","prev_coordinates","_getIdCoordinates","id","str_coordinates","split","row","parseInt","column","_updatePrevCoordinates","_updatePressedNode","grid","getState","grabItem","holdingItem","releaseItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,0BAAlB;AACA,SAASC,yBAAT,QAA0C,sCAA1C;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AAEA,IAAIC,IAAI,GAAG,IAAX;AACA,IAAIC,gBAAgB,GAAG,IAAvB;;AAEA,SAASC,iBAAT,CAA2BC,EAAE,GAAC,EAA9B,EACA;AACI,MAAIC,eAAe,GAAGD,EAAE,CAACE,KAAH,CAAS,GAAT,CAAtB;AACA,MAAIC,GAAG,GAAGC,QAAQ,CAACH,eAAe,CAAC,CAAD,CAAhB,CAAlB;AACA,MAAII,MAAM,GAAGD,QAAQ,CAACH,eAAe,CAAC,CAAD,CAAhB,CAArB;AACA,SAAO,CAACE,GAAD,EAAKE,MAAL,CAAP;AACH;;AACD,SAASC,sBAAT,CAAgCN,EAAE,GAAC,EAAnC,EACA;AACI,MAAIC,eAAe,GAAGD,EAAE,CAACE,KAAH,CAAS,GAAT,CAAtB;AACA,MAAIC,GAAG,GAAGC,QAAQ,CAACH,eAAe,CAAC,CAAD,CAAhB,CAAlB;AACA,MAAII,MAAM,GAAGD,QAAQ,CAACH,eAAe,CAAC,CAAD,CAAhB,CAArB;AACAH,EAAAA,gBAAgB,GAAG,CAACK,GAAD,EAAME,MAAN,CAAnB;AACH;;AAED,SAASE,kBAAT,CAA4BP,EAA5B,EACA;AACI,QAAMQ,IAAI,GAAGd,KAAK,CAACe,QAAN,GAAiBD,IAA9B;AACAX,EAAAA,IAAI,GAAGW,IAAI,CAACL,GAAD,CAAJ,CAAUE,MAAV,CAAP;AACH;;AAED,OAAO,SAASK,QAAT,CAAkBV,EAAlB,EAAsB,CAG5B;AAED,OAAO,SAASW,WAAT,CAAqBX,EAArB,EACP,CAEC;AAED,OAAO,SAASY,WAAT,CAAqBZ,EAArB,EAAyB,CAC5B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,C,CASD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import store from \"../../redux/stores/store\";\nimport { dispatchedChangedNodeType } from \"../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\n\nlet node = null\nlet prev_coordinates = null;\n\nfunction _getIdCoordinates(id=\"\")\n{\n    let str_coordinates = id.split(\"-\");\n    let row = parseInt(str_coordinates[0]);\n    let column = parseInt(str_coordinates[1]);\n    return [row,column];\n}\nfunction _updatePrevCoordinates(id=\"\")\n{\n    let str_coordinates = id.split(\"-\");\n    let row = parseInt(str_coordinates[0]);\n    let column = parseInt(str_coordinates[1]);\n    prev_coordinates = [row, column];\n}\n\nfunction _updatePressedNode(id)\n{\n    const grid = store.getState().grid\n    node = grid[row][column];\n}\n\nexport function grabItem(id) {\n   \n\n}\n\nexport function holdingItem(id)\n{\n  \n}\n\nexport function releaseItem(id) {\n    // let str_coordinates = id.split(\"-\");\n    // let row = parseInt(str_coordinates[0]);\n    // let column = parseInt(str_coordinates[1]);\n    // let grid = store.getState().grid\n\n    // // || node['type'] === \"end_node\"\n    // if (node['type'] === \"start_node\") {\n    //     // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n    //     grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n    //     grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n    // }\n    // console.log(\"released at: \", id);\n    // console.log(\"node released: \", node);\n    // const copy = shallowCopy(grid);\n    // dispatchedChangedNodeType(copy);\n}\n\n\n\n\n\n\n\n\n// export function grabItem(id) {\n//     let str_coordinates = id.split(\"-\");\n//     console.log(\"grabbed at: \", str_coordinates)\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     prev_coordinates = [row, column];\n//     let grid = store.getState().grid\n//     node = grid[row][column];\n\n// }\n\n// export function holdingItem(id)\n// {\n//     let str_coordinates = id.split(\"-\");\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     let grid = store.getState().grid\n\n//     // || node['type'] === \"end_node\"\n//     if (node['type'] === \"start_node\") {\n//         // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n//         grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n//         grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n//     }\n//     console.log(\"released at: \", id);\n//     console.log(\"node released: \", node);\n//     const copy = shallowCopy(grid);\n//     dispatchedChangedNodeType(copy); \n// }\n\n// export function releaseItem(id) {\n//     let str_coordinates = id.split(\"-\");\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     let grid = store.getState().grid\n\n//     // || node['type'] === \"end_node\"\n//     if (node['type'] === \"start_node\") {\n//         // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n//         grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n//         grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n//     }\n//     console.log(\"released at: \", id);\n//     console.log(\"node released: \", node);\n//     const copy = shallowCopy(grid);\n//     dispatchedChangedNodeType(copy);\n// }\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}