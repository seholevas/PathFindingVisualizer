{"ast":null,"code":"import shallowCopy from \"../../../helpers/2d-array-functions/shallow-copy\";\nimport { checkNeighbors } from \"./async-helpers/check-neighbors\";\nimport { updateParent } from \"./setters-and-getters/update-parent\";\nexport default function* aStar(start_coordinates = [0, 0], end_cordinates = [3, 3], adjacency_matrix = [[]]) {\n  let queue = [];\n  let parent_matrix = shallowCopy(adjacency_matrix, null);\n  let final_cost_matrix = shallowCopy(adjacency_matrix, Infinity);\n  let visited = shallowCopy(adjacency_matrix, false);\n  queue.push([Infinity, [...start_coordinates]]);\n\n  while (queue.lenth !== 0) {\n    let f_cost,\n        current_vertex_coordinates = queue.shift();\n    yield [...current_vertex_coordinates];\n    const generator = checkNeighbors(current_vertex_coordinates, visited);\n    let result = generator.next();\n\n    while (!result.done) {\n      let g_cost = manhattanDistance(current_vertex_coordinates, start_coordinates);\n      let h_cost = manhattanDistance(current_vertex_coordinates, end_cordinates);\n      f_cost = g_cost + h_cost;\n      let value = result.value;\n      updateParent(current_vertex_coordinates, value, parent_matrix);\n      queue.push([f_cost, value]);\n      result = generator.next();\n    }\n\n    queue.sort(function (tuple1, tuple2) {\n      if (tuple1[0] < tuple2[0]) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n  }\n}\n\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n  return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1]);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/helpers/matrix-helpers/a-star.js"],"names":["shallowCopy","checkNeighbors","updateParent","aStar","start_coordinates","end_cordinates","adjacency_matrix","queue","parent_matrix","final_cost_matrix","Infinity","visited","push","lenth","f_cost","current_vertex_coordinates","shift","generator","result","next","done","g_cost","manhattanDistance","h_cost","value","sort","tuple1","tuple2","coordinates1","coordinates2","Math","abs"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,kDAAxB;AACA,SAASC,cAAT,QAA+B,iCAA/B;AACA,SAASC,YAAT,QAA6B,qCAA7B;AAEA,eAAe,UAAUC,KAAV,CAAgBC,iBAAiB,GAAG,CAAC,CAAD,EAAI,CAAJ,CAApC,EAA4CC,cAAc,GAAG,CAAC,CAAD,EAAI,CAAJ,CAA7D,EAAqEC,gBAAgB,GAAG,CAAC,EAAD,CAAxF,EAA8F;AACzG,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,aAAa,GAAGR,WAAW,CAACM,gBAAD,EAAmB,IAAnB,CAA/B;AACA,MAAIG,iBAAiB,GAAGT,WAAW,CAACM,gBAAD,EAAmBI,QAAnB,CAAnC;AACA,MAAIC,OAAO,GAAGX,WAAW,CAACM,gBAAD,EAAmB,KAAnB,CAAzB;AACAC,EAAAA,KAAK,CAACK,IAAN,CAAW,CAACF,QAAD,EAAW,CAAC,GAAGN,iBAAJ,CAAX,CAAX;;AAEA,SAAOG,KAAK,CAACM,KAAN,KAAgB,CAAvB,EAA0B;AACtB,QAAIC,MAAJ;AAAA,QAAYC,0BAA0B,GAAGR,KAAK,CAACS,KAAN,EAAzC;AACA,UAAM,CAAC,GAAGD,0BAAJ,CAAN;AACA,UAAME,SAAS,GAAGhB,cAAc,CAACc,0BAAD,EAA6BJ,OAA7B,CAAhC;AACA,QAAIO,MAAM,GAAGD,SAAS,CAACE,IAAV,EAAb;;AAEA,WAAO,CAACD,MAAM,CAACE,IAAf,EAAqB;AAEjB,UAAIC,MAAM,GAAGC,iBAAiB,CAACP,0BAAD,EAA6BX,iBAA7B,CAA9B;AACA,UAAImB,MAAM,GAAGD,iBAAiB,CAACP,0BAAD,EAA6BV,cAA7B,CAA9B;AACAS,MAAAA,MAAM,GAAGO,MAAM,GAAGE,MAAlB;AACA,UAAIC,KAAK,GAAGN,MAAM,CAACM,KAAnB;AAEAtB,MAAAA,YAAY,CAACa,0BAAD,EAA6BS,KAA7B,EAAoChB,aAApC,CAAZ;AACAD,MAAAA,KAAK,CAACK,IAAN,CAAW,CAACE,MAAD,EAASU,KAAT,CAAX;AAEAN,MAAAA,MAAM,GAAGD,SAAS,CAACE,IAAV,EAAT;AACH;;AAEDZ,IAAAA,KAAK,CAACkB,IAAN,CAAW,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B;AACjC,UAAID,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAAtB,EAA2B;AACvB,eAAO,CAAC,CAAR;AACH,OAFD,MAGK;AACD,eAAO,CAAP;AACH;AACJ,KAPD;AAQH;AAEJ;;AAED,SAASL,iBAAT,CAA2BM,YAAY,GAAG,EAA1C,EAA8CC,YAAY,GAAG,EAA7D,EAAiE;AAC7D,SAAOC,IAAI,CAACC,GAAL,CAASH,YAAY,CAAC,CAAD,CAAZ,GAAkBC,YAAY,CAAC,CAAD,CAAvC,IAA8CC,IAAI,CAACC,GAAL,CAASH,YAAY,CAAC,CAAD,CAAZ,GAAkBC,YAAY,CAAC,CAAD,CAAvC,CAArD;AACH","sourcesContent":["import shallowCopy from \"../../../helpers/2d-array-functions/shallow-copy\"\nimport { checkNeighbors } from \"./async-helpers/check-neighbors\";\nimport { updateParent } from \"./setters-and-getters/update-parent\";\n\nexport default function* aStar(start_coordinates = [0, 0], end_cordinates = [3, 3], adjacency_matrix = [[]]) {\n    let queue = []\n    let parent_matrix = shallowCopy(adjacency_matrix, null);\n    let final_cost_matrix = shallowCopy(adjacency_matrix, Infinity);\n    let visited = shallowCopy(adjacency_matrix, false);\n    queue.push([Infinity, [...start_coordinates]]);\n\n    while (queue.lenth !== 0) {\n        let f_cost, current_vertex_coordinates = queue.shift();\n        yield [...current_vertex_coordinates];\n        const generator = checkNeighbors(current_vertex_coordinates, visited);\n        let result = generator.next();\n\n        while (!result.done) {\n\n            let g_cost = manhattanDistance(current_vertex_coordinates, start_coordinates);\n            let h_cost = manhattanDistance(current_vertex_coordinates, end_cordinates);\n            f_cost = g_cost + h_cost;\n            let value = result.value\n\n            updateParent(current_vertex_coordinates, value, parent_matrix);\n            queue.push([f_cost, value]);\n\n            result = generator.next();\n        }\n\n        queue.sort(function (tuple1, tuple2) {\n            if (tuple1[0] < tuple2[0]) {\n                return -1\n            }\n            else {\n                return 1;\n            }\n        });\n    }\n\n}\n\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n    return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1])\n}"]},"metadata":{},"sourceType":"module"}