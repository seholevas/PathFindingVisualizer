{"ast":null,"code":"import store from \"../../redux/stores/store\";\nlet node = null;\nlet prev_coordinates = null;\nexport function grabItem(id = '') {\n  let str_coordinates = id.split(\"-\");\n  prev_coordinates = str_coordinates;\n  const grid = store.getState().grid;\n  node = grid[str_coordinates[0]][str_coordinates[1]];\n}\nexport function releaseItem(id = '') {\n  let str_coordinates = id.split(\"-\");\n  const grid = store.getState().grid;\n\n  if (node['type'] === \"start_node\" || node['type'] === \"end_node\") {\n    // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n    grid[prev_coordinates[0]][prev_coordinates[1]] = {\n      type: \"empty_node\",\n      visited: false,\n      shortest_path: false\n    };\n    grid[str_coordinates[0]][str_coordinates[1]] = {\n      type: \"start_node\",\n      visited: false,\n      shortest_path: false\n    };\n  }\n\n  console.log(\"released at: \", id);\n  console.log(\"node released: \", node);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/action-listeners/on-mouse.js"],"names":["store","node","prev_coordinates","grabItem","id","str_coordinates","split","grid","getState","releaseItem","type","visited","shortest_path","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,0BAAlB;AAEA,IAAIC,IAAI,GAAG,IAAX;AACA,IAAIC,gBAAgB,GAAG,IAAvB;AAGA,OAAO,SAASC,QAAT,CAAkBC,EAAE,GAAC,EAArB,EACP;AACI,MAAIC,eAAe,GAAGD,EAAE,CAACE,KAAH,CAAS,GAAT,CAAtB;AACAJ,EAAAA,gBAAgB,GAAGG,eAAnB;AACA,QAAME,IAAI,GAAGP,KAAK,CAACQ,QAAN,GAAiBD,IAA9B;AACAN,EAAAA,IAAI,GAAGM,IAAI,CAACF,eAAe,CAAC,CAAD,CAAhB,CAAJ,CAAyBA,eAAe,CAAC,CAAD,CAAxC,CAAP;AAEH;AACD,OAAO,SAASI,WAAT,CAAqBL,EAAE,GAAC,EAAxB,EACP;AACI,MAAIC,eAAe,GAAGD,EAAE,CAACE,KAAH,CAAS,GAAT,CAAtB;AACA,QAAMC,IAAI,GAAGP,KAAK,CAACQ,QAAN,GAAiBD,IAA9B;;AAEA,MAAGN,IAAI,CAAC,MAAD,CAAJ,KAAiB,YAAjB,IAAiCA,IAAI,CAAC,MAAD,CAAJ,KAAiB,UAArD,EACA;AACJ;AACAM,IAAAA,IAAI,CAACL,gBAAgB,CAAC,CAAD,CAAjB,CAAJ,CAA0BA,gBAAgB,CAAC,CAAD,CAA1C,IAAiD;AAACQ,MAAAA,IAAI,EAAE,YAAP;AAAqBC,MAAAA,OAAO,EAAE,KAA9B;AAAqCC,MAAAA,aAAa,EAAE;AAApD,KAAjD;AACAL,IAAAA,IAAI,CAACF,eAAe,CAAC,CAAD,CAAhB,CAAJ,CAAyBA,eAAe,CAAC,CAAD,CAAxC,IAA+C;AAAEK,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,OAAO,EAAE,KAA/B;AAAsCC,MAAAA,aAAa,EAAE;AAArD,KAA/C;AACK;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BV,EAA7B;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bb,IAA/B;AACH","sourcesContent":["import store from \"../../redux/stores/store\";\n\nlet node = null\nlet prev_coordinates = null;\n\n\nexport function grabItem(id='')\n{\n    let str_coordinates = id.split(\"-\");\n    prev_coordinates = str_coordinates;\n    const grid = store.getState().grid\n    node = grid[str_coordinates[0]][str_coordinates[1]];\n\n}\nexport function releaseItem(id='')\n{\n    let str_coordinates = id.split(\"-\");\n    const grid = store.getState().grid\n\n    if(node['type'] === \"start_node\" || node['type'] === \"end_node\")\n    {\n// INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\ngrid[prev_coordinates[0]][prev_coordinates[1]] = {type: \"empty_node\", visited: false, shortest_path: false};\ngrid[str_coordinates[0]][str_coordinates[1]] = { type: \"start_node\", visited: false, shortest_path: false}\n    }\n    console.log(\"released at: \", id);\n    console.log(\"node released: \", node);\n}"]},"metadata":{},"sourceType":"module"}