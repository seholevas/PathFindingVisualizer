{"ast":null,"code":"// 1  function Dijkstra(Graph, source):\n// 2\n// 3      create vertex set Q\n// 4\n// 5      for each vertex v in Graph:             \n// 6          dist[v] ← INFINITY                  \n// 7          prev[v] ← UNDEFINED                 \n// 8          add v to Q                      \n// 10      dist[source] ← 0                        \n// 11      \n// 12      while Q is not empty:\n// 13          u ← vertex in Q with min dist[u]    \n// 14                                              \n// 15          remove u from Q \n// 16          \n// 17          for each neighbor v of u:           // only v that are still in Q\n// 18              alt ← dist[u] + length(u, v)\n// 19              if alt < dist[v]:               \n// 20                  dist[v] ← alt \n// 21                  prev[v] ← u \n// 22\n// 23      return dist[], prev[]\nexport default function* dijkstra(matrix = [[]], source = matrix[0][0]) {\n  let adjacency_matrix = [...matrix]; // let unvisited_nodes = new Array(matrix.length * matrix.length)\n  // console.log(\"unvisited: \", unvisited_nodes);\n\n  for (let row = 0; row < matrix.length; row++) {\n    for (let col = 0; col < matrix[row].length; col++) {\n      if (source === adjacency_matrix[row][col]) {\n        adjacency_matrix[row][col] = 0;\n      } else {\n        adjacency_matrix[row][col] = Infinity;\n      }\n    }\n  }\n\n  yield [...adjacency_matrix];\n}\n\nfunction neighbors(row = 0, column = 0) {}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/dijkstra.js"],"names":["dijkstra","matrix","source","adjacency_matrix","row","length","col","Infinity","neighbors","column"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,eAAe,UAAUA,QAAV,CAAmBC,MAAM,GAAG,CAAC,EAAD,CAA5B,EAAkCC,MAAM,GAAGD,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAA3C,EAAyD;AACpE,MAAIE,gBAAgB,GAAG,CAAC,GAAGF,MAAJ,CAAvB,CADoE,CAGpE;AACA;;AAEA,OAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGH,MAAM,CAACI,MAA/B,EAAuCD,GAAG,EAA1C,EAA8C;AAC1C,SAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,MAAM,CAACG,GAAD,CAAN,CAAYC,MAApC,EAA4CC,GAAG,EAA/C,EAAmD;AAC/C,UAAIJ,MAAM,KAAKC,gBAAgB,CAACC,GAAD,CAAhB,CAAsBE,GAAtB,CAAf,EAA2C;AACvCH,QAAAA,gBAAgB,CAACC,GAAD,CAAhB,CAAsBE,GAAtB,IAA6B,CAA7B;AACH,OAFD,MAGK;AACDH,QAAAA,gBAAgB,CAACC,GAAD,CAAhB,CAAsBE,GAAtB,IAA6BC,QAA7B;AACH;AACJ;AACJ;;AACD,QAAM,CAAC,GAAGJ,gBAAJ,CAAN;AAEH;;AAED,SAASK,SAAT,CAAmBJ,GAAG,GAAC,CAAvB,EAAyBK,MAAM,GAAC,CAAhC,EACA,CACC","sourcesContent":["// 1  function Dijkstra(Graph, source):\n// 2\n// 3      create vertex set Q\n// 4\n// 5      for each vertex v in Graph:             \n// 6          dist[v] ← INFINITY                  \n// 7          prev[v] ← UNDEFINED                 \n// 8          add v to Q                      \n// 10      dist[source] ← 0                        \n// 11      \n// 12      while Q is not empty:\n// 13          u ← vertex in Q with min dist[u]    \n// 14                                              \n// 15          remove u from Q \n// 16          \n// 17          for each neighbor v of u:           // only v that are still in Q\n// 18              alt ← dist[u] + length(u, v)\n// 19              if alt < dist[v]:               \n// 20                  dist[v] ← alt \n// 21                  prev[v] ← u \n// 22\n// 23      return dist[], prev[]\n\nexport default function* dijkstra(matrix = [[]], source = matrix[0][0]) {\n    let adjacency_matrix = [...matrix]\n\n    // let unvisited_nodes = new Array(matrix.length * matrix.length)\n    // console.log(\"unvisited: \", unvisited_nodes);\n\n    for (let row = 0; row < matrix.length; row++) {\n        for (let col = 0; col < matrix[row].length; col++) {\n            if (source === adjacency_matrix[row][col]) {\n                adjacency_matrix[row][col] = 0;\n            }\n            else {\n                adjacency_matrix[row][col] = Infinity;\n            }\n        }\n    }\n    yield [...adjacency_matrix]\n\n}\n\nfunction neighbors(row=0,column=0)\n{\n}"]},"metadata":{},"sourceType":"module"}