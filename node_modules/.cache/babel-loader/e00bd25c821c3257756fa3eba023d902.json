{"ast":null,"code":"import shallowCopy from \"../2d-array-functions/shallow-copy\";\nimport { dispatchedChangedNodeType } from \"../../redux/dispatchs/grid-dispatchs\";\nimport store from \"../../redux/stores/store\";\nimport { dispatchedRemovedAdditionalDestination, dispatchedRemovedWeight, dispatchedRemovedWall, dispatchedMovedStart, dispatchedMovedEnd } from \"../../redux/dispatchs/node-dispatchs\";\nexport async function clearPath() {\n  const start = await store.getState().nodes.start_coordinates;\n  const end = await store.getState().nodes.end_coordinates;\n  let grid = await store.getState().grid;\n  let copy = shallowCopy(grid);\n\n  for (let i = 0; i < copy.length; i++) {\n    for (let j = 0; j < copy.length; j++) {\n      let node = copy[i][j];\n      node[\"visited\"] = false;\n      node[\"shortest_path\"] = false;\n      copy[i][j] = node;\n    }\n  }\n\n  await dispatchedChangedNodeType(copy);\n  await dispatchedMovedStart([...start]);\n  await dispatchedMovedEnd([...end]);\n}\nexport async function clearAll() {\n  await clearPath();\n  let grid = store.getState().grid;\n  let copy = shallowCopy(grid);\n\n  for (let i = 0; i < copy.length; i++) {\n    for (let j = 0; j < copy.length; j++) {\n      let node = copy[i][j];\n      var type = null;\n\n      if (node['type'] !== \"start_node\" && node[\"type\"] !== \"end_node\") {\n        type = node['type'];\n        node = {\n          type: \"empty_node\",\n          visited: false,\n          shortest_path: false\n        };\n        copy[i][j] = node;\n      }\n\n      switch (type) {\n        case \"additional_destination_node\":\n          await dispatchedRemovedAdditionalDestination([i, j]);\n          break;\n\n        case \"weight_node\":\n          await dispatchedRemovedWeight([i, j]);\n          break;\n\n        case \"wall_node\":\n          await dispatchedRemovedWall([i, j]);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }\n\n  await dispatchedChangedNodeType(copy);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/state-functions/clear-matrix.js"],"names":["shallowCopy","dispatchedChangedNodeType","store","dispatchedRemovedAdditionalDestination","dispatchedRemovedWeight","dispatchedRemovedWall","dispatchedMovedStart","dispatchedMovedEnd","clearPath","start","getState","nodes","start_coordinates","end","end_coordinates","grid","copy","i","length","j","node","clearAll","type","visited","shortest_path"],"mappings":"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","sourcesContent":["import shallowCopy from \"../2d-array-functions/shallow-copy\";\nimport { dispatchedChangedNodeType } from \"../../redux/dispatchs/grid-dispatchs\";\nimport store from \"../../redux/stores/store\";\nimport { dispatchedRemovedAdditionalDestination, dispatchedRemovedWeight, dispatchedRemovedWall, dispatchedMovedStart, dispatchedMovedEnd } from \"../../redux/dispatchs/node-dispatchs\";\n\nexport async function clearPath() {\n    const start = await store.getState().nodes.start_coordinates;\n    const end = await store.getState().nodes.end_coordinates;\n    let grid = await store.getState().grid;\n    let copy = shallowCopy(grid);\n\n    for (let i = 0; i < copy.length; i++) {\n        for (let j = 0; j < copy.length; j++) {\n            let node = copy[i][j]\n            node[\"visited\"] = false;\n            node[\"shortest_path\"] = false;\n            copy[i][j] = node;\n\n        }\n    }\n    await dispatchedChangedNodeType(copy);\n    await dispatchedMovedStart([...start]);\n    await dispatchedMovedEnd([...end])\n}\n\nexport async function clearAll()\n{\n    await clearPath();\n    let grid = store.getState().grid;\n    let copy = shallowCopy(grid);\n    for (let i = 0; i < copy.length; i++) {\n        for (let j = 0; j < copy.length; j++) {\n            let node = copy[i][j]\n            var type = null;\n            if(node['type'] !== \"start_node\" && node[\"type\"] !== \"end_node\")\n            {\n               type = node['type']\n               node = { type: \"empty_node\", visited: false, shortest_path: false} \n               copy[i][j] = node;\n            }\n\n            switch(type)\n            {\n                case \"additional_destination_node\":\n                    await dispatchedRemovedAdditionalDestination([i,j]);\n                    break;\n                case \"weight_node\":\n                    await dispatchedRemovedWeight([i,j]);\n                    break;\n                case \"wall_node\":\n                    await dispatchedRemovedWall([i,j]);\n                    break;\n                default:\n                    break;\n            }\n\n        }\n        \n    }\n\n    await dispatchedChangedNodeType(copy);\n}"]},"metadata":{},"sourceType":"module"}