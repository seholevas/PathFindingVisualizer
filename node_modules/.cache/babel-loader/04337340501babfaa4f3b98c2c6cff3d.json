{"ast":null,"code":"import store from \"../../redux/stores/store\";\nlet node = null; // export function grabItem(id='')\n// {\n//     // alert(id);\n//     let str_coordinates = id.split(\"-\");\n//     const grid = store.getState().grid\n//     node = grid[str_coordinates[0]][str_coordinates[1]];\n// }\n// export function releaseItem()\n// {\n//     console.log(\"node released: \", node);\n// }\n// export function grabItem(id)\n// {\n//     let str_coordinates = id.split(\"-\");\n//     // console.log(\"str_coordinates: \", str_coordinates);\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     prev_coordinates = [row,column];\n//     let grid = store.getState().grid\n//     node = grid[row][column];\n// }\n// export function releaseItem(id)\n// {\n//     let str_coordinates = id.split(\"-\");\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     let grid = store.getState().grid\n//     if(node['type'] === \"start_node\" || node['type'] === \"end_node\")\n//     {\n// // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n// grid[prev_coordinates[0]][prev_coordinates[1]] = {type: \"empty_node\", visited: false, shortest_path: false};\n// grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false}\n//     }\n//     console.log(\"released at: \", id);\n//     console.log(\"node released: \", node);\n// }","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/action-listeners/on-mouse.js"],"names":["store","node"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,0BAAlB;AAEA,IAAIC,IAAI,GAAG,IAAX,C,CAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import store from \"../../redux/stores/store\";\n\nlet node = null\n\n\n// export function grabItem(id='')\n// {\n//     // alert(id);\n//     let str_coordinates = id.split(\"-\");\n//     const grid = store.getState().grid\n//     node = grid[str_coordinates[0]][str_coordinates[1]];\n\n// }\n// export function releaseItem()\n// {\n//     console.log(\"node released: \", node);\n// }\n\n// export function grabItem(id)\n// {\n//     let str_coordinates = id.split(\"-\");\n//     // console.log(\"str_coordinates: \", str_coordinates);\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     prev_coordinates = [row,column];\n//     let grid = store.getState().grid\n//     node = grid[row][column];\n\n// }\n// export function releaseItem(id)\n// {\n//     let str_coordinates = id.split(\"-\");\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     let grid = store.getState().grid\n\n//     if(node['type'] === \"start_node\" || node['type'] === \"end_node\")\n//     {\n// // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n// grid[prev_coordinates[0]][prev_coordinates[1]] = {type: \"empty_node\", visited: false, shortest_path: false};\n// grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false}\n//     }\n//     console.log(\"released at: \", id);\n//     console.log(\"node released: \", node);\n// }"]},"metadata":{},"sourceType":"module"}