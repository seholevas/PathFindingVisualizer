{"ast":null,"code":"// 1  function Dijkstra(Graph, source):\n// 2\n// 3      create vertex set Q\n// 4\n// 5      for each vertex v in Graph:             \n// 6          dist[v] ← INFINITY                  \n// 7          prev[v] ← UNDEFINED                 \n// 8          add v to Q                      \n// 10      dist[source] ← 0                        \n// 11      \n// 12      while Q is not empty:\n// 13          u ← vertex in Q with min dist[u]    \n// 14                                              \n// 15          remove u from Q \n// 16          \n// 17          for each neighbor v of u:           // only v that are still in Q\n// 18              alt ← dist[u] + length(u, v)\n// 19              if alt < dist[v]:               \n// 20                  dist[v] ← alt \n// 21                  prev[v] ← u \n// 22\n// 23      return dist[], prev[]\nexport default function* dijkstra(matrix = [[]], source = [0, 0], final = matrix[(3, 3)]) {\n  let adjacency_matrix = [...matrix];\n  let coordinates = [0, 0];\n  let visited = {};\n  let path = [[]]; // let distance = {}\n  // let vertex_priority_queue = new \n  // let unvisited_nodes = new Array(matrix.length * matrix.length)\n  // console.log(\"unvisited: \", unvisited_nodes);\n\n  for (let row = 0; row < matrix.length; row++) {\n    for (let col = 0; col < matrix[row].length; col++) {\n      if (source[0] === row && source[1] === col) {\n        adjacency_matrix[row][col] = 0;\n        coordinates = [row, col];\n        visited[(row, col)] = true;\n      } else {\n        adjacency_matrix[row][col] = Infinity;\n        visited[(row, col)] = false;\n      }\n\n      console.log(\"visited: \", visited[(row, col)]);\n    }\n  }\n\n  while (coordinates[0] !== final[0] && coordinates[1] !== final[1]) {\n    coordinates = [];\n    const generator = check_neighbors();\n    let result = null;\n\n    do {\n      result = generator.next();\n      let neighbor_coordinates = result.value;\n      update_distance;\n    } while (!result.done);\n  }\n\n  for (let i = 0; i < path.length; i++) {\n    yield path[i];\n  }\n}\n\nfunction update_distance(prev_value, node_location, adjacency_matrix) {\n  let row = node_location[0];\n  let column = node_location[1];\n  adjacency_matrix[row][column] = prev_value + 1;\n}\n\nfunction* check_neighbors(node_location, visited) {\n  let row = node_location[0];\n  let column = node_location[1];\n  const RIGHT = column + 1;\n  const LEFT = column - 1;\n  const UP = row - 1;\n  const DOWN = row + 1;\n\n  if (RIGHT >= 0 && !visited[row][RIGHT]) {\n    yield [row, RIGHT];\n  }\n\n  if (LEFT >= 0 && !visited[row][LEFT]) {\n    yield [row, LEFT];\n  }\n\n  if (UP >= 0 && !visited[UP][column]) {\n    yield [UP, column];\n  }\n\n  if (DOWN >= 0 && !visited[DOWN][column]) {\n    yield [DOWN, column];\n  }\n}\n\nfunction update_to_visited(node_location, visited) {\n  let row = node_location[0];\n  let col = node_location[1];\n  visited[row][col] = true;\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/dijkstra.js"],"names":["dijkstra","matrix","source","final","adjacency_matrix","coordinates","visited","path","row","length","col","Infinity","console","log","generator","check_neighbors","result","next","neighbor_coordinates","value","update_distance","done","i","prev_value","node_location","column","RIGHT","LEFT","UP","DOWN","update_to_visited"],"mappings":"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","sourcesContent":["// 1  function Dijkstra(Graph, source):\n// 2\n// 3      create vertex set Q\n// 4\n// 5      for each vertex v in Graph:             \n// 6          dist[v] ← INFINITY                  \n// 7          prev[v] ← UNDEFINED                 \n// 8          add v to Q                      \n// 10      dist[source] ← 0                        \n// 11      \n// 12      while Q is not empty:\n// 13          u ← vertex in Q with min dist[u]    \n// 14                                              \n// 15          remove u from Q \n// 16          \n// 17          for each neighbor v of u:           // only v that are still in Q\n// 18              alt ← dist[u] + length(u, v)\n// 19              if alt < dist[v]:               \n// 20                  dist[v] ← alt \n// 21                  prev[v] ← u \n// 22\n// 23      return dist[], prev[]\n\nexport default function* dijkstra(matrix = [[]], source = [0,0], final = matrix[3,3]) {\n    let adjacency_matrix = [...matrix]\n    let coordinates = [0, 0];\n    let visited = {};\n    let path = [[]];\n    // let distance = {}\n    // let vertex_priority_queue = new \n\n    // let unvisited_nodes = new Array(matrix.length * matrix.length)\n    // console.log(\"unvisited: \", unvisited_nodes);\n\n    for (let row = 0; row < matrix.length; row++) {\n        for (let col = 0; col < matrix[row].length; col++) {\n            if (source[0] === row && source[1] === col) {\n                adjacency_matrix[row][col] = 0;\n                coordinates = [row, col];\n                visited[row, col] = true;\n            }\n            else {\n                adjacency_matrix[row][col] = Infinity;\n                visited[row, col] = false;\n            }\n            console.log(\"visited: \", visited[row, col])\n        }\n    }\n\n\n\n    while (coordinates[0] !== final[0] && coordinates[1] !== final[1]) \n    {\n        coordinates = []\n        const generator = check_neighbors()\n        let result = null;\n        do\n        {\n            result = generator.next();\n            let neighbor_coordinates = result.value;\n            update_distance\n\n        }\n        while(!result.done)\n\n    }\n\n    for(let i = 0; i < path.length; i++)\n    {\n        yield path[i];\n    }\n\n\n}\n\nfunction update_distance(prev_value, node_location, adjacency_matrix) {\n    let row = node_location[0];\n    let column = node_location[1];\n    adjacency_matrix[row][column] = prev_value + 1;\n}\n\n\n\nfunction* check_neighbors(node_location, visited) {\n    let row = node_location[0];\n    let column = node_location[1];\n    const RIGHT = column + 1;\n    const LEFT = column - 1;\n    const UP = row - 1;\n    const DOWN = row + 1;\n\n    if (RIGHT >= 0 && !visited[row][RIGHT]) {\n        yield [row, RIGHT];\n    }\n    if (LEFT >= 0 && !visited[row][LEFT]) {\n        yield [row, LEFT];\n    }\n\n    if (UP >= 0 && !visited[UP][column]) {\n        yield [UP, column];\n    }\n    if (DOWN >= 0 && !visited[DOWN][column]) {\n        yield [DOWN, column];\n    }\n\n}\n\nfunction update_to_visited(node_location, visited)\n{\n    let row = node_location[0];\n    let col = node_location[1];\n    visited[row][col] = true;\n}"]},"metadata":{},"sourceType":"module"}