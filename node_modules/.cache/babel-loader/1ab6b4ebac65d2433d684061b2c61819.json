{"ast":null,"code":"import * as gridActions from \"../actions/types/grid-types\";\nconst INITIAL_STATE = [[{\n  type: \"start_node\",\n  visited: false,\n  shortest_path: false\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}], [{\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}], [{\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}], [{\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}, {\n  type: \"end_node\",\n  visited: false,\n  shortest_path: false\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: false\n}]];\nexport default function reducer(state = INITIAL_STATE, action) {\n  if (action.type === gridActions.CHANGED_NODE_TYPE) {\n    console.log(\"action payload: \", payload);\n    return action.payload;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/redux/reducers/grid-reducer.js"],"names":["gridActions","INITIAL_STATE","type","visited","shortest_path","reducer","state","action","CHANGED_NODE_TYPE","console","log","payload"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,6BAA7B;AAEA,MAAMC,aAAa,GACf,CACI,CAAC;AAAEC,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAAD,EAA+D;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA/D,EAA6H;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA7H,EAA2L;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA3L,CADJ,EAEI,CAAC;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAAD,EAA+D;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA/D,EAA6H;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA7H,EAA2L;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA3L,CAFJ,EAGI,CAAC;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAAD,EAA+D;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA/D,EAA6H;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA7H,EAA2L;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA3L,CAHJ,EAII,CAAC;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAAD,EAA+D;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA/D,EAA6H;AAAEF,EAAAA,IAAI,EAAE,UAAR;AAAoBC,EAAAA,OAAO,EAAE,KAA7B;AAAoCC,EAAAA,aAAa,EAAE;AAAnD,CAA7H,EAAyL;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAAzL,CAJJ,CADJ;AAQA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGL,aAAzB,EAAwCM,MAAxC,EAAgD;AAC3D,MAAIA,MAAM,CAACL,IAAP,KAAgBF,WAAW,CAACQ,iBAAhC,EACA;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCC,OAAhC;AACA,WAAQJ,MAAM,CAACI,OAAf;AACH;;AACD,SAAOL,KAAP;AACH","sourcesContent":["import * as gridActions from \"../actions/types/grid-types\"\n\nconst INITIAL_STATE =\n    [\n        [{ type: \"start_node\", visited: false, shortest_path: false }, { type: \"empty_node\", visited: false, shortest_path: false }, { type: \"empty_node\", visited: false, shortest_path: false }, { type: \"empty_node\", visited: false, shortest_path: false }],\n        [{ type: \"empty_node\", visited: false, shortest_path: false }, { type: \"empty_node\", visited: false, shortest_path: false }, { type: \"empty_node\", visited: false, shortest_path: false }, { type: \"empty_node\", visited: false, shortest_path: false }],\n        [{ type: \"empty_node\", visited: false, shortest_path: false }, { type: \"empty_node\", visited: false, shortest_path: false }, { type: \"empty_node\", visited: false, shortest_path: false }, { type: \"empty_node\", visited: false, shortest_path: false },],\n        [{ type: \"empty_node\", visited: false, shortest_path: false }, { type: \"empty_node\", visited: false, shortest_path: false }, { type: \"end_node\", visited: false, shortest_path: false }, { type: \"empty_node\", visited: false, shortest_path: false }]\n    ];\n\nexport default function reducer(state = INITIAL_STATE, action) {\n    if (action.type === gridActions.CHANGED_NODE_TYPE) \n    {\n        console.log(\"action payload: \", payload)\n        return  action.payload;\n    }\n    return state\n}"]},"metadata":{},"sourceType":"module"}