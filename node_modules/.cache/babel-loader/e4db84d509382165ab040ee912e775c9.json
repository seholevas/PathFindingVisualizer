{"ast":null,"code":"import shallowCopy from \"../../../helpers/2d-array-functions/shallow-copy\";\nimport { checkNeighbors } from \"./async-helpers/check-neighbors\";\nimport { updateParent } from \"./setters-and-getters/update-parent\";\nimport coordinatesAreEqual from \"./setters-and-getters/coordinates-are-equal\"; // import {PriorityQueue} from \"../../../data-structures/min-priority-queue\";\n\nexport default function* aStar(adjacency_matrix = [[]], start_coordinates = [0, 0], end_cordinates = [3, 3]) {\n  // let priority_queue = new PriorityQueue((a,b) => a[1] > b[1]);\n  let priority_queue = [];\n  let parent_matrix = shallowCopy(adjacency_matrix, null);\n  let visited = shallowCopy(adjacency_matrix, false);\n  let distance_matrix = shallowCopy(adjacency_matrix, Infinity);\n  adjacency_matrix[start_coordinates[0]][start_coordinates[1]] = 0; // + manhattanDistance(start_coordinates, end_cordinates);\n\n  priority_queue.push([manhattanDistance(start_coordinates, end_cordinates), [...start_coordinates]]);\n\n  while (priority_queue.length !== 0) {\n    let tuple = priority_queue.shift();\n    let f_cost = tuple[0];\n    let current_coordinates = tuple[1];\n    visited[current_coordinates[0]][current_coordinates[1]] = true;\n    yield [...current_coordinates];\n    const generator = checkNeighbors(vertex_coordinates, visited);\n    let result = generator.next();\n\n    while (!result.done) {\n      let value = result.value;\n      let visited = visited[value[0]][value[1]];\n\n      if (!visited) {} // if (visited[value[0]][value[1]] === false) {\n      //     yield value;\n      //     updatetoVisited(value, visited);\n      //     updateParent(vertex_coordinates, value, parent_matrix);\n      //     queue.push(value);\n      // }\n\n\n      result = generator.next();\n    }\n  }\n}\n\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n  return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1]);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/helpers/matrix-helpers/a-star.js"],"names":["shallowCopy","checkNeighbors","updateParent","coordinatesAreEqual","aStar","adjacency_matrix","start_coordinates","end_cordinates","priority_queue","parent_matrix","visited","distance_matrix","Infinity","push","manhattanDistance","length","tuple","shift","f_cost","current_coordinates","generator","vertex_coordinates","result","next","done","value","coordinates1","coordinates2","Math","abs"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,kDAAxB;AACA,SAASC,cAAT,QAA+B,iCAA/B;AACA,SAASC,YAAT,QAA6B,qCAA7B;AACA,OAAOC,mBAAP,MAAgC,6CAAhC,C,CACA;;AAEA,eAAe,UAAUC,KAAV,CAAgBC,gBAAgB,GAAG,CAAC,EAAD,CAAnC,EAAyCC,iBAAiB,GAAG,CAAC,CAAD,EAAI,CAAJ,CAA7D,EAAqEC,cAAc,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAtF,EAA8F;AACzG;AACA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,aAAa,GAAGT,WAAW,CAACK,gBAAD,EAAmB,IAAnB,CAA/B;AACA,MAAIK,OAAO,GAAGV,WAAW,CAACK,gBAAD,EAAmB,KAAnB,CAAzB;AACA,MAAIM,eAAe,GAAGX,WAAW,CAACK,gBAAD,EAAmBO,QAAnB,CAAjC;AAEAP,EAAAA,gBAAgB,CAACC,iBAAiB,CAAC,CAAD,CAAlB,CAAhB,CAAuCA,iBAAiB,CAAC,CAAD,CAAxD,IAA+D,CAA/D,CAPyG,CAQzG;;AACAE,EAAAA,cAAc,CAACK,IAAf,CAAoB,CAACC,iBAAiB,CAACR,iBAAD,EAAoBC,cAApB,CAAlB,EAAuD,CAAC,GAAGD,iBAAJ,CAAvD,CAApB;;AACA,SAAOE,cAAc,CAACO,MAAf,KAA0B,CAAjC,EAAoC;AAChC,QAAIC,KAAK,GAAGR,cAAc,CAACS,KAAf,EAAZ;AACA,QAAIC,MAAM,GAAGF,KAAK,CAAC,CAAD,CAAlB;AACA,QAAIG,mBAAmB,GAAGH,KAAK,CAAC,CAAD,CAA/B;AACAN,IAAAA,OAAO,CAACS,mBAAmB,CAAC,CAAD,CAApB,CAAP,CAAgCA,mBAAmB,CAAC,CAAD,CAAnD,IAA0D,IAA1D;AACA,UAAK,CAAC,GAAGA,mBAAJ,CAAL;AAGA,UAAMC,SAAS,GAAGnB,cAAc,CAACoB,kBAAD,EAAqBX,OAArB,CAAhC;AACA,QAAIY,MAAM,GAAGF,SAAS,CAACG,IAAV,EAAb;;AAEA,WAAO,CAACD,MAAM,CAACE,IAAf,EAAqB;AACjB,UAAIC,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACA,UAAIf,OAAO,GAAGA,OAAO,CAACe,KAAK,CAAC,CAAD,CAAN,CAAP,CAAkBA,KAAK,CAAC,CAAD,CAAvB,CAAd;;AAEA,UAAG,CAACf,OAAJ,EACA,CAEC,CAPgB,CAQjB;AACA;AACA;AACA;AACA;AACA;;;AACAY,MAAAA,MAAM,GAAGF,SAAS,CAACG,IAAV,EAAT;AACH;AACJ;AAKJ;;AAGD,SAAST,iBAAT,CAA2BY,YAAY,GAAG,EAA1C,EAA8CC,YAAY,GAAG,EAA7D,EAAiE;AAC7D,SAAOC,IAAI,CAACC,GAAL,CAASH,YAAY,CAAC,CAAD,CAAZ,GAAkBC,YAAY,CAAC,CAAD,CAAvC,IAA8CC,IAAI,CAACC,GAAL,CAASH,YAAY,CAAC,CAAD,CAAZ,GAAkBC,YAAY,CAAC,CAAD,CAAvC,CAArD;AACH","sourcesContent":["import shallowCopy from \"../../../helpers/2d-array-functions/shallow-copy\"\nimport { checkNeighbors } from \"./async-helpers/check-neighbors\";\nimport { updateParent } from \"./setters-and-getters/update-parent\";\nimport coordinatesAreEqual from \"./setters-and-getters/coordinates-are-equal\";\n// import {PriorityQueue} from \"../../../data-structures/min-priority-queue\";\n\nexport default function* aStar(adjacency_matrix = [[]], start_coordinates = [0, 0], end_cordinates = [3, 3]) {\n    // let priority_queue = new PriorityQueue((a,b) => a[1] > b[1]);\n    let priority_queue = [];\n    let parent_matrix = shallowCopy(adjacency_matrix, null);\n    let visited = shallowCopy(adjacency_matrix, false);\n    let distance_matrix = shallowCopy(adjacency_matrix, Infinity);\n\n    adjacency_matrix[start_coordinates[0]][start_coordinates[1]] = 0;\n    // + manhattanDistance(start_coordinates, end_cordinates);\n    priority_queue.push([manhattanDistance(start_coordinates, end_cordinates), [...start_coordinates]])\n    while (priority_queue.length !== 0) {\n        let tuple = priority_queue.shift();\n        let f_cost = tuple[0];\n        let current_coordinates = tuple[1];\n        visited[current_coordinates[0]][current_coordinates[1]] = true;\n        yield[...current_coordinates];\n\n\n        const generator = checkNeighbors(vertex_coordinates, visited);\n        let result = generator.next();\n\n        while (!result.done) {\n            let value = result.value\n            let visited = visited[value[0]][value[1]];\n\n            if(!visited)\n            {\n\n            }\n            // if (visited[value[0]][value[1]] === false) {\n            //     yield value;\n            //     updatetoVisited(value, visited);\n            //     updateParent(vertex_coordinates, value, parent_matrix);\n            //     queue.push(value);\n            // }\n            result = generator.next();\n        }\n    }\n\n\n\n\n}\n\n\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n    return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1]);\n}"]},"metadata":{},"sourceType":"module"}