{"ast":null,"code":"import shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\nimport { checkNeighbors } from \"./helpers/matrix-helpers/async-helpers/check-neighbors\";\nimport { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\nimport coordinatesAreEqual from \"./helpers/matrix-helpers/setters-and-getters/coordinates-are-equal\";\nimport { PriorityQueue } from \"../data-structures/priority-queue\";\nimport { updatetoVisited } from \"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";\nimport getShortestPath from \"./helpers/matrix-helpers/setters-and-getters/get-shortest-path\";\nexport default function* aStar(matrix = [[]], start = [0, 0], end = [3, 3], additional_destinations = {}, walls = {}, weights = {}) {\n  let start_coordinates = [...start];\n  let end_coordinates = [...end];\n  var priority_queue = new PriorityQueue();\n  let additional_dest = Object.assign({}, additional_destinations);\n  let visited_coordinates = [];\n  let path = [];\n  let parent_matrix = shallowCopy(matrix, null);\n  let visited = shallowCopy(matrix, false);\n  let distance_matrix = shallowCopy(matrix, Infinity);\n  distance_matrix[start_coordinates[0]][start_coordinates[1]] = 0;\n  priority_queue.enqueue([...start_coordinates], manhattanDistance(start_coordinates, end_coordinates));\n\n  while (!priority_queue.isEmpty()) {\n    let q_item = priority_queue.dequeue(); // let f_cost = tuple[0];\n\n    let current_coordinates = q_item.element;\n    updatetoVisited(current_coordinates, visited);\n    visited_coordinates.push(current_coordinates);\n\n    if (additional_dest[current_coordinates] !== undefined) {\n      delete additional_dest[current_coordinates];\n      let new_path = breadthFirstSearch(matrix, current_coordinates, end_coordinates, additional_dest, walls);\n      let add_to_visited_nodes = new_path.next().value;\n      let add_to_path = new_path.next().value;\n      visited_coordinates = visited_coordinates.concat(add_to_visited_nodes);\n      console.log(\"in additional[dest] - path pre-concat: \", path); // if no path to finish line\n\n      if (add_to_path === undefined) break;\n      path = path.concat(add_to_path);\n      console.log(\"in additional[dest] - path post-concat: \", path);\n      end_coordinates = current_coordinates;\n      found = true;\n    }\n\n    if (current_coordinates[0] === end_coordinates[0] && current_coordinates[1] === end_coordinates[1] && Object.keys(additional_dest).length === 0) {\n      found = true;\n    } // yield [...current_coordinates];\n\n\n    if (coordinatesAreEqual(current_coordinates, end_coordinates)) {\n      break;\n    }\n\n    const generator = checkNeighbors(current_coordinates, visited);\n    let result = generator.next();\n\n    while (!result.done) {\n      let neighbor_coordinates = result.value;\n      let have_visited = visited[neighbor_coordinates[0]][neighbor_coordinates[1]]; // EDIT: needs to change once weight and walls are added in.\n\n      let cost_from_current_node = distance_matrix[current_coordinates[0]][current_coordinates[1]] + 1;\n      let f_cost = cost_from_current_node + manhattanDistance(neighbor_coordinates, end_coordinates);\n      let is_current_cost_less = distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] > cost_from_current_node;\n      let is_neighbor_in_priority_queue = priority_queue.items.includes([f_cost, neighbor_coordinates]);\n\n      if (!have_visited && is_neighbor_in_priority_queue && is_current_cost_less) {\n        const index = priority_queue.items.indexOf([f_cost, neighbor_coordinates]);\n        priority_queue.items.splice(index);\n      }\n\n      if (!have_visited && is_current_cost_less && !is_neighbor_in_priority_queue) {\n        // update the distance of the neighbor_node\n        distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] = cost_from_current_node; // update the parent node of the neighbor node to the current node\n\n        updateParent(current_coordinates, neighbor_coordinates, parent_matrix);\n        priority_queue.enqueue(neighbor_coordinates, manhattanDistance(neighbor_coordinates, end_coordinates));\n      }\n\n      result = generator.next();\n    }\n  }\n\n  yield visited_coordinates;\n  yield getShortestPath(end_coordinates, parent_matrix); // yield* traverseShortestPath(end_coordinates,parent_matrix);\n}\n\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n  return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1]);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/a-star.js"],"names":["shallowCopy","checkNeighbors","updateParent","coordinatesAreEqual","PriorityQueue","updatetoVisited","getShortestPath","aStar","matrix","start","end","additional_destinations","walls","weights","start_coordinates","end_coordinates","priority_queue","additional_dest","Object","assign","visited_coordinates","path","parent_matrix","visited","distance_matrix","Infinity","enqueue","manhattanDistance","isEmpty","q_item","dequeue","current_coordinates","element","push","undefined","new_path","breadthFirstSearch","add_to_visited_nodes","next","value","add_to_path","concat","console","log","found","keys","length","generator","result","done","neighbor_coordinates","have_visited","cost_from_current_node","f_cost","is_current_cost_less","is_neighbor_in_priority_queue","items","includes","index","indexOf","splice","coordinates1","coordinates2","Math","abs"],"mappings":"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","sourcesContent":["import shallowCopy from \"../helpers/2d-array-functions/shallow-copy\"\nimport { checkNeighbors } from \"./helpers/matrix-helpers/async-helpers/check-neighbors\";\nimport { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\nimport coordinatesAreEqual from \"./helpers/matrix-helpers/setters-and-getters/coordinates-are-equal\";\nimport {PriorityQueue} from \"../data-structures/priority-queue\"\nimport { updatetoVisited } from \"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";\nimport getShortestPath from \"./helpers/matrix-helpers/setters-and-getters/get-shortest-path\";\n\nexport default function* aStar(matrix = [[]], start = [0, 0], end = [3, 3], additional_destinations ={}, walls={}, weights={}) {\n    let start_coordinates =[...start]\n    let end_coordinates = [...end]\n    var priority_queue = new PriorityQueue();\n    let additional_dest = Object.assign({}, additional_destinations);\n    let visited_coordinates = [];\n    let path = [];\n    let parent_matrix = shallowCopy(matrix, null);\n    let visited = shallowCopy(matrix, false);\n    let distance_matrix = shallowCopy(matrix, Infinity);\n\n\n    distance_matrix[start_coordinates[0]][start_coordinates[1]] = 0;\n\n    priority_queue.enqueue([...start_coordinates], manhattanDistance(start_coordinates, end_coordinates));\n    while (!priority_queue.isEmpty()) {\n        let q_item = priority_queue.dequeue();\n        // let f_cost = tuple[0];\n        let current_coordinates = q_item.element;\n        updatetoVisited(current_coordinates,visited);\n        visited_coordinates.push(current_coordinates);\n\n        if (additional_dest[current_coordinates] !== undefined) {\n            delete additional_dest[current_coordinates];\n            let new_path = breadthFirstSearch(matrix, current_coordinates, end_coordinates, additional_dest, walls)\n            let add_to_visited_nodes = new_path.next().value\n            let add_to_path = new_path.next().value\n            visited_coordinates = visited_coordinates.concat(add_to_visited_nodes);\n            console.log(\"in additional[dest] - path pre-concat: \", path)\n            // if no path to finish line\n            if (add_to_path === undefined)\n                break;\n            path = path.concat(add_to_path);\n            console.log(\"in additional[dest] - path post-concat: \", path)\n\n\n            end_coordinates = current_coordinates;\n            found = true;\n\n        }\n        if (((current_coordinates[0] === end_coordinates[0]) && (current_coordinates[1] === end_coordinates[1])) && Object.keys(additional_dest).length === 0) {\n            found = true;\n        }\n        // yield [...current_coordinates];\n\n        if(coordinatesAreEqual(current_coordinates,end_coordinates))\n        {\n            break;\n        }\n\n        const generator = checkNeighbors(current_coordinates, visited);\n        let result = generator.next();\n\n        while (!result.done) {\n            let neighbor_coordinates = result.value\n            let have_visited = visited[neighbor_coordinates[0]][neighbor_coordinates[1]];\n            // EDIT: needs to change once weight and walls are added in.\n            let cost_from_current_node = distance_matrix[current_coordinates[0]][current_coordinates[1]] + 1;\n\n            let f_cost = cost_from_current_node + manhattanDistance(neighbor_coordinates, end_coordinates)\n\n            let is_current_cost_less = distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] > cost_from_current_node\n            let is_neighbor_in_priority_queue = priority_queue.items.includes([f_cost, neighbor_coordinates]);\n\n            if (!have_visited && is_neighbor_in_priority_queue && is_current_cost_less) {\n                const index = priority_queue.items.indexOf([f_cost, neighbor_coordinates]);\n                priority_queue.items.splice(index);\n\n            }\n            if (!have_visited && is_current_cost_less && !is_neighbor_in_priority_queue) {\n                // update the distance of the neighbor_node\n                distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] = cost_from_current_node;\n                // update the parent node of the neighbor node to the current node\n                updateParent(current_coordinates, neighbor_coordinates, parent_matrix);\n                priority_queue.enqueue(neighbor_coordinates, manhattanDistance(neighbor_coordinates, end_coordinates))\n            }\n            \n            result = generator.next();\n        }\n    }\n    yield visited_coordinates;\n    yield getShortestPath(end_coordinates, parent_matrix);\n    // yield* traverseShortestPath(end_coordinates,parent_matrix);\n\n\n\n\n}\n\n\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n    return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1]);\n}"]},"metadata":{},"sourceType":"module"}