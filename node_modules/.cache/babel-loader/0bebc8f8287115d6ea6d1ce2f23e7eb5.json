{"ast":null,"code":"import { getValueByElementId } from \"../helpers/functions/get-value-by-element-id\";\n\nfunction getAlgorithm(array = [], type = \"mergesort\") {\n  if (type === \"a*\") {\n    return Merge(array);\n  } else if (type === \"bfs\") {\n    return BubbleSort(array);\n  } else if (type === \"dfs\") {\n    return SelectionSort(array);\n  } else if (type === \"dijkstra\") {\n    return Dijikstra(array);\n  } // else if (type === \"insertionsort\") {\n  //     return InsertionSort(array);\n  // }\n  // else if (type === \"quicksort\") {\n  //     return QuickSort(array, 0, array.length - 1);\n  // }\n  // else if (type === \"cocktailsort\") {\n  // }\n\n}\n\nexport default function startPathFinding() {\n  const array = store.getState().grid;\n  const playing = store.getState().settings;\n  const pathFindingType = getValueByElementId(\"algorithms\");\n  const generator = get;\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/pathfind.js"],"names":["getValueByElementId","getAlgorithm","array","type","Merge","BubbleSort","SelectionSort","Dijikstra","startPathFinding","store","getState","grid","playing","settings","pathFindingType","generator","get"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,8CAApC;;AAEA,SAASC,YAAT,CAAsBC,KAAK,GAAG,EAA9B,EAAkCC,IAAI,GAAG,WAAzC,EAAsD;AAClD,MAAIA,IAAI,KAAK,IAAb,EAAmB;AACf,WAAOC,KAAK,CAACF,KAAD,CAAZ;AACH,GAFD,MAGK,IAAIC,IAAI,KAAK,KAAb,EAAoB;AACrB,WAAOE,UAAU,CAACH,KAAD,CAAjB;AACH,GAFI,MAGA,IAAIC,IAAI,KAAK,KAAb,EAAoB;AACrB,WAAOG,aAAa,CAACJ,KAAD,CAApB;AACH,GAFI,MAGA,IAAIC,IAAI,KAAK,UAAb,EAAyB;AAC1B,WAAOI,SAAS,CAACL,KAAD,CAAhB;AACH,GAZiD,CAalD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACH;;AAED,eAAe,SAASM,gBAAT,GAA4B;AACvC,QAAMN,KAAK,GAAGO,KAAK,CAACC,QAAN,GAAiBC,IAA/B;AACA,QAAMC,OAAO,GAAGH,KAAK,CAACC,QAAN,GAAiBG,QAAjC;AAEA,QAAMC,eAAe,GAAGd,mBAAmB,CAAC,YAAD,CAA3C;AACA,QAAMe,SAAS,GAAGC,GAAlB;AACH","sourcesContent":["import { getValueByElementId } from \"../helpers/functions/get-value-by-element-id\";\n\nfunction getAlgorithm(array = [], type = \"mergesort\") {\n    if (type === \"a*\") {\n        return Merge(array);\n    }\n    else if (type === \"bfs\") {\n        return BubbleSort(array);\n    }\n    else if (type === \"dfs\") {\n        return SelectionSort(array);\n    }\n    else if (type === \"dijkstra\") {\n        return Dijikstra(array)\n    }\n    // else if (type === \"insertionsort\") {\n    //     return InsertionSort(array);\n    // }\n    // else if (type === \"quicksort\") {\n    //     return QuickSort(array, 0, array.length - 1);\n    // }\n    // else if (type === \"cocktailsort\") {\n\n    // }\n}\n\nexport default function startPathFinding() {\n    const array = store.getState().grid;\n    const playing = store.getState().settings;\n\n    const pathFindingType = getValueByElementId(\"algorithms\");\n    const generator = get\n}"]},"metadata":{},"sourceType":"module"}