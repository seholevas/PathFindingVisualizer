{"ast":null,"code":"import shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\nimport { checkNeighbors } from \"./helpers/matrix-helpers/async-helpers/check-neighbors\";\nimport { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\nimport coordinatesAreEqual from \"./helpers/matrix-helpers/setters-and-getters/coordinates-are-equal\";\nimport { PriorityQueue } from \"../data-structures/priority-queue\";\nimport { updatetoVisited } from \"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";\nimport getShortestPath from \"./helpers/matrix-helpers/setters-and-getters/get-shortest-path\";\nexport default function* aStar(adjacency_matrix = [[]], start_coordinates = [0, 0], end_cordinates = [3, 3], additional_destinations = {}, walls = {}, weights = {}) {\n  var priority_queue = new PriorityQueue();\n  let visited_coordinates = [];\n  let parent_matrix = shallowCopy(adjacency_matrix, null);\n  let visited = shallowCopy(adjacency_matrix, false);\n  let distance_matrix = shallowCopy(adjacency_matrix, Infinity);\n  distance_matrix[start_coordinates[0]][start_coordinates[1]] = 0;\n  priority_queue.enqueue([...start_coordinates], manhattanDistance(start_coordinates, end_cordinates));\n\n  while (!priority_queue.isEmpty()) {\n    let q_item = priority_queue.dequeue(); // let f_cost = tuple[0];\n\n    let current_coordinates = q_item.element;\n    updatetoVisited(current_coordinates, visited);\n    visited_coordinates.push(current_coordinates); // yield [...current_coordinates];\n\n    if (coordinatesAreEqual(current_coordinates, end_cordinates)) {\n      break;\n    }\n\n    const generator = checkNeighbors(current_coordinates, visited);\n    let result = generator.next();\n\n    while (!result.done) {\n      let neighbor_coordinates = result.value;\n      let have_visited = visited[neighbor_coordinates[0]][neighbor_coordinates[1]]; // EDIT: needs to change once weight and walls are added in.\n\n      let cost_from_current_node = distance_matrix[current_coordinates[0]][current_coordinates[1]] + 1;\n      let f_cost = cost_from_current_node + manhattanDistance(neighbor_coordinates, end_cordinates);\n      let is_current_cost_less = distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] > cost_from_current_node;\n      let is_neighbor_in_priority_queue = priority_queue.items.includes([f_cost, neighbor_coordinates]);\n\n      if (!have_visited && is_neighbor_in_priority_queue && is_current_cost_less) {\n        const index = priority_queue.items.indexOf([f_cost, neighbor_coordinates]);\n        priority_queue.items.splice(index);\n      }\n\n      if (!have_visited && is_current_cost_less && !is_neighbor_in_priority_queue) {\n        // update the distance of the neighbor_node\n        distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] = cost_from_current_node; // update the parent node of the neighbor node to the current node\n\n        updateParent(current_coordinates, neighbor_coordinates, parent_matrix);\n        priority_queue.enqueue(neighbor_coordinates, manhattanDistance(neighbor_coordinates, end_cordinates));\n      }\n\n      result = generator.next();\n    }\n  }\n\n  yield visited_coordinates;\n  yield getShortestPath(end_cordinates, parent_matrix); // yield* traverseShortestPath(end_cordinates,parent_matrix);\n}\n\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n  return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1]);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/a-star.js"],"names":["shallowCopy","checkNeighbors","updateParent","coordinatesAreEqual","PriorityQueue","updatetoVisited","getShortestPath","aStar","adjacency_matrix","start_coordinates","end_cordinates","additional_destinations","walls","weights","priority_queue","visited_coordinates","parent_matrix","visited","distance_matrix","Infinity","enqueue","manhattanDistance","isEmpty","q_item","dequeue","current_coordinates","element","push","generator","result","next","done","neighbor_coordinates","value","have_visited","cost_from_current_node","f_cost","is_current_cost_less","is_neighbor_in_priority_queue","items","includes","index","indexOf","splice","coordinates1","coordinates2","Math","abs"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,4CAAxB;AACA,SAASC,cAAT,QAA+B,wDAA/B;AACA,SAASC,YAAT,QAA6B,4DAA7B;AACA,OAAOC,mBAAP,MAAgC,oEAAhC;AACA,SAAQC,aAAR,QAA4B,mCAA5B;AACA,SAASC,eAAT,QAAgC,gEAAhC;AACA,OAAOC,eAAP,MAA4B,gEAA5B;AAEA,eAAe,UAAUC,KAAV,CAAgBC,gBAAgB,GAAG,CAAC,EAAD,CAAnC,EAAyCC,iBAAiB,GAAG,CAAC,CAAD,EAAI,CAAJ,CAA7D,EAAqEC,cAAc,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAtF,EAA8FC,uBAAuB,GAAE,EAAvH,EAA2HC,KAAK,GAAC,EAAjI,EAAqIC,OAAO,GAAC,EAA7I,EAAiJ;AAE5J,MAAIC,cAAc,GAAG,IAAIV,aAAJ,EAArB;AACA,MAAIW,mBAAmB,GAAG,EAA1B;AACA,MAAIC,aAAa,GAAGhB,WAAW,CAACQ,gBAAD,EAAmB,IAAnB,CAA/B;AACA,MAAIS,OAAO,GAAGjB,WAAW,CAACQ,gBAAD,EAAmB,KAAnB,CAAzB;AACA,MAAIU,eAAe,GAAGlB,WAAW,CAACQ,gBAAD,EAAmBW,QAAnB,CAAjC;AAEAD,EAAAA,eAAe,CAACT,iBAAiB,CAAC,CAAD,CAAlB,CAAf,CAAsCA,iBAAiB,CAAC,CAAD,CAAvD,IAA8D,CAA9D;AAEAK,EAAAA,cAAc,CAACM,OAAf,CAAuB,CAAC,GAAGX,iBAAJ,CAAvB,EAA+CY,iBAAiB,CAACZ,iBAAD,EAAoBC,cAApB,CAAhE;;AACA,SAAO,CAACI,cAAc,CAACQ,OAAf,EAAR,EAAkC;AAC9B,QAAIC,MAAM,GAAGT,cAAc,CAACU,OAAf,EAAb,CAD8B,CAE9B;;AACA,QAAIC,mBAAmB,GAAGF,MAAM,CAACG,OAAjC;AACArB,IAAAA,eAAe,CAACoB,mBAAD,EAAqBR,OAArB,CAAf;AACAF,IAAAA,mBAAmB,CAACY,IAApB,CAAyBF,mBAAzB,EAL8B,CAM9B;;AAEA,QAAGtB,mBAAmB,CAACsB,mBAAD,EAAqBf,cAArB,CAAtB,EACA;AACI;AACH;;AAED,UAAMkB,SAAS,GAAG3B,cAAc,CAACwB,mBAAD,EAAsBR,OAAtB,CAAhC;AACA,QAAIY,MAAM,GAAGD,SAAS,CAACE,IAAV,EAAb;;AAEA,WAAO,CAACD,MAAM,CAACE,IAAf,EAAqB;AACjB,UAAIC,oBAAoB,GAAGH,MAAM,CAACI,KAAlC;AACA,UAAIC,YAAY,GAAGjB,OAAO,CAACe,oBAAoB,CAAC,CAAD,CAArB,CAAP,CAAiCA,oBAAoB,CAAC,CAAD,CAArD,CAAnB,CAFiB,CAGjB;;AACA,UAAIG,sBAAsB,GAAGjB,eAAe,CAACO,mBAAmB,CAAC,CAAD,CAApB,CAAf,CAAwCA,mBAAmB,CAAC,CAAD,CAA3D,IAAkE,CAA/F;AAEA,UAAIW,MAAM,GAAGD,sBAAsB,GAAGd,iBAAiB,CAACW,oBAAD,EAAuBtB,cAAvB,CAAvD;AAEA,UAAI2B,oBAAoB,GAAGnB,eAAe,CAACc,oBAAoB,CAAC,CAAD,CAArB,CAAf,CAAyCA,oBAAoB,CAAC,CAAD,CAA7D,IAAoEG,sBAA/F;AACA,UAAIG,6BAA6B,GAAGxB,cAAc,CAACyB,KAAf,CAAqBC,QAArB,CAA8B,CAACJ,MAAD,EAASJ,oBAAT,CAA9B,CAApC;;AAEA,UAAI,CAACE,YAAD,IAAiBI,6BAAjB,IAAkDD,oBAAtD,EAA4E;AACxE,cAAMI,KAAK,GAAG3B,cAAc,CAACyB,KAAf,CAAqBG,OAArB,CAA6B,CAACN,MAAD,EAASJ,oBAAT,CAA7B,CAAd;AACAlB,QAAAA,cAAc,CAACyB,KAAf,CAAqBI,MAArB,CAA4BF,KAA5B;AAEH;;AACD,UAAI,CAACP,YAAD,IAAiBG,oBAAjB,IAAyC,CAACC,6BAA9C,EAA6E;AACzE;AACApB,QAAAA,eAAe,CAACc,oBAAoB,CAAC,CAAD,CAArB,CAAf,CAAyCA,oBAAoB,CAAC,CAAD,CAA7D,IAAoEG,sBAApE,CAFyE,CAGzE;;AACAjC,QAAAA,YAAY,CAACuB,mBAAD,EAAsBO,oBAAtB,EAA4ChB,aAA5C,CAAZ;AACAF,QAAAA,cAAc,CAACM,OAAf,CAAuBY,oBAAvB,EAA6CX,iBAAiB,CAACW,oBAAD,EAAuBtB,cAAvB,CAA9D;AACH;;AAEDmB,MAAAA,MAAM,GAAGD,SAAS,CAACE,IAAV,EAAT;AACH;AACJ;;AACD,QAAMf,mBAAN;AACA,QAAMT,eAAe,CAACI,cAAD,EAAiBM,aAAjB,CAArB,CAvD4J,CAwD5J;AAKH;;AAGD,SAASK,iBAAT,CAA2BuB,YAAY,GAAG,EAA1C,EAA8CC,YAAY,GAAG,EAA7D,EAAiE;AAC7D,SAAOC,IAAI,CAACC,GAAL,CAASH,YAAY,CAAC,CAAD,CAAZ,GAAkBC,YAAY,CAAC,CAAD,CAAvC,IAA8CC,IAAI,CAACC,GAAL,CAASH,YAAY,CAAC,CAAD,CAAZ,GAAkBC,YAAY,CAAC,CAAD,CAAvC,CAArD;AACH","sourcesContent":["import shallowCopy from \"../helpers/2d-array-functions/shallow-copy\"\nimport { checkNeighbors } from \"./helpers/matrix-helpers/async-helpers/check-neighbors\";\nimport { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\nimport coordinatesAreEqual from \"./helpers/matrix-helpers/setters-and-getters/coordinates-are-equal\";\nimport {PriorityQueue} from \"../data-structures/priority-queue\"\nimport { updatetoVisited } from \"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";\nimport getShortestPath from \"./helpers/matrix-helpers/setters-and-getters/get-shortest-path\";\n\nexport default function* aStar(adjacency_matrix = [[]], start_coordinates = [0, 0], end_cordinates = [3, 3], additional_destinations ={}, walls={}, weights={}) {\n    \n    var priority_queue = new PriorityQueue();\n    let visited_coordinates = [];\n    let parent_matrix = shallowCopy(adjacency_matrix, null);\n    let visited = shallowCopy(adjacency_matrix, false);\n    let distance_matrix = shallowCopy(adjacency_matrix, Infinity);\n\n    distance_matrix[start_coordinates[0]][start_coordinates[1]] = 0;\n\n    priority_queue.enqueue([...start_coordinates], manhattanDistance(start_coordinates, end_cordinates));\n    while (!priority_queue.isEmpty()) {\n        let q_item = priority_queue.dequeue();\n        // let f_cost = tuple[0];\n        let current_coordinates = q_item.element;\n        updatetoVisited(current_coordinates,visited);\n        visited_coordinates.push(current_coordinates);\n        // yield [...current_coordinates];\n\n        if(coordinatesAreEqual(current_coordinates,end_cordinates))\n        {\n            break;\n        }\n\n        const generator = checkNeighbors(current_coordinates, visited);\n        let result = generator.next();\n\n        while (!result.done) {\n            let neighbor_coordinates = result.value\n            let have_visited = visited[neighbor_coordinates[0]][neighbor_coordinates[1]];\n            // EDIT: needs to change once weight and walls are added in.\n            let cost_from_current_node = distance_matrix[current_coordinates[0]][current_coordinates[1]] + 1;\n\n            let f_cost = cost_from_current_node + manhattanDistance(neighbor_coordinates, end_cordinates)\n\n            let is_current_cost_less = distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] > cost_from_current_node\n            let is_neighbor_in_priority_queue = priority_queue.items.includes([f_cost, neighbor_coordinates]);\n\n            if (!have_visited && is_neighbor_in_priority_queue && is_current_cost_less) {\n                const index = priority_queue.items.indexOf([f_cost, neighbor_coordinates]);\n                priority_queue.items.splice(index);\n\n            }\n            if (!have_visited && is_current_cost_less && !is_neighbor_in_priority_queue) {\n                // update the distance of the neighbor_node\n                distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] = cost_from_current_node;\n                // update the parent node of the neighbor node to the current node\n                updateParent(current_coordinates, neighbor_coordinates, parent_matrix);\n                priority_queue.enqueue(neighbor_coordinates, manhattanDistance(neighbor_coordinates, end_cordinates))\n            }\n            \n            result = generator.next();\n        }\n    }\n    yield visited_coordinates;\n    yield getShortestPath(end_cordinates, parent_matrix);\n    // yield* traverseShortestPath(end_cordinates,parent_matrix);\n\n\n\n\n}\n\n\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n    return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1]);\n}"]},"metadata":{},"sourceType":"module"}