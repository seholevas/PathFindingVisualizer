{"ast":null,"code":"import store from \"../../redux/stores/store\";\nimport { dispatchedChangedNodeType } from \"../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\nlet node = null;\nlet prev_coordinates = null;\nlet temp_node = null;\n\nfunction _getIdCoordinates(id = \"\") {\n  let str_coordinates = id.split(\"-\");\n  let row = parseInt(str_coordinates[0]);\n  let column = parseInt(str_coordinates[1]);\n  return [row, column];\n}\n\nfunction _updatePrevCoordinates(id = \"\") {\n  prev_coordinates = _getIdCoordinates(id);\n}\n\nfunction _updatePressedNodeCoordinates(id) {\n  const coordinates = _getIdCoordinates(id);\n\n  const grid = store.getState().grid;\n  node = grid[coordinates[0]][coordinates[1]];\n}\n\nexport function grabItem(id) {\n  _updatePrevCoordinates(id);\n\n  _updatePressedNodeCoordinates(id);\n}\nexport function holdingItem(id) {\n  if (node !== null) {\n    const coordinates = _getIdCoordinates(id);\n\n    let grid = null;\n\n    if (node !== null) {\n      grid = store.getState().grid;\n      temp_node = grid[coordinates[0]][coordinates[1]];\n    }\n\n    if (node != null && (temp_node[\"type\"] !== \"start_node\" || temp_node[\"type\"] !== \"end_node\" || temp_node[\"additional_destination_node\"])) {\n      grid[coordinates[0]][coordinates[1]] = node;\n      const copy = shallowCopy(grid);\n      dispatchedChangedNodeType(copy);\n    }\n  }\n\n  node = null; // _updatePrevCoordinates(id);\n}\nexport function releaseItem(id) {\n  console.log(\"id: \", id); // let str_coordinates = id.split(\"-\");\n  // let row = parseInt(str_coordinates[0]);\n  // let column = parseInt(str_coordinates[1]);\n  // let grid = store.getState().grid\n  // // || node['type'] === \"end_node\"\n  // if (node['type'] === \"start_node\") {\n  //     // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n  //     grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n  //     grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n  // }\n  // console.log(\"released at: \", id);\n  // console.log(\"node released: \", node);\n  // const copy = shallowCopy(grid);\n  // dispatchedChangedNodeType(copy);\n} // export function grabItem(id) {\n//     let str_coordinates = id.split(\"-\");\n//     console.log(\"grabbed at: \", str_coordinates)\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     prev_coordinates = [row, column];\n//     let grid = store.getState().grid\n//     node = grid[row][column];\n// }\n// export function holdingItem(id)\n// {\n//     let str_coordinates = id.split(\"-\");\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     let grid = store.getState().grid\n//     // || node['type'] === \"end_node\"\n//     if (node['type'] === \"start_node\") {\n//         // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n//         grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n//         grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n//     }\n//     console.log(\"released at: \", id);\n//     console.log(\"node released: \", node);\n//     const copy = shallowCopy(grid);\n//     dispatchedChangedNodeType(copy); \n// }\n// export function releaseItem(id) {\n//     let str_coordinates = id.split(\"-\");\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     let grid = store.getState().grid\n//     // || node['type'] === \"end_node\"\n//     if (node['type'] === \"start_node\") {\n//         // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n//         grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n//         grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n//     }\n//     console.log(\"released at: \", id);\n//     console.log(\"node released: \", node);\n//     const copy = shallowCopy(grid);\n//     dispatchedChangedNodeType(copy);\n// }","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/action-listeners/on-mouse.js"],"names":["store","dispatchedChangedNodeType","shallowCopy","node","prev_coordinates","temp_node","_getIdCoordinates","id","str_coordinates","split","row","parseInt","column","_updatePrevCoordinates","_updatePressedNodeCoordinates","coordinates","grid","getState","grabItem","holdingItem","copy","releaseItem","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,0BAAlB;AACA,SAASC,yBAAT,QAA0C,sCAA1C;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AAEA,IAAIC,IAAI,GAAG,IAAX;AACA,IAAIC,gBAAgB,GAAG,IAAvB;AACA,IAAIC,SAAS,GAAG,IAAhB;;AAGA,SAASC,iBAAT,CAA2BC,EAAE,GAAG,EAAhC,EAAoC;AAChC,MAAIC,eAAe,GAAGD,EAAE,CAACE,KAAH,CAAS,GAAT,CAAtB;AACA,MAAIC,GAAG,GAAGC,QAAQ,CAACH,eAAe,CAAC,CAAD,CAAhB,CAAlB;AACA,MAAII,MAAM,GAAGD,QAAQ,CAACH,eAAe,CAAC,CAAD,CAAhB,CAArB;AACA,SAAO,CAACE,GAAD,EAAME,MAAN,CAAP;AACH;;AACD,SAASC,sBAAT,CAAgCN,EAAE,GAAG,EAArC,EAAyC;AACrCH,EAAAA,gBAAgB,GAAGE,iBAAiB,CAACC,EAAD,CAApC;AACH;;AAED,SAASO,6BAAT,CAAuCP,EAAvC,EAA2C;AACvC,QAAMQ,WAAW,GAAGT,iBAAiB,CAACC,EAAD,CAArC;;AACA,QAAMS,IAAI,GAAGhB,KAAK,CAACiB,QAAN,GAAiBD,IAA9B;AACAb,EAAAA,IAAI,GAAGa,IAAI,CAACD,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAP;AACH;;AAED,OAAO,SAASG,QAAT,CAAkBX,EAAlB,EAAsB;AACzBM,EAAAA,sBAAsB,CAACN,EAAD,CAAtB;;AACAO,EAAAA,6BAA6B,CAACP,EAAD,CAA7B;AACH;AAED,OAAO,SAASY,WAAT,CAAqBZ,EAArB,EAAyB;AAC5B,MAAGJ,IAAI,KAAI,IAAX,EACA;AACI,UAAMY,WAAW,GAAGT,iBAAiB,CAACC,EAAD,CAArC;;AACA,QAAIS,IAAI,GAAG,IAAX;;AACA,QAAIb,IAAI,KAAK,IAAb,EAAmB;AACfa,MAAAA,IAAI,GAAGhB,KAAK,CAACiB,QAAN,GAAiBD,IAAxB;AACAX,MAAAA,SAAS,GAAGW,IAAI,CAACD,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAZ;AACH;;AAED,QAAIZ,IAAI,IAAI,IAAR,KAAiBE,SAAS,CAAC,MAAD,CAAT,KAAsB,YAAtB,IAAsCA,SAAS,CAAC,MAAD,CAAT,KAAsB,UAA5D,IAA0EA,SAAS,CAAC,6BAAD,CAApG,CAAJ,EAA0I;AACtIW,MAAAA,IAAI,CAACD,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,IAAuCZ,IAAvC;AACA,YAAMiB,IAAI,GAAGlB,WAAW,CAACc,IAAD,CAAxB;AACAf,MAAAA,yBAAyB,CAACmB,IAAD,CAAzB;AACH;AACJ;;AACDjB,EAAAA,IAAI,GAAG,IAAP,CAhB4B,CAmB5B;AACH;AAED,OAAO,SAASkB,WAAT,CAAqBd,EAArB,EAAyB;AAE5Be,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBhB,EAApB,EAF4B,CAG5B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,C,CASD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import store from \"../../redux/stores/store\";\nimport { dispatchedChangedNodeType } from \"../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\n\nlet node = null\nlet prev_coordinates = null;\nlet temp_node = null;\n\n\nfunction _getIdCoordinates(id = \"\") {\n    let str_coordinates = id.split(\"-\");\n    let row = parseInt(str_coordinates[0]);\n    let column = parseInt(str_coordinates[1]);\n    return [row, column];\n}\nfunction _updatePrevCoordinates(id = \"\") {\n    prev_coordinates = _getIdCoordinates(id);\n}\n\nfunction _updatePressedNodeCoordinates(id) {\n    const coordinates = _getIdCoordinates(id);\n    const grid = store.getState().grid\n    node = grid[coordinates[0]][coordinates[1]];\n}\n\nexport function grabItem(id) {\n    _updatePrevCoordinates(id);\n    _updatePressedNodeCoordinates(id);\n}\n\nexport function holdingItem(id) {\n    if(node !==null)\n    {\n        const coordinates = _getIdCoordinates(id);\n        let grid = null;\n        if (node !== null) {\n            grid = store.getState().grid;\n            temp_node = grid[coordinates[0]][coordinates[1]];\n        }\n    \n        if (node != null && (temp_node[\"type\"] !== \"start_node\" || temp_node[\"type\"] !== \"end_node\" || temp_node[\"additional_destination_node\"])) {\n            grid[coordinates[0]][coordinates[1]] = node;\n            const copy = shallowCopy(grid);\n            dispatchedChangedNodeType(copy);\n        }\n    }\n    node = null;\n   \n\n    // _updatePrevCoordinates(id);\n}\n\nexport function releaseItem(id) {\n\n    console.log(\"id: \", id);\n    // let str_coordinates = id.split(\"-\");\n    // let row = parseInt(str_coordinates[0]);\n    // let column = parseInt(str_coordinates[1]);\n    // let grid = store.getState().grid\n\n    // // || node['type'] === \"end_node\"\n    // if (node['type'] === \"start_node\") {\n    //     // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n    //     grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n    //     grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n    // }\n    // console.log(\"released at: \", id);\n    // console.log(\"node released: \", node);\n    // const copy = shallowCopy(grid);\n    // dispatchedChangedNodeType(copy);\n}\n\n\n\n\n\n\n\n\n// export function grabItem(id) {\n//     let str_coordinates = id.split(\"-\");\n//     console.log(\"grabbed at: \", str_coordinates)\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     prev_coordinates = [row, column];\n//     let grid = store.getState().grid\n//     node = grid[row][column];\n\n// }\n\n// export function holdingItem(id)\n// {\n//     let str_coordinates = id.split(\"-\");\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     let grid = store.getState().grid\n\n//     // || node['type'] === \"end_node\"\n//     if (node['type'] === \"start_node\") {\n//         // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n//         grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n//         grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n//     }\n//     console.log(\"released at: \", id);\n//     console.log(\"node released: \", node);\n//     const copy = shallowCopy(grid);\n//     dispatchedChangedNodeType(copy); \n// }\n\n// export function releaseItem(id) {\n//     let str_coordinates = id.split(\"-\");\n//     let row = parseInt(str_coordinates[0]);\n//     let column = parseInt(str_coordinates[1]);\n//     let grid = store.getState().grid\n\n//     // || node['type'] === \"end_node\"\n//     if (node['type'] === \"start_node\") {\n//         // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n//         grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n//         grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n//     }\n//     console.log(\"released at: \", id);\n//     console.log(\"node released: \", node);\n//     const copy = shallowCopy(grid);\n//     dispatchedChangedNodeType(copy);\n// }\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}