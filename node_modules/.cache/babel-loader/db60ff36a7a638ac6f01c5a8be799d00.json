{"ast":null,"code":"import { getValueByElementId } from \"../../dom-helpers/get-values\";\nimport { dispatchedMovedStart, dispatchedMovedEnd, dispatchedAddedAdditionalDestination, dispatchedAddedWall, dispatchedRemovedAdditionalDestination, dispatchedRemovedWall, dispatchedRemovedWeight, dispatchedAddedWeight } from \"../../../redux/dispatchs/node-dispatchs\";\nimport store from \"../../../redux/stores/store\";\nimport { dispatchedChangedNodeType } from \"../../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../../2d-array-functions/shallow-copy\";\nexport default function nodeClicked(id = '') {\n  let coordinates = _getIdCoordinates(id);\n\n  let grid = store.getState().grid;\n\n  let selected_node_type = _getUserUpdatedNodeType();\n\n  let node = _getNode(id);\n\n  if (node['type'] !== selected_node_type) {\n    if (!(node[\"type\"] === \"start_start\" || node[\"type\"] === \"end_node\") && !(selected_node_type === \"start_node\" || selected_node_type === \"end_node\")) {\n      grid[coordinates[0]][coordinates[1]] = _create_node(selected_node_type);\n\n      _removeNodeFromReducer(node[\"type\"], coordinates);\n\n      _addNodeToReducer(selected_node_type, coordinates);\n    } // else if((selected_node_type === \"node_start\" ||  selected_node_type === \"node_end\") || )\n    else if (selected_node_type === \"start_node\") {\n        let start = store.getState().nodes.start_coordinates;\n        grid[start[0]][start[1]] = _create_node(\"empty_node\");\n        grid[coordinates[0]][coordinates[1]] = _create_node(selected_node_type);\n\n        _removeNodeFromReducer(node[\"type\"], coordinates);\n\n        _addNodeToReducer(selected_node_type, coordinates); // _removeNodeFromReducer()\n\n      } else if (selected_node_type === \"end_node\") {\n        let end = store.getState().nodes.end_coordinates;\n        grid[end[0]][end[1]] = _create_node(\"empty_node\");\n        grid[coordinates[0]][coordinates[1]] = _create_node(selected_node_type);\n\n        _addNodeToReducer(selected_node_type, coordinates);\n      }\n\n    const copy = shallowCopy(grid);\n    dispatchedChangedNodeType(copy); // else if(node)\n  }\n}\n\nfunction _addNodeToReducer(node_type, coordinates) {\n  // let node_reducer = store.getState().nodes;\n  switch (node_type) {\n    case \"start_node\":\n      dispatchedMovedStart(coordinates);\n      break;\n\n    case \"end_node\":\n      dispatchedMovedEnd(coordinates);\n      break;\n\n    case \"additional_destination_node\":\n      dispatchedAddedAdditionalDestination(coordinates);\n      break;\n\n    case \"wall_node\":\n      dispatchedAddedWall(coordinates);\n      break;\n\n    case \"weight_node\":\n      dispatchedAddedWeight(coordinates);\n      break;\n\n    default:\n      // alert(\"something went wrong, hold on!\");\n      break;\n  }\n}\n\nfunction _removeNodeFromReducer(node_type, coordinates) {\n  switch (node_type) {\n    case \"additional_destination_node\":\n      dispatchedRemovedAdditionalDestination(coordinates);\n      break;\n\n    case \"wall_node\":\n      dispatchedRemovedWall(coordinates);\n      break;\n\n    case \"weight_node\":\n      dispatchedRemovedWeight(coordinates);\n      break;\n\n    default:\n      // alert(\"something went wrong, hold on!\");\n      break;\n  }\n}\n\nfunction _getIdCoordinates(id = \"\") {\n  let str_coordinates = id.split(\"-\");\n  let row = parseInt(str_coordinates[0]);\n  let column = parseInt(str_coordinates[1]);\n  return [row, column];\n}\n\nfunction _getNode(id) {\n  const coordinates = _getIdCoordinates(id);\n\n  const grid = store.getState().grid;\n  let node = grid[coordinates[0]][coordinates[1]];\n  return node;\n}\n\nfunction _getUserUpdatedNodeType() {\n  return getValueByElementId(\"node-types\");\n}\n\nfunction _create_node(type) {\n  return {\n    type: type,\n    visited: false,\n    shortest_path: false\n  };\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/action-listeners/nodes/on-click.js"],"names":["getValueByElementId","dispatchedMovedStart","dispatchedMovedEnd","dispatchedAddedAdditionalDestination","dispatchedAddedWall","dispatchedRemovedAdditionalDestination","dispatchedRemovedWall","dispatchedRemovedWeight","dispatchedAddedWeight","store","dispatchedChangedNodeType","shallowCopy","nodeClicked","id","coordinates","_getIdCoordinates","grid","getState","selected_node_type","_getUserUpdatedNodeType","node","_getNode","_create_node","_removeNodeFromReducer","_addNodeToReducer","start","nodes","start_coordinates","end","end_coordinates","copy","node_type","str_coordinates","split","row","parseInt","column","type","visited","shortest_path"],"mappings":"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","sourcesContent":["import { getValueByElementId } from \"../../dom-helpers/get-values\";\nimport { dispatchedMovedStart, dispatchedMovedEnd, dispatchedAddedAdditionalDestination, dispatchedAddedWall, dispatchedRemovedAdditionalDestination, dispatchedRemovedWall, dispatchedRemovedWeight, dispatchedAddedWeight } from \"../../../redux/dispatchs/node-dispatchs\";\nimport store from \"../../../redux/stores/store\";\nimport { dispatchedChangedNodeType } from \"../../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../../2d-array-functions/shallow-copy\";\n\nexport default function nodeClicked(id='')\n{\n    let coordinates = _getIdCoordinates(id);\n    let grid = store.getState().grid;\n    let selected_node_type = _getUserUpdatedNodeType();\n    let node = _getNode(id);\n    if(node['type'] !== selected_node_type)\n    {\n        if(!(node[\"type\"] === \"start_start\" || node[\"type\"] === \"end_node\") && !(selected_node_type === \"start_node\" || selected_node_type === \"end_node\"))\n        {\n            grid[coordinates[0]][coordinates[1]] = _create_node(selected_node_type);\n            _removeNodeFromReducer(node[\"type\"], coordinates);            \n            _addNodeToReducer(selected_node_type, coordinates);\n\n        }\n        // else if((selected_node_type === \"node_start\" ||  selected_node_type === \"node_end\") || )\n        else if(selected_node_type === \"start_node\")\n        {\n            let start = store.getState().nodes.start_coordinates;\n            grid[start[0]][start[1]] = _create_node(\"empty_node\");\n            grid[coordinates[0]][coordinates[1]] = _create_node(selected_node_type);\n            \n            _removeNodeFromReducer(node[\"type\"], coordinates);\n            _addNodeToReducer(selected_node_type, coordinates);\n            // _removeNodeFromReducer()\n        }\n        else if(selected_node_type === \"end_node\")\n        {\n            let end = store.getState().nodes.end_coordinates;\n            grid[end[0]][end[1]] = _create_node(\"empty_node\");\n            grid[coordinates[0]][coordinates[1]] = _create_node(selected_node_type);\n            _addNodeToReducer(selected_node_type, coordinates);\n\n        }\n\n        const copy = shallowCopy(grid);\n        dispatchedChangedNodeType(copy);\n        \n        // else if(node)\n    }\n    \n}\n\nfunction _addNodeToReducer(node_type, coordinates)\n{\n    // let node_reducer = store.getState().nodes;\n    switch(node_type)\n    {\n        case \"start_node\":\n            dispatchedMovedStart(coordinates);\n            break;\n        case \"end_node\":\n            dispatchedMovedEnd(coordinates);\n            break;\n        case \"additional_destination_node\":\n            dispatchedAddedAdditionalDestination(coordinates)\n            break;\n        case \"wall_node\":\n            dispatchedAddedWall(coordinates)\n            break;\n        case \"weight_node\":\n            dispatchedAddedWeight(coordinates)\n            break;\n        default:\n            // alert(\"something went wrong, hold on!\");\n            break;\n    }\n}\n\n\nfunction _removeNodeFromReducer(node_type, coordinates)\n{\n    switch(node_type)\n    {\n        case \"additional_destination_node\":\n            dispatchedRemovedAdditionalDestination(coordinates)\n            break;\n        case \"wall_node\":\n            dispatchedRemovedWall(coordinates)\n            break;\n        case \"weight_node\":\n            dispatchedRemovedWeight(coordinates)\n            break;\n        default:\n            // alert(\"something went wrong, hold on!\");\n            break;\n    }\n}\n\nfunction _getIdCoordinates(id = \"\") {\n    let str_coordinates = id.split(\"-\");\n    let row = parseInt(str_coordinates[0]);\n    let column = parseInt(str_coordinates[1]);\n    return [row, column];\n}\n\n\nfunction _getNode(id) {\n    const coordinates = _getIdCoordinates(id);\n    const grid = store.getState().grid\n    let node = grid[coordinates[0]][coordinates[1]];\n    return node;\n}\n\nfunction _getUserUpdatedNodeType()\n{\n    return getValueByElementId(\"node-types\");\n}\n\nfunction _create_node(type)\n{\n    return {\n        type: type,\n        visited: false,\n        shortest_path: false \n    }\n}"]},"metadata":{},"sourceType":"module"}