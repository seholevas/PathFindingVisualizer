{"ast":null,"code":"import { getValueByElementId } from \"../../dom-helpers/get-values\";\nimport { dispatchedMovedStart, dispatchedMovedEnd, dispatchedAddedAdditionalDestination, dispatchedAddedWall, dispatchedRemovedAdditionalDestination, dispatchedRemovedWall, dispatchedRemovedWeight } from \"../../../redux/dispatchs/node-dispatchs\";\nexport default function nodeClicked(id = '') {\n  let coordinates = _getIdCoordinates(id);\n\n  let grid = store.getState().grid;\n\n  let selected_node_type = _getUserUpdatedNodeType();\n\n  let node = _getNode(id);\n\n  if (node['type'] !== selected_node_type) {\n    if (!(node[\"type\"] === \"node_start\" || node[\"type\"] === \"node_end\")) {\n      grid[coordinates[0]][coordinates[1]] = _create_node(selected_node_type);\n\n      _removeNodeFromReducer(node[\"type\"], coordinates);\n\n      _addNodeToReducer(selected_node_type, coordinates);\n    } else if (selected_node_type === \"node_start\" || selected_node_type === \"node_end\") {\n      _removeNodeFromReducer(node[\"type\"], coordinates);\n\n      _addNodeToReducer(selected_node_type, coordinates);\n\n      grid[coordinates[0]][coordinates[1]] = _create_node(selected_node_type); // _removeNodeFromReducer()\n    } // else if(node)\n\n  }\n}\n\nfunction _addNodeToReducer(node_type, coordinates) {\n  // let node_reducer = store.getState().nodes;\n  switch (node_type) {\n    case \"start_node\":\n      dispatchedMovedStart(coordinates);\n      break;\n\n    case \"end_node\":\n      dispatchedMovedEnd(coordinates);\n      break;\n\n    case \"additional_destination_node\":\n      dispatchedAddedAdditionalDestination(coordinates);\n      break;\n\n    case \"wall_node\":\n      dispatchedAddedWall(coordinates);\n      break;\n\n    case \"weight_node\":\n      dispatchedAddedWeight(coordinates);\n      break;\n\n    default:\n      // alert(\"something went wrong, hold on!\");\n      break;\n  }\n}\n\nfunction _removeNodeToReducer(node_type, coordinates) {\n  switch (node_type) {\n    case \"additional_destination_node\":\n      dispatchedRemovedAdditionalDestination(coordinates);\n      break;\n\n    case \"wall_node\":\n      dispatchedRemovedWall(coordinates);\n      break;\n\n    case \"weight_node\":\n      dispatchedRemovedWeight(coordinates);\n      break;\n\n    default:\n      // alert(\"something went wrong, hold on!\");\n      break;\n  }\n}\n\nfunction _removeNodeFromReducer(node_type) {}\n\nfunction _getIdCoordinates(id = \"\") {\n  let str_coordinates = id.split(\"-\");\n  let row = parseInt(str_coordinates[0]);\n  let column = parseInt(str_coordinates[1]);\n  return [row, column];\n}\n\nfunction _getNode(id) {\n  const coordinates = _getIdCoordinates(id);\n\n  const grid = store.getState().grid;\n  node = grid[coordinates[0]][coordinates[1]];\n  return node;\n}\n\nfunction _getUserUpdatedNodeType() {\n  return getValueByElementId(\"node_types\");\n}\n\nfunction _create_node(type) {\n  return {\n    type: type,\n    visited: false,\n    shortest_path: false\n  };\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/action-listeners/nodes/on-click.js"],"names":["getValueByElementId","dispatchedMovedStart","dispatchedMovedEnd","dispatchedAddedAdditionalDestination","dispatchedAddedWall","dispatchedRemovedAdditionalDestination","dispatchedRemovedWall","dispatchedRemovedWeight","nodeClicked","id","coordinates","_getIdCoordinates","grid","store","getState","selected_node_type","_getUserUpdatedNodeType","node","_getNode","_create_node","_removeNodeFromReducer","_addNodeToReducer","node_type","dispatchedAddedWeight","_removeNodeToReducer","str_coordinates","split","row","parseInt","column","type","visited","shortest_path"],"mappings":"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","sourcesContent":["import { getValueByElementId } from \"../../dom-helpers/get-values\";\nimport { dispatchedMovedStart, dispatchedMovedEnd, dispatchedAddedAdditionalDestination, dispatchedAddedWall, dispatchedRemovedAdditionalDestination, dispatchedRemovedWall, dispatchedRemovedWeight } from \"../../../redux/dispatchs/node-dispatchs\";\n\nexport default function nodeClicked(id='')\n{\n    let coordinates = _getIdCoordinates(id);\n    let grid = store.getState().grid;\n    let selected_node_type = _getUserUpdatedNodeType();\n    let node = _getNode(id);\n    if(node['type'] !== selected_node_type)\n    {\n        if(!(node[\"type\"] === \"node_start\" || node[\"type\"] === \"node_end\"))\n        {\n            grid[coordinates[0]][coordinates[1]] = _create_node(selected_node_type);\n            _removeNodeFromReducer(node[\"type\"], coordinates);            \n            _addNodeToReducer(selected_node_type, coordinates);\n\n        }\n        else if((selected_node_type === \"node_start\" ||  selected_node_type === \"node_end\"))\n        {\n            _removeNodeFromReducer(node[\"type\"], coordinates);\n            _addNodeToReducer(selected_node_type, coordinates);\n            grid[coordinates[0]][coordinates[1]] = _create_node(selected_node_type);\n            // _removeNodeFromReducer()\n        }\n        \n        // else if(node)\n    }\n    \n}\n\nfunction _addNodeToReducer(node_type, coordinates)\n{\n    // let node_reducer = store.getState().nodes;\n    switch(node_type)\n    {\n        case \"start_node\":\n            dispatchedMovedStart(coordinates);\n            break;\n        case \"end_node\":\n            dispatchedMovedEnd(coordinates);\n            break;\n        case \"additional_destination_node\":\n            dispatchedAddedAdditionalDestination(coordinates)\n            break;\n        case \"wall_node\":\n            dispatchedAddedWall(coordinates)\n            break;\n        case \"weight_node\":\n            dispatchedAddedWeight(coordinates)\n            break;\n        default:\n            // alert(\"something went wrong, hold on!\");\n            break;\n    }\n}\n\n\nfunction _removeNodeToReducer(node_type, coordinates)\n{\n    switch(node_type)\n    {\n        case \"additional_destination_node\":\n            dispatchedRemovedAdditionalDestination(coordinates)\n            break;\n        case \"wall_node\":\n            dispatchedRemovedWall(coordinates)\n            break;\n        case \"weight_node\":\n            dispatchedRemovedWeight(coordinates)\n            break;\n        default:\n            // alert(\"something went wrong, hold on!\");\n            break;\n    }\n}\n\nfunction _removeNodeFromReducer(node_type)\n{\n\n}\n\nfunction _getIdCoordinates(id = \"\") {\n    let str_coordinates = id.split(\"-\");\n    let row = parseInt(str_coordinates[0]);\n    let column = parseInt(str_coordinates[1]);\n    return [row, column];\n}\n\n\nfunction _getNode(id) {\n    const coordinates = _getIdCoordinates(id);\n    const grid = store.getState().grid\n    node = grid[coordinates[0]][coordinates[1]];\n    return node;\n}\n\nfunction _getUserUpdatedNodeType()\n{\n    return getValueByElementId(\"node_types\");\n}\n\nfunction _create_node(type)\n{\n    return {\n        type: type,\n        visited: false,\n        shortest_path: false \n    }\n}"]},"metadata":{},"sourceType":"module"}