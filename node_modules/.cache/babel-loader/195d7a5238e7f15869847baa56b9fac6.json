{"ast":null,"code":"import shallowCopy from \"../../../helpers/2d-array-functions/shallow-copy\";\nimport { checkNeighbors } from \"./async-helpers/check-neighbors\";\nimport { updateParent } from \"./setters-and-getters/update-parent\";\nimport coordinatesAreEqual from \"./setters-and-getters/coordinates-are-equal\"; // import {PriorityQueue} from \"../../../data-structures/min-priority-queue\";\n\nimport { PriorityQueue } from \"../../data-structures/priority-queue\";\nexport default function* aStar(adjacency_matrix = [[]], start_coordinates = [0, 0], end_cordinates = [3, 3]) {\n  var priority_queue = new PriorityQueue();\n  let parent_matrix = shallowCopy(adjacency_matrix, null);\n  let visited = shallowCopy(adjacency_matrix, false);\n  let distance_matrix = shallowCopy(adjacency_matrix, Infinity);\n  distance_matrix[start_coordinates[0]][start_coordinates[1]] = 0;\n  priority_queue.enqueue([...start_coordinates], manhattanDistance(start_coordinates, end_cordinates));\n\n  while (!priority_queue.isEmpty()) {\n    let q_item = priority_queue.dequeue(); // let f_cost = tuple[0];\n\n    let current_coordinates = q_item.element;\n    visited[current_coordinates[0]][current_coordinates[1]] = true;\n    yield [...current_coordinates];\n\n    if (coordinatesAreEqual(current_coordinates, end_cordinates)) {\n      break;\n    }\n\n    const generator = checkNeighbors(current_coordinates, visited);\n    let result = generator.next();\n\n    while (!result.done) {\n      let neighbor_coordinates = result.value;\n      let have_visited = visited[neighbor_coordinates[0]][neighbor_coordinates[1]]; // EDIT: needs to change once weight and walls are added in.\n\n      let cost_from_current_node = distance_matrix[current_coordinates[0]][current_coordinates[1]] + 1;\n      let f_cost = cost_from_current_node + manhattanDistance(neighbor_coordinates, end_cordinates);\n      let is_current_cost_less = distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] > cost_from_current_node;\n      let is_neighbor_in_priority_queue = priority_queue.items.includes([f_cost, neighbor_coordinates]);\n\n      if (!have_visited && is_neighbor_in_priority_queue && is_current_cost_less) {\n        const index = priority_queue.items.indexOf([f_cost, neighbor_coordinates]);\n        priority_queue.items.splice(index);\n      }\n\n      if (!have_visited && is_current_cost_less && !is_neighbor_in_priority_queue) {\n        // update the distance of the neighbor_node\n        distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] = cost_from_current_node; // update the parent node of the neighbor node to the current node\n\n        updateParent(current_coordinates, neighbor_coordinates, parent_matrix);\n        priority_queue.enqueue(neighbor_coordinates, manhattanDistance(neighbor_coordinates, end_cordinates));\n      }\n\n      result = generator.next();\n    }\n  }\n}\n\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n  return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1]);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/helpers/matrix-helpers/a-star.js"],"names":["shallowCopy","checkNeighbors","updateParent","coordinatesAreEqual","PriorityQueue","aStar","adjacency_matrix","start_coordinates","end_cordinates","priority_queue","parent_matrix","visited","distance_matrix","Infinity","enqueue","manhattanDistance","isEmpty","q_item","dequeue","current_coordinates","element","generator","result","next","done","neighbor_coordinates","value","have_visited","cost_from_current_node","f_cost","is_current_cost_less","is_neighbor_in_priority_queue","items","includes","index","indexOf","splice","coordinates1","coordinates2","Math","abs"],"mappings":"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","sourcesContent":["import shallowCopy from \"../../../helpers/2d-array-functions/shallow-copy\"\nimport { checkNeighbors } from \"./async-helpers/check-neighbors\";\nimport { updateParent } from \"./setters-and-getters/update-parent\";\nimport coordinatesAreEqual from \"./setters-and-getters/coordinates-are-equal\";\n// import {PriorityQueue} from \"../../../data-structures/min-priority-queue\";\nimport {PriorityQueue} from \"../../data-structures/priority-queue\"\n\nexport default function* aStar(adjacency_matrix = [[]], start_coordinates = [0, 0], end_cordinates = [3, 3]) {\n    var priority_queue = new PriorityQueue();\n    let parent_matrix = shallowCopy(adjacency_matrix, null);\n    let visited = shallowCopy(adjacency_matrix, false);\n    let distance_matrix = shallowCopy(adjacency_matrix, Infinity);\n\n    distance_matrix[start_coordinates[0]][start_coordinates[1]] = 0;\n\n    priority_queue.enqueue([...start_coordinates], manhattanDistance(start_coordinates, end_cordinates));\n    while (!priority_queue.isEmpty()) {\n        let q_item = priority_queue.dequeue();\n        // let f_cost = tuple[0];\n        let current_coordinates = q_item.element;\n        visited[current_coordinates[0]][current_coordinates[1]] = true;\n        yield [...current_coordinates];\n\n        if(coordinatesAreEqual(current_coordinates,end_cordinates))\n        {\n            break;\n        }\n\n        const generator = checkNeighbors(current_coordinates, visited);\n        let result = generator.next();\n\n        while (!result.done) {\n            let neighbor_coordinates = result.value\n            let have_visited = visited[neighbor_coordinates[0]][neighbor_coordinates[1]];\n            // EDIT: needs to change once weight and walls are added in.\n            let cost_from_current_node = distance_matrix[current_coordinates[0]][current_coordinates[1]] + 1;\n\n            let f_cost = cost_from_current_node + manhattanDistance(neighbor_coordinates, end_cordinates)\n\n            let is_current_cost_less = distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] > cost_from_current_node\n            let is_neighbor_in_priority_queue = priority_queue.items.includes([f_cost, neighbor_coordinates]);\n\n            if (!have_visited && is_neighbor_in_priority_queue && is_current_cost_less) {\n                const index = priority_queue.items.indexOf([f_cost, neighbor_coordinates]);\n                priority_queue.items.splice(index);\n\n            }\n            if (!have_visited && is_current_cost_less && !is_neighbor_in_priority_queue) {\n                // update the distance of the neighbor_node\n                distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] = cost_from_current_node;\n                // update the parent node of the neighbor node to the current node\n                updateParent(current_coordinates, neighbor_coordinates, parent_matrix);\n                priority_queue.enqueue(neighbor_coordinates, manhattanDistance(neighbor_coordinates, end_cordinates))\n            }\n            \n            \n            result = generator.next();\n        }\n    }\n\n\n\n\n}\n\n\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n    return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1]);\n}"]},"metadata":{},"sourceType":"module"}