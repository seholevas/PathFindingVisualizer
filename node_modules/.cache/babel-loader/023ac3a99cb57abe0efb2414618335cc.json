{"ast":null,"code":"import store from \"../../redux/stores/store\";\nimport { dispatchedChangedNodeType } from \"../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\nlet node = null; // let prev_coordinates = null;\n\nexport function grabItem(id) {\n  let str_coordinates = id.split(\"-\");\n  console.log(\"grabbed at: \", str_coordinates);\n  let row = parseInt(str_coordinates[0]);\n  let column = parseInt(str_coordinates[1]);\n  prev_coordinates = [row, column];\n  let grid = store.getState().grid;\n  node = grid[row][column];\n}\nexport function holdingItem(id) {\n  let str_coordinates = id.split(\"-\");\n  let row = parseInt(str_coordinates[0]);\n  let column = parseInt(str_coordinates[1]);\n  let grid = store.getState().grid; // || node['type'] === \"end_node\"\n\n  if (node['type'] === \"start_node\") {\n    // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n    grid[prev_coordinates[0]][prev_coordinates[1]] = {\n      type: \"empty_node\",\n      visited: false,\n      shortest_path: false\n    };\n    grid[row][column] = {\n      type: \"start_node\",\n      visited: false,\n      shortest_path: false\n    };\n  }\n\n  console.log(\"released at: \", id);\n  console.log(\"node released: \", node);\n  const copy = shallowCopy(grid);\n  dispatchedChangedNodeType(copy);\n}\nexport function releaseItem(id) {\n  let str_coordinates = id.split(\"-\");\n  let row = parseInt(str_coordinates[0]);\n  let column = parseInt(str_coordinates[1]);\n  let grid = store.getState().grid; // || node['type'] === \"end_node\"\n\n  if (node['type'] === \"start_node\") {\n    // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n    grid[prev_coordinates[0]][prev_coordinates[1]] = {\n      type: \"empty_node\",\n      visited: false,\n      shortest_path: false\n    };\n    grid[row][column] = {\n      type: \"start_node\",\n      visited: false,\n      shortest_path: false\n    };\n  }\n\n  console.log(\"released at: \", id);\n  console.log(\"node released: \", node);\n  const copy = shallowCopy(grid);\n  dispatchedChangedNodeType(copy);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/action-listeners/on-mouse.js"],"names":["store","dispatchedChangedNodeType","shallowCopy","node","grabItem","id","str_coordinates","split","console","log","row","parseInt","column","prev_coordinates","grid","getState","holdingItem","type","visited","shortest_path","copy","releaseItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,0BAAlB;AACA,SAASC,yBAAT,QAA0C,sCAA1C;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AAEA,IAAIC,IAAI,GAAG,IAAX,C,CACA;;AAEA,OAAO,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AACzB,MAAIC,eAAe,GAAGD,EAAE,CAACE,KAAH,CAAS,GAAT,CAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,eAA5B;AACA,MAAII,GAAG,GAAGC,QAAQ,CAACL,eAAe,CAAC,CAAD,CAAhB,CAAlB;AACA,MAAIM,MAAM,GAAGD,QAAQ,CAACL,eAAe,CAAC,CAAD,CAAhB,CAArB;AACAO,EAAAA,gBAAgB,GAAG,CAACH,GAAD,EAAME,MAAN,CAAnB;AACA,MAAIE,IAAI,GAAGd,KAAK,CAACe,QAAN,GAAiBD,IAA5B;AACAX,EAAAA,IAAI,GAAGW,IAAI,CAACJ,GAAD,CAAJ,CAAUE,MAAV,CAAP;AAEH;AAED,OAAO,SAASI,WAAT,CAAqBX,EAArB,EACP;AACI,MAAIC,eAAe,GAAGD,EAAE,CAACE,KAAH,CAAS,GAAT,CAAtB;AACA,MAAIG,GAAG,GAAGC,QAAQ,CAACL,eAAe,CAAC,CAAD,CAAhB,CAAlB;AACA,MAAIM,MAAM,GAAGD,QAAQ,CAACL,eAAe,CAAC,CAAD,CAAhB,CAArB;AACA,MAAIQ,IAAI,GAAGd,KAAK,CAACe,QAAN,GAAiBD,IAA5B,CAJJ,CAMI;;AACA,MAAIX,IAAI,CAAC,MAAD,CAAJ,KAAiB,YAArB,EAAmC;AAC/B;AACAW,IAAAA,IAAI,CAACD,gBAAgB,CAAC,CAAD,CAAjB,CAAJ,CAA0BA,gBAAgB,CAAC,CAAD,CAA1C,IAAiD;AAAEI,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,OAAO,EAAE,KAA/B;AAAsCC,MAAAA,aAAa,EAAE;AAArD,KAAjD;AACAL,IAAAA,IAAI,CAACJ,GAAD,CAAJ,CAAUE,MAAV,IAAoB;AAAEK,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,OAAO,EAAE,KAA/B;AAAsCC,MAAAA,aAAa,EAAE;AAArD,KAApB;AACH;;AACDX,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,EAA7B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BN,IAA/B;AACA,QAAMiB,IAAI,GAAGlB,WAAW,CAACY,IAAD,CAAxB;AACAb,EAAAA,yBAAyB,CAACmB,IAAD,CAAzB;AACH;AAED,OAAO,SAASC,WAAT,CAAqBhB,EAArB,EAAyB;AAC5B,MAAIC,eAAe,GAAGD,EAAE,CAACE,KAAH,CAAS,GAAT,CAAtB;AACA,MAAIG,GAAG,GAAGC,QAAQ,CAACL,eAAe,CAAC,CAAD,CAAhB,CAAlB;AACA,MAAIM,MAAM,GAAGD,QAAQ,CAACL,eAAe,CAAC,CAAD,CAAhB,CAArB;AACA,MAAIQ,IAAI,GAAGd,KAAK,CAACe,QAAN,GAAiBD,IAA5B,CAJ4B,CAM5B;;AACA,MAAIX,IAAI,CAAC,MAAD,CAAJ,KAAiB,YAArB,EAAmC;AAC/B;AACAW,IAAAA,IAAI,CAACD,gBAAgB,CAAC,CAAD,CAAjB,CAAJ,CAA0BA,gBAAgB,CAAC,CAAD,CAA1C,IAAiD;AAAEI,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,OAAO,EAAE,KAA/B;AAAsCC,MAAAA,aAAa,EAAE;AAArD,KAAjD;AACAL,IAAAA,IAAI,CAACJ,GAAD,CAAJ,CAAUE,MAAV,IAAoB;AAAEK,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,OAAO,EAAE,KAA/B;AAAsCC,MAAAA,aAAa,EAAE;AAArD,KAApB;AACH;;AACDX,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,EAA7B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BN,IAA/B;AACA,QAAMiB,IAAI,GAAGlB,WAAW,CAACY,IAAD,CAAxB;AACAb,EAAAA,yBAAyB,CAACmB,IAAD,CAAzB;AACH","sourcesContent":["import store from \"../../redux/stores/store\";\nimport { dispatchedChangedNodeType } from \"../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\n\nlet node = null\n// let prev_coordinates = null;\n\nexport function grabItem(id) {\n    let str_coordinates = id.split(\"-\");\n    console.log(\"grabbed at: \", str_coordinates)\n    let row = parseInt(str_coordinates[0]);\n    let column = parseInt(str_coordinates[1]);\n    prev_coordinates = [row, column];\n    let grid = store.getState().grid\n    node = grid[row][column];\n\n}\n\nexport function holdingItem(id)\n{\n    let str_coordinates = id.split(\"-\");\n    let row = parseInt(str_coordinates[0]);\n    let column = parseInt(str_coordinates[1]);\n    let grid = store.getState().grid\n\n    // || node['type'] === \"end_node\"\n    if (node['type'] === \"start_node\") {\n        // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n        grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n        grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n    }\n    console.log(\"released at: \", id);\n    console.log(\"node released: \", node);\n    const copy = shallowCopy(grid);\n    dispatchedChangedNodeType(copy); \n}\n\nexport function releaseItem(id) {\n    let str_coordinates = id.split(\"-\");\n    let row = parseInt(str_coordinates[0]);\n    let column = parseInt(str_coordinates[1]);\n    let grid = store.getState().grid\n\n    // || node['type'] === \"end_node\"\n    if (node['type'] === \"start_node\") {\n        // INITIAL_STATE[9][9] = { type: \"end_node\", visited: false, shortest_path: false}\n        grid[prev_coordinates[0]][prev_coordinates[1]] = { type: \"empty_node\", visited: false, shortest_path: false };\n        grid[row][column] = { type: \"start_node\", visited: false, shortest_path: false }\n    }\n    console.log(\"released at: \", id);\n    console.log(\"node released: \", node);\n    const copy = shallowCopy(grid);\n    dispatchedChangedNodeType(copy);\n}"]},"metadata":{},"sourceType":"module"}