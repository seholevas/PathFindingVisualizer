{"ast":null,"code":"export function* checkNeighbors(node_location = [], visited = [[]]) {\n  let row = node_location[0];\n  let column = node_location[1];\n  const RIGHT = column + 1;\n  const LEFT = column - 1;\n  const UP = row - 1;\n  const DOWN = row + 1;\n\n  if (UP >= 0 && !visited[UP][column]) {\n    yield [UP, column];\n  }\n\n  if (RIGHT >= 0 && RIGHT < visited.length && !visited[row][RIGHT]) {\n    yield [row, RIGHT];\n  }\n\n  if (DOWN >= 0 && DOWN < visited.length && !visited[DOWN][column]) {\n    yield [DOWN, column];\n  }\n\n  if (LEFT >= 0 && !visited[row][LEFT]) {\n    yield [row, LEFT];\n  }\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/helpers/matrix-helpers/async-helpers/check-neighbors.js"],"names":["checkNeighbors","node_location","visited","row","column","RIGHT","LEFT","UP","DOWN","length"],"mappings":"AAAA,OAAO,UAAUA,cAAV,CAAyBC,aAAa,GAAG,EAAzC,EAA6CC,OAAO,GAAG,CAAC,EAAD,CAAvD,EAA6D;AAChE,MAAIC,GAAG,GAAGF,aAAa,CAAC,CAAD,CAAvB;AACA,MAAIG,MAAM,GAAGH,aAAa,CAAC,CAAD,CAA1B;AACA,QAAMI,KAAK,GAAGD,MAAM,GAAG,CAAvB;AACA,QAAME,IAAI,GAAGF,MAAM,GAAG,CAAtB;AACA,QAAMG,EAAE,GAAGJ,GAAG,GAAG,CAAjB;AACA,QAAMK,IAAI,GAAGL,GAAG,GAAG,CAAnB;;AAGA,MAAII,EAAE,IAAI,CAAN,IAAW,CAACL,OAAO,CAACK,EAAD,CAAP,CAAYH,MAAZ,CAAhB,EAAqC;AACjC,UAAM,CAACG,EAAD,EAAKH,MAAL,CAAN;AACH;;AAED,MAAIC,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAGH,OAAO,CAACO,MAA9B,IAAwC,CAACP,OAAO,CAACC,GAAD,CAAP,CAAaE,KAAb,CAA7C,EAAkE;AAC9D,UAAM,CAACF,GAAD,EAAME,KAAN,CAAN;AACH;;AACD,MAAIG,IAAI,IAAI,CAAR,IAAaA,IAAI,GAAGN,OAAO,CAACO,MAA5B,IAAsC,CAACP,OAAO,CAACM,IAAD,CAAP,CAAcJ,MAAd,CAA3C,EAAkE;AAC9D,UAAM,CAACI,IAAD,EAAOJ,MAAP,CAAN;AACH;;AAED,MAAIE,IAAI,IAAI,CAAR,IAAa,CAACJ,OAAO,CAACC,GAAD,CAAP,CAAaG,IAAb,CAAlB,EAAsC;AAClC,UAAM,CAACH,GAAD,EAAMG,IAAN,CAAN;AACH;AAGJ","sourcesContent":["export function* checkNeighbors(node_location = [], visited = [[]]) {\n    let row = node_location[0];\n    let column = node_location[1];\n    const RIGHT = column + 1;\n    const LEFT = column - 1;\n    const UP = row - 1;\n    const DOWN = row + 1;\n\n\n    if (UP >= 0 && !visited[UP][column]) {\n        yield [UP, column];\n    }\n\n    if (RIGHT >= 0 && RIGHT < visited.length && !visited[row][RIGHT]) {\n        yield [row, RIGHT];\n    }\n    if (DOWN >= 0 && DOWN < visited.length && !visited[DOWN][column]) {\n        yield [DOWN, column];\n    }\n\n    if (LEFT >= 0 && !visited[row][LEFT]) {\n        yield [row, LEFT];\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}