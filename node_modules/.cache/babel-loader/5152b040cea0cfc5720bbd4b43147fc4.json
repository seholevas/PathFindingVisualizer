{"ast":null,"code":"import{getValueByElementId}from\"../../dom-helpers/get-values\";import{dispatchedMovedStart,dispatchedMovedEnd,dispatchedAddedAdditionalDestination,dispatchedAddedWall,dispatchedRemovedAdditionalDestination,dispatchedRemovedWall,dispatchedRemovedWeight,dispatchedAddedWeight}from\"../../../redux/dispatchs/node-dispatchs\";import store from\"../../../redux/stores/store\";import{dispatchedChangedNodeType}from\"../../../redux/dispatchs/grid-dispatchs\";import shallowCopy from\"../../2d-array-functions/shallow-copy\";export default function nodeClicked(){var id=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var coordinates=_getIdCoordinates(id);var grid=store.getState().grid;var selected_node_type=_getUserUpdatedNodeType();var node=_getNode(id);if(node['type']!==selected_node_type){if(!(node[\"type\"]===\"start_node\"||node[\"type\"]===\"end_node\")&&!(selected_node_type===\"start_node\"||selected_node_type===\"end_node\")){grid[coordinates[0]][coordinates[1]]=_create_node(selected_node_type);_removeNodeFromReducer(node[\"type\"],coordinates);_addNodeToReducer(selected_node_type,coordinates);}// else if((selected_node_type === \"node_start\" ||  selected_node_type === \"node_end\") || )\nelse if(selected_node_type===\"start_node\"){var start=store.getState().nodes.start_coordinates;grid[start[0]][start[1]]=_create_node(\"empty_node\");grid[coordinates[0]][coordinates[1]]=_create_node(selected_node_type);_removeNodeFromReducer(node[\"type\"],coordinates);_addNodeToReducer(selected_node_type,coordinates);// _removeNodeFromReducer()\n}else if(selected_node_type===\"end_node\"){var end=store.getState().nodes.end_coordinates;grid[end[0]][end[1]]=_create_node(\"empty_node\");grid[coordinates[0]][coordinates[1]]=_create_node(selected_node_type);_removeNodeFromReducer(node[\"type\"],coordinates);_addNodeToReducer(selected_node_type,coordinates);}var copy=shallowCopy(grid);dispatchedChangedNodeType(copy);// else if(node)\n}}function _addNodeToReducer(node_type,coordinates){// let node_reducer = store.getState().nodes;\nswitch(node_type){case\"start_node\":dispatchedMovedStart(coordinates);break;case\"end_node\":dispatchedMovedEnd(coordinates);break;case\"additional_destination_node\":dispatchedAddedAdditionalDestination(coordinates,coordinates);break;case\"wall_node\":dispatchedAddedWall(coordinates,coordinates);break;case\"weight_node\":dispatchedAddedWeight(coordinates,coordinates);break;default:// alert(\"something went wrong, hold on!\");\nbreak;}}function _removeNodeFromReducer(node_type,coordinates){switch(node_type){case\"additional_destination_node\":dispatchedRemovedAdditionalDestination(coordinates);break;case\"wall_node\":dispatchedRemovedWall(coordinates);break;case\"weight_node\":dispatchedRemovedWeight(coordinates);break;default:// alert(\"something went wrong, hold on!\");\nbreak;}}function _getIdCoordinates(){var id=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";var str_coordinates=id.split(\"-\");var row=parseInt(str_coordinates[0]);var column=parseInt(str_coordinates[1]);return[row,column];}function _getNode(id){var coordinates=_getIdCoordinates(id);var grid=store.getState().grid;var node=grid[coordinates[0]][coordinates[1]];return node;}function _getUserUpdatedNodeType(){return getValueByElementId(\"node-types\");}function _create_node(type){return{type:type,visited:false,shortest_path:false};}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/action-listeners/nodes/on-click.js"],"names":["getValueByElementId","dispatchedMovedStart","dispatchedMovedEnd","dispatchedAddedAdditionalDestination","dispatchedAddedWall","dispatchedRemovedAdditionalDestination","dispatchedRemovedWall","dispatchedRemovedWeight","dispatchedAddedWeight","store","dispatchedChangedNodeType","shallowCopy","nodeClicked","id","coordinates","_getIdCoordinates","grid","getState","selected_node_type","_getUserUpdatedNodeType","node","_getNode","_create_node","_removeNodeFromReducer","_addNodeToReducer","start","nodes","start_coordinates","end","end_coordinates","copy","node_type","str_coordinates","split","row","parseInt","column","type","visited","shortest_path"],"mappings":"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","sourcesContent":["import { getValueByElementId } from \"../../dom-helpers/get-values\";\nimport { dispatchedMovedStart, dispatchedMovedEnd, dispatchedAddedAdditionalDestination, dispatchedAddedWall, dispatchedRemovedAdditionalDestination, dispatchedRemovedWall, dispatchedRemovedWeight, dispatchedAddedWeight } from \"../../../redux/dispatchs/node-dispatchs\";\nimport store from \"../../../redux/stores/store\";\nimport { dispatchedChangedNodeType } from \"../../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../../2d-array-functions/shallow-copy\";\n\nexport default function nodeClicked(id='')\n{\n    let coordinates = _getIdCoordinates(id);\n    let grid = store.getState().grid;\n    let selected_node_type = _getUserUpdatedNodeType();\n    let node = _getNode(id);\n    if(node['type'] !== selected_node_type)\n    {\n        if(!(node[\"type\"] === \"start_node\" || node[\"type\"] === \"end_node\") && !(selected_node_type === \"start_node\" || selected_node_type === \"end_node\"))\n        {\n            grid[coordinates[0]][coordinates[1]] = _create_node(selected_node_type);\n            _removeNodeFromReducer(node[\"type\"], coordinates);            \n            _addNodeToReducer(selected_node_type, coordinates);\n\n        }\n        // else if((selected_node_type === \"node_start\" ||  selected_node_type === \"node_end\") || )\n        else if(selected_node_type === \"start_node\")\n        {\n            let start = store.getState().nodes.start_coordinates;\n            grid[start[0]][start[1]] = _create_node(\"empty_node\");\n            grid[coordinates[0]][coordinates[1]] = _create_node(selected_node_type);\n            \n            _removeNodeFromReducer(node[\"type\"], coordinates);\n            _addNodeToReducer(selected_node_type, coordinates);\n            // _removeNodeFromReducer()\n        }\n        else if(selected_node_type === \"end_node\")\n        {\n            let end = store.getState().nodes.end_coordinates;\n            grid[end[0]][end[1]] = _create_node(\"empty_node\");\n            grid[coordinates[0]][coordinates[1]] = _create_node(selected_node_type);\n            _removeNodeFromReducer(node[\"type\"], coordinates);\n            _addNodeToReducer(selected_node_type, coordinates);\n\n        }\n\n        const copy = shallowCopy(grid);\n        dispatchedChangedNodeType(copy);\n        \n        // else if(node)\n    }\n    \n}\n\nfunction _addNodeToReducer(node_type, coordinates)\n{\n    // let node_reducer = store.getState().nodes;\n    switch(node_type)\n    {\n        case \"start_node\":\n            dispatchedMovedStart(coordinates);\n            break;\n        case \"end_node\":\n            dispatchedMovedEnd(coordinates);\n            break;\n        case \"additional_destination_node\":\n            dispatchedAddedAdditionalDestination(coordinates, coordinates);\n            break;\n        case \"wall_node\":\n            dispatchedAddedWall(coordinates, coordinates);\n            break;\n        case \"weight_node\":\n            dispatchedAddedWeight(coordinates, coordinates);\n            break;\n        default:\n            // alert(\"something went wrong, hold on!\");\n            break;\n    }\n}\n\n\nfunction _removeNodeFromReducer(node_type, coordinates)\n{\n    switch(node_type)\n    {\n        case \"additional_destination_node\":\n            dispatchedRemovedAdditionalDestination(coordinates)\n            break;\n        case \"wall_node\":\n            dispatchedRemovedWall(coordinates)\n            break;\n        case \"weight_node\":\n            dispatchedRemovedWeight(coordinates)\n            break;\n        default:\n            // alert(\"something went wrong, hold on!\");\n            break;\n    }\n}\n\nfunction _getIdCoordinates(id = \"\") {\n    let str_coordinates = id.split(\"-\");\n    let row = parseInt(str_coordinates[0]);\n    let column = parseInt(str_coordinates[1]);\n    return [row, column];\n}\n\n\nfunction _getNode(id) {\n    const coordinates = _getIdCoordinates(id);\n    const grid = store.getState().grid\n    let node = grid[coordinates[0]][coordinates[1]];\n    return node;\n}\n\nfunction _getUserUpdatedNodeType()\n{\n    return getValueByElementId(\"node-types\");\n}\n\nfunction _create_node(type)\n{\n    return {\n        type: type,\n        visited: false,\n        shortest_path: false \n    }\n}"]},"metadata":{},"sourceType":"module"}