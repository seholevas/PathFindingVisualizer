{"ast":null,"code":"var _jsxFileName = \"/home/steven/SWE/Code/path-finding-visualizer/src/react/pages/instructions-what-is-an-algorithm-page.js\";\nimport React, { Component } from 'react';\nimport Card from '../atoms/holders/card';\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCar } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport MasterCTA from '../atoms/controls/call-to-actions/abstractions/master-call-to-action';\nimport \"../../css/text.css\";\nimport \"../../css/image.css\";\nimport \"../../css/grid.css\";\nimport \"../../css/flex.css\";\nlibrary.add(faCar);\nlibrary.add(faSquare);\nexport default class InstructionsPage extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(Card, {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex row text-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 25\n      }\n    }, \"Path Finding Algorithm Visualizer\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex row text-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }\n    }, \"What is a path finding algorithm?\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex row img center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require('../../images/pathfinding.png'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 60\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex row text-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }\n    }, \"Imagine you are a driver at a ride-share company who is requested to pick someone up. You wouldn't want to be driving in circles trying to get there, would you? You would waste so much time and gas! That is where path finding algorithms come into play. At its core, a pathfinding algorithm seeks to find the shortest path between two points. This application visualizes various pathfinding algorithms in action, and more!\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(MasterCTA, {\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }\n    }, \"Previous\"), /*#__PURE__*/React.createElement(MasterCTA, {\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }\n    }, \"Next\"), /*#__PURE__*/React.createElement(MasterCTA, {\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }\n    }, \"Get Started!\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/react/pages/instructions-what-is-an-algorithm-page.js"],"names":["React","Component","Card","library","faCar","faSquare","FontAwesomeIcon","MasterCTA","add","InstructionsPage","render","require"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,KAAT,QAAsB,mCAAtB;AACA,SAASC,QAAT,QAAyB,mCAAzB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,SAAP,MAAsB,sEAAtB;AACA,OAAO,oBAAP;AACA,OAAO,qBAAP;AACA,OAAO,oBAAP;AACA,OAAO,oBAAP;AAGAJ,OAAO,CAACK,GAAR,CAAYJ,KAAZ;AACAD,OAAO,CAACK,GAAR,CAAYH,QAAZ;AACA,eAAe,MAAMI,gBAAN,SAA+BR,SAA/B,CAAyC;AACpDS,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAE,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACQ;AAAK,MAAA,SAAS,EAAE,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADJ,CADR,eAKQ;AAAK,MAAA,SAAS,EAAE,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADJ,CALR,eAQQ;AAAK,MAAA,SAAS,EAAE,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAuC;AAAK,MAAA,GAAG,EAAEC,OAAO,CAAC,8BAAD,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAvC,CARR,eASQ;AAAK,MAAA,SAAS,EAAE,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+aADJ,CATR,eAsBQ;AAAK,MAAA,SAAS,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAE,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAE,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAE,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,CAtBR,eA2BQ;AAAK,MAAA,SAAS,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BR,CADJ;AAwEH;;AA1EmD","sourcesContent":["import React, { Component } from 'react'\nimport Card from '../atoms/holders/card'\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCar } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport MasterCTA from '../atoms/controls/call-to-actions/abstractions/master-call-to-action';\nimport \"../../css/text.css\"\nimport \"../../css/image.css\"\nimport \"../../css/grid.css\"\nimport \"../../css/flex.css\"\n\n\nlibrary.add(faCar);\nlibrary.add(faSquare);\nexport default class InstructionsPage extends Component {\n    render() {\n        return (\n            <Card className={\"grid\"}>\n                    <div className={\"flex row text-block\"}>\n                        <h1>Path Finding Algorithm Visualizer</h1>\n                    </div>\n\n                    <div className={\"flex row text-block\"}>\n                        <h2>What is a path finding algorithm?</h2>\n                    </div>\n                    <div className={\"flex row img center\"}><img src={require('../../images/pathfinding.png')} /></div>\n                    <div className={\"flex row text-block\"}>\n                        <p>Imagine you are a driver at a ride-share company who is requested to pick someone up. You wouldn't want to be driving in circles trying to get there, would you? You would waste so much time and gas! That is where path finding algorithms come into play. At its core, a pathfinding algorithm seeks to find the shortest path between two points. This application visualizes various pathfinding algorithms in action, and more!</p>\n                    </div>\n                    {/* \n                    <div className={\"text text-block\"}>\n                    <h2>Meet the algorithms</h2>\n                    <h3>Some Algorithms are more efficient than others!</h3>\n                    <ul><span>A* Search</span> (weighted): arguably the best algorithm; guarentee's the shortest path. </ul>\n                    <ul><span>Dijkstra's Algorithm</span> (weighted): the father of algorithms; It will guarentee the shortest path. </ul>\n                    <ul><span>Bredth First Search</span> (unweighted): dijkstra's carefree brother; gaurentee's the shortest path, but does not care about weights. </ul>\n                    <ul><span>Depth First Search</span> (unweighted): the under achieving algorithm; It will not gaurentee the shortest path! </ul>\n                    </div> */}\n\n                    <div className={\"flex row\"}>\n                        <MasterCTA type={\"button\"}>Previous</MasterCTA>\n                        <MasterCTA type={\"button\"}>Next</MasterCTA>\n                        <MasterCTA type={\"button\"}>Get Started!</MasterCTA>\n                    </div>\n                    <div className={\"flex row\"}>\n                    </div>\n                {/* <div>\n                    <h1>Path Finding Algorithm Visualizer</h1>\n                    <h2>What is A Path Finding Algorithm?</h2>\n                    <div className={\"img center\"}><img src={require('../../images/pathfinding.png')} /></div>\n                    <p>Imagine you are a driver for a ride share company. You wouldn't want to be driving in circles trying to get to your final destination, right? You would waste so much time and gas! </p>\n                    <p>At its core, a pathfinding algorithm seeks to find the shortest path between two points. This application visualizes various pathfinding algorithms in action, and more!</p>\n                </div>\n\n                <div>\n                    <h2>Meet The Algorithms</h2>\n                    <h3>Some Algorithms are more efficient than others!</h3>\n                    <ul><span>A* Search</span> (weighted): arguably the best algorithm; guarentee's the shortest path. </ul>\n                    <ul><span>Dijkstra's Algorithm</span> (weighted): the father of algorithms; It will guarentee the shortest path. </ul>\n                    <ul><span>Bredth First Search</span> (unweighted): dijkstra's carefree brother; gaurentee's the shortest path, but does not care about weights. </ul>\n                    <ul><span>Depth First Search</span> (unweighted): the under achieving algorithm; It will not gaurentee the shortest path! </ul>\n                </div>\n                <div>\n                    <h3>Items</h3>\n                    <p>you can add and remove items from the grid. Items make it a bit trickier for the algorithm to search by adding conditions that the algorithm needs to consider. Below are descriptions of the items:</p>\n                    <ul>\n                        <li><FontAwesomeIcon className={\"yellow\"} icon=\"square\" />/<FontAwesomeIcon className={\"yellow\"} icon=\"square\" /> <span> Visiting To Calculate Distance</span>: Like when your GPS is taking time to calculate the best route.</li>\n                        <li><FontAwesomeIcon className={\"orange\"} icon=\"square\" /><span> Optimized Path</span>: GPS has calculated the best route!</li>\n                        <li><FontAwesomeIcon icon=\"car\" /><span> Your Starting Place</span></li>\n                        <li><FontAwesomeIcon icon=\"flag\" /><span> The Ending Place</span></li>\n                        <li><FontAwesomeIcon icon=\"street-view\" /><span>Additional Destination</span>: You need to pickup another passenger before going to the end, like sharing a ride to the same place.</li>\n                        <li><FontAwesomeIcon icon=\"square\" /><span>Wall</span>: You cannot drive through this, it is blocked off!</li>\n                        <li><FontAwesomeIcon icon=\"weight-hanging\" /><span>Weight</span>: It takes more time to drive through this, imagine heavy traffic.</li>\n\n                    </ul>\n                </div>\n                <div>\n                    <h2>Getting Started</h2>\n                    <ul>\n                        <li>Choose an algorithm (A* is chosen by default)</li>\n                        <li>Add an Item to the Grid (If you want)</li>\n                        <li>Press play!</li>\n                    </ul>\n                </div> */}\n\n\n            </Card>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}