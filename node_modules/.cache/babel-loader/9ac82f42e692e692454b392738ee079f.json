{"ast":null,"code":"import * as nodeActions from \"../actions/types/node-types\";\nconst INITIAL_STATE = {\n  start_coordinates: [2, 2],\n  end_coordinates: [3, 3],\n  additional_destination_coordinates: [[]],\n  wall_coordinates: [],\n  weight_coordinates: [[]]\n};\nexport default function reducer(state = INITIAL_STATE, action) {\n  if (action.type === nodeActions.MOVED_START) {\n    return { ...state,\n      start_coordinates: action.payload.start_coordinates\n    };\n  }\n\n  if (action.type === nodeActions.MOVED_END) {\n    return { ...state,\n      end_coordinates: action.payload.end_coordinates\n    };\n  }\n\n  if (action.type === nodeActions.ADDED_WALL) {\n    // console.log(\"wall_coordinates: \", action.payload.added_wall_coordinates, \"state \",...state.wall_coordinates].push(action.payload.added_wall_coordinates))\n    return { ...state,\n      wall_coordinates: [...state.wall_coordinates, action.payload.added_wall_coordinates]\n    };\n  }\n\n  if (action.type === nodeActions.REMOVED_WALL) {\n    let index = -1;\n    console.log(state.wall_coordinates);\n\n    for (let i = 0; i < state.wall_coordinates.length; i++) {\n      if (state.wall_coordinates[i][0] == action.payload.removed_wall_coordinates[0] && state.wall_coordinates[i][1] == action.payload.removed_wall_coordinates[1]) {\n        index = i;\n        break;\n      }\n    } // var index = state.wall_coordinates.indexOf(action.payload.removed_wall_coordinates);\n\n\n    console.log(\"index: \", index);\n    return { ...state,\n      wall_coordinates: [...state.wall_coordinates.filter(coordinates => coordinates[0] != action.payload.removed_wall_coordinates[0] && coordinates[1] != action.payload.removed_wall_coordinates[1])]\n    };\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/redux/reducers/node-reducer.js"],"names":["nodeActions","INITIAL_STATE","start_coordinates","end_coordinates","additional_destination_coordinates","wall_coordinates","weight_coordinates","reducer","state","action","type","MOVED_START","payload","MOVED_END","ADDED_WALL","added_wall_coordinates","REMOVED_WALL","index","console","log","i","length","removed_wall_coordinates","filter","coordinates"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,6BAA7B;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,iBAAiB,EAAE,CAAC,CAAD,EAAI,CAAJ,CADD;AAElBC,EAAAA,eAAe,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFC;AAGlBC,EAAAA,kCAAkC,EAAE,CAAC,EAAD,CAHlB;AAIlBC,EAAAA,gBAAgB,EAAE,EAJA;AAKlBC,EAAAA,kBAAkB,EAAE,CAAC,EAAD;AALF,CAAtB;AASA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGP,aAAzB,EAAwCQ,MAAxC,EAAgD;AAE3D,MAAIA,MAAM,CAACC,IAAP,KAAgBV,WAAW,CAACW,WAAhC,EAA6C;AACzC,WAAO,EAAE,GAAGH,KAAL;AAAYN,MAAAA,iBAAiB,EAAEO,MAAM,CAACG,OAAP,CAAeV;AAA9C,KAAP;AACH;;AACD,MAAIO,MAAM,CAACC,IAAP,KAAgBV,WAAW,CAACa,SAAhC,EAA2C;AACvC,WAAO,EAAE,GAAGL,KAAL;AAAYL,MAAAA,eAAe,EAAEM,MAAM,CAACG,OAAP,CAAeT;AAA5C,KAAP;AACH;;AAED,MAAGM,MAAM,CAACC,IAAP,KAAgBV,WAAW,CAACc,UAA/B,EACA;AACI;AACA,WAAO,EAAC,GAAGN,KAAJ;AAAWH,MAAAA,gBAAgB,EAAE,CAAC,GAAGG,KAAK,CAACH,gBAAV,EAA4BI,MAAM,CAACG,OAAP,CAAeG,sBAA3C;AAA7B,KAAP;AACH;;AAED,MAAGN,MAAM,CAACC,IAAP,KAAgBV,WAAW,CAACgB,YAA/B,EACA;AAEI,QAAIC,KAAK,GAAG,CAAC,CAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACH,gBAAlB;;AACA,SAAI,IAAIe,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGZ,KAAK,CAACH,gBAAN,CAAuBgB,MAA1C,EAAkDD,CAAC,EAAnD,EAAsD;AAClD,UAAGZ,KAAK,CAACH,gBAAN,CAAuBe,CAAvB,EAA0B,CAA1B,KAAgCX,MAAM,CAACG,OAAP,CAAeU,wBAAf,CAAwC,CAAxC,CAAhC,IAA6Ed,KAAK,CAACH,gBAAN,CAAuBe,CAAvB,EAA0B,CAA1B,KAAgCX,MAAM,CAACG,OAAP,CAAeU,wBAAf,CAAwC,CAAxC,CAAhH,EACA;AACIL,QAAAA,KAAK,GAAGG,CAAR;AACA;AACH;AAEJ,KAXL,CAaI;;;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB;AACA,WAAO,EAAC,GAAGT,KAAJ;AAAWH,MAAAA,gBAAgB,EAAE,CAAC,GAAGG,KAAK,CAACH,gBAAN,CAAuBkB,MAAvB,CAA+BC,WAAD,IAAkBA,WAAW,CAAC,CAAD,CAAX,IAAkBf,MAAM,CAACG,OAAP,CAAeU,wBAAf,CAAwC,CAAxC,CAAnB,IAAmEE,WAAW,CAAC,CAAD,CAAX,IAAkBf,MAAM,CAACG,OAAP,CAAeU,wBAAf,CAAwC,CAAxC,CAApI,CAAJ;AAA7B,KAAP;AACH;;AACD,SAAOd,KAAP;AACH","sourcesContent":["import * as nodeActions from \"../actions/types/node-types\";\n\nconst INITIAL_STATE = {\n    start_coordinates: [2, 2],\n    end_coordinates: [3, 3],\n    additional_destination_coordinates: [[]],\n    wall_coordinates: [],\n    weight_coordinates: [[]],\n\n}\n\nexport default function reducer(state = INITIAL_STATE, action) {\n\n    if (action.type === nodeActions.MOVED_START) {\n        return { ...state, start_coordinates: action.payload.start_coordinates }\n    }\n    if (action.type === nodeActions.MOVED_END) {\n        return { ...state, end_coordinates: action.payload.end_coordinates };\n    }\n\n    if(action.type === nodeActions.ADDED_WALL)\n    {\n        // console.log(\"wall_coordinates: \", action.payload.added_wall_coordinates, \"state \",...state.wall_coordinates].push(action.payload.added_wall_coordinates))\n        return {...state, wall_coordinates: [...state.wall_coordinates, action.payload.added_wall_coordinates]}\n    }\n\n    if(action.type === nodeActions.REMOVED_WALL)\n    {\n        \n        let index = -1;\n        console.log(state.wall_coordinates);\n        for(let i = 0; i < state.wall_coordinates.length; i++){\n            if(state.wall_coordinates[i][0] == action.payload.removed_wall_coordinates[0]&& state.wall_coordinates[i][1] == action.payload.removed_wall_coordinates[1])\n            {\n                index = i;\n                break;\n            }\n            \n        }\n\n        // var index = state.wall_coordinates.indexOf(action.payload.removed_wall_coordinates);\n        console.log(\"index: \", index)\n        return {...state, wall_coordinates: [...state.wall_coordinates.filter((coordinates) => (coordinates[0] != action.payload.removed_wall_coordinates[0]) && (coordinates[1] != action.payload.removed_wall_coordinates[1]))]};\n    }\n    return state\n}"]},"metadata":{},"sourceType":"module"}