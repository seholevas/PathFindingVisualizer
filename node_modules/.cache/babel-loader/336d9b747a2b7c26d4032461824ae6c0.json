{"ast":null,"code":"import store from \"../../redux/stores/store\";\nimport { dispatchedChangedNodeType } from \"../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\nimport { getValueByElementId } from \"../functions/get-value-by-element-id\";\nimport * as nodeDispatchs from \"../../redux/dispatchs/node-dispatchs\";\nexport default function updateNodeType(id = \"\") {\n  let node_type = getValueByElementId(\"node-types\");\n  let coordinates = id.split(\"-\");\n  let grid = store.getState().grid;\n  let node = grid[coordinates[0]][coordinates[1]];\n\n  if (node[\"type\"] === node_type) {\n    node[\"type\"] = \"empty_node\";\n\n    switch (node_type) {\n      case \"wall_node\":\n        dispatchedAddedWall(coordinates);\n    }\n  } else if (node[\"type\"] !== \"start_node\" && node[\"type\"] !== \"end_node\") {\n    node[\"type\"] = node_type;\n\n    switch (node_type) {\n      case \"wall_node\":\n        dispatchedRemovedWall(coordinates);\n    }\n  }\n\n  grid[coordinates[0]][coordinates[1]] = node;\n  const copy = shallowCopy(grid);\n  dispatchedChangedNodeType(copy);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/dom-helpers/update-node-type.js"],"names":["store","dispatchedChangedNodeType","shallowCopy","getValueByElementId","nodeDispatchs","updateNodeType","id","node_type","coordinates","split","grid","getState","node","dispatchedAddedWall","dispatchedRemovedWall","copy"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,0BAAlB;AACA,SAASC,yBAAT,QAA0C,sCAA1C;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,SAASC,mBAAT,QAAoC,sCAApC;AACA,OAAO,KAAKC,aAAZ,MAA+B,sCAA/B;AAEA,eAAe,SAASC,cAAT,CAAwBC,EAAE,GAAG,EAA7B,EAAiC;AAC5C,MAAIC,SAAS,GAAGJ,mBAAmB,CAAC,YAAD,CAAnC;AACA,MAAIK,WAAW,GAAGF,EAAE,CAACG,KAAH,CAAS,GAAT,CAAlB;AACA,MAAIC,IAAI,GAAGV,KAAK,CAACW,QAAN,GAAiBD,IAA5B;AACA,MAAIE,IAAI,GAAGF,IAAI,CAACF,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAX;;AAEA,MAAII,IAAI,CAAC,MAAD,CAAJ,KAAiBL,SAArB,EAAgC;AAC5BK,IAAAA,IAAI,CAAC,MAAD,CAAJ,GAAe,YAAf;;AAEA,YAAOL,SAAP;AAEI,WAAK,WAAL;AACIM,QAAAA,mBAAmB,CAACL,WAAD,CAAnB;AAHR;AAKH,GARD,MASK,IAAII,IAAI,CAAC,MAAD,CAAJ,KAAiB,YAAjB,IAAiCA,IAAI,CAAC,MAAD,CAAJ,KAAiB,UAAtD,EAAkE;AACnEA,IAAAA,IAAI,CAAC,MAAD,CAAJ,GAAeL,SAAf;;AAEA,YAAOA,SAAP;AAEI,WAAK,WAAL;AACIO,QAAAA,qBAAqB,CAACN,WAAD,CAArB;AAHR;AAKH;;AAEDE,EAAAA,IAAI,CAACF,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,IAAuCI,IAAvC;AACA,QAAMG,IAAI,GAAGb,WAAW,CAACQ,IAAD,CAAxB;AACAT,EAAAA,yBAAyB,CAACc,IAAD,CAAzB;AACH","sourcesContent":["import store from \"../../redux/stores/store\";\nimport { dispatchedChangedNodeType } from \"../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\nimport { getValueByElementId } from \"../functions/get-value-by-element-id\";\nimport * as nodeDispatchs from \"../../redux/dispatchs/node-dispatchs\";\n\nexport default function updateNodeType(id = \"\") {\n    let node_type = getValueByElementId(\"node-types\");\n    let coordinates = id.split(\"-\");\n    let grid = store.getState().grid;\n    let node = grid[coordinates[0]][coordinates[1]]\n\n    if (node[\"type\"] === node_type) {\n        node[\"type\"] = \"empty_node\";\n\n        switch(node_type)\n        {\n            case \"wall_node\":\n                dispatchedAddedWall(coordinates);\n        }\n    }\n    else if (node[\"type\"] !== \"start_node\" && node[\"type\"] !== \"end_node\") {\n        node[\"type\"] = node_type;\n\n        switch(node_type)\n        {\n            case \"wall_node\":\n                dispatchedRemovedWall(coordinates);\n        }\n    }\n\n    grid[coordinates[0]][coordinates[1]] = node;\n    const copy = shallowCopy(grid)\n    dispatchedChangedNodeType(copy);\n}"]},"metadata":{},"sourceType":"module"}