{"ast":null,"code":"import { getValueByElementId } from \"../functions/get-value-by-element-id\";\nimport generateMatrix from \"../2d-array-functions/generate-matrix\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\nimport { dispatchedClearMatrix } from \"../../redux/dispatchs/grid-dispatchs\";\nimport store from \"../../redux/stores/store\";\nimport { dispatchedRemovedAdditionalDestination, dispatchedRemovedWeight, dispatchedRemovedWall, dispatchedMovedStart, dispatchedAddedWall } from \"../../redux/dispatchs/node-dispatchs\";\nexport function clearMatrix(isClearAll = true) {\n  // const size_of_matrix = getValueByElementId(\"size\");\n  const grid_size = store.getState().grid.length;\n  const matrix = generateMatrix(grid_size);\n  const shallow_copy = shallowCopy(matrix);\n  const start = store.getState().nodes.start_coordinates;\n  const end = store.getState().nodes.end_coordinates;\n\n  if (start[0] < grid_size - 1 && start[1] < grid_size - 1) {\n    shallow_copy[start[0]][start[1]] = {\n      type: \"start_node\",\n      visited: false,\n      shortest_path: false\n    };\n  } else {\n    dispatchedMovedStart([grid_size - 2, grid_size - 2]);\n    shallow_copy[grid_size - 2][grid_size - 2] = {\n      type: \"start_node\",\n      visited: false,\n      shortest_path: false\n    };\n  }\n\n  if (end[0] < grid_size - 1 && end[1] < grid_size - 1) {\n    shallow_copy[end[0]][end[1]] = {\n      type: \"end_node\",\n      visited: false,\n      shortest_path: false\n    };\n  } else {\n    dispatchedMovedEnd([grid_size - 1, grid_size - 1]);\n    shallow_copy[grid_size - 1][grid_size - 1] = {\n      type: \"end_node\",\n      visited: false,\n      shortest_path: false\n    };\n  }\n\n  if (!isClearAll) {\n    const weights = store.getState().nodes.weight_coordinates;\n    const additional_locations = store.getState().nodes.additional_destination_coordinates;\n    const walls = store.getState().nodes.wall_coordinates;\n\n    for (let i = 0; i < additional_locations.length; i++) {\n      let current = additional_locations[i];\n\n      if (current[0] < grid_size && current[1] < grid_size) {\n        shallow_copy[current[0]][current[1]] = {\n          type: \"additional_destination_node\",\n          visited: false,\n          shortest_path: false\n        };\n      } else {\n        dispatchedRemovedAdditionalDestination(current);\n      }\n    }\n\n    for (let i = 0; i < weights.length; i++) {\n      let current = weights[i];\n\n      if (current[0] < grid_size && current[1] < grid_size) {\n        shallow_copy[current[0]][current[1]] = {\n          type: \"weight_node\",\n          visited: false,\n          shortest_path: false\n        };\n      } else {\n        dispatchedRemovedWeight(current);\n      }\n    }\n\n    for (let i = 0; i < walls.length; i++) {\n      let current = walls[i];\n\n      if (current[0] < grid_size && current[1] < grid_size) {\n        shallow_copy[current[0]][current[1]] = {\n          type: \"wall_node\",\n          visited: false,\n          shortest_path: false\n        };\n      } else {\n        dispatchedRemovedWall(current);\n      }\n    }\n  }\n\n  dispatchedMovedStart();\n  dispatchedClearMatrix(shallow_copy); // dispatchedChangedNodeType(matrix)\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/state-functions/clear-matrix.js"],"names":["getValueByElementId","generateMatrix","shallowCopy","dispatchedClearMatrix","store","dispatchedRemovedAdditionalDestination","dispatchedRemovedWeight","dispatchedRemovedWall","dispatchedMovedStart","dispatchedAddedWall","clearMatrix","isClearAll","grid_size","getState","grid","length","matrix","shallow_copy","start","nodes","start_coordinates","end","end_coordinates","type","visited","shortest_path","dispatchedMovedEnd","weights","weight_coordinates","additional_locations","additional_destination_coordinates","walls","wall_coordinates","i","current"],"mappings":"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","sourcesContent":["import { getValueByElementId } from \"../functions/get-value-by-element-id\";\nimport generateMatrix from \"../2d-array-functions/generate-matrix\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\nimport { dispatchedClearMatrix } from \"../../redux/dispatchs/grid-dispatchs\";\nimport store from \"../../redux/stores/store\";\nimport { dispatchedRemovedAdditionalDestination, dispatchedRemovedWeight, dispatchedRemovedWall, dispatchedMovedStart, dispatchedAddedWall } from \"../../redux/dispatchs/node-dispatchs\";\n\nexport function clearMatrix(isClearAll = true) {\n    // const size_of_matrix = getValueByElementId(\"size\");\n    const grid_size = store.getState().grid.length;\n    const matrix = generateMatrix(grid_size);\n    const shallow_copy = shallowCopy(matrix);\n    const start = store.getState().nodes.start_coordinates;\n    const end = store.getState().nodes.end_coordinates;\n\n\n    if ((start[0] < grid_size-1) && (start[1] < grid_size-1)) {\n        shallow_copy[start[0]][start[1]] = { type: \"start_node\", visited: false, shortest_path: false };\n    }\n    else {\n        dispatchedMovedStart([grid_size-2, grid_size-2])\n        shallow_copy[grid_size-2][grid_size-2] = { type: \"start_node\", visited: false, shortest_path: false };\n    }\n    if (end[0] < grid_size-1 && end[1] < grid_size-1) {\n        shallow_copy[end[0]][end[1]] = { type: \"end_node\", visited: false, shortest_path: false };\n    }\n    else {\n        dispatchedMovedEnd([grid_size-1, grid_size-1])\n        shallow_copy[grid_size-1][grid_size-1] = { type: \"end_node\", visited: false, shortest_path: false };\n        \n    }\n\n    if (!isClearAll) {\n        const weights = store.getState().nodes.weight_coordinates;\n        const additional_locations = store.getState().nodes.additional_destination_coordinates;\n        const walls = store.getState().nodes.wall_coordinates;\n        \n        for (let i = 0; i < additional_locations.length; i++) {\n            let current = additional_locations[i]\n            if (current[0] < grid_size && current[1] < grid_size) {\n                shallow_copy[current[0]][current[1]] = { type: \"additional_destination_node\", visited: false, shortest_path: false };\n            }\n            else\n            {\n                dispatchedRemovedAdditionalDestination(current);    \n            }\n        }\n        \n        for (let i = 0; i < weights.length; i++) {\n            let current = weights[i]\n            if (current[0] < grid_size && current[1] < grid_size) {\n                shallow_copy[current[0]][current[1]] = { type: \"weight_node\", visited: false, shortest_path: false };\n            }\n            else\n            {\n                dispatchedRemovedWeight(current);\n            }\n        }\n\n\n\n        for (let i = 0; i < walls.length; i++) {\n            let current = walls[i]\n            if (current[0] < grid_size && current[1] < grid_size) {\n                shallow_copy[current[0]][current[1]] = { type: \"wall_node\", visited: false, shortest_path: false };\n            }\n            else\n            {\n                dispatchedRemovedWall(current);\n            }\n        }\n\n\n    }\n\n    dispatchedMovedStart()\n    dispatchedClearMatrix(shallow_copy);\n    // dispatchedChangedNodeType(matrix)\n}"]},"metadata":{},"sourceType":"module"}