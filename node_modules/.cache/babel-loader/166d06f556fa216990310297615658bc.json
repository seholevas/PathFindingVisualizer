{"ast":null,"code":"import _toConsumableArray from\"/home/steven/SWE/Code/path-finding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";export default function getShortestPath(){var end_node_coordinates=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var parent_coordinates_matrix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[[]];var path=[];var row=end_node_coordinates[0];var column=end_node_coordinates[1];var current=parent_coordinates_matrix[row][column];if(current===null){return;}path.push(end_node_coordinates);do{path.push(current);row=current[0];column=current[1];current=parent_coordinates_matrix[row][column];}while(current!==null);path=path.reverse();// for (let i = 0; i < path.length; i++) {\n//     yield path[i];\n// }\nreturn _toConsumableArray(path);}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/helpers/matrix-helpers/setters-and-getters/get-shortest-path.js"],"names":["getShortestPath","end_node_coordinates","parent_coordinates_matrix","path","row","column","current","push","reverse"],"mappings":"4KAAA,cAAe,SAASA,CAAAA,eAAT,EAAsF,IAA7DC,CAAAA,oBAA6D,2DAAtC,EAAsC,IAAlCC,CAAAA,yBAAkC,2DAAN,CAAC,EAAD,CAAM,CACjG,GAAIC,CAAAA,IAAI,CAAG,EAAX,CACA,GAAIC,CAAAA,GAAG,CAAGH,oBAAoB,CAAC,CAAD,CAA9B,CACA,GAAII,CAAAA,MAAM,CAAGJ,oBAAoB,CAAC,CAAD,CAAjC,CACA,GAAIK,CAAAA,OAAO,CAAGJ,yBAAyB,CAACE,GAAD,CAAzB,CAA+BC,MAA/B,CAAd,CAEA,GAAGC,OAAO,GAAK,IAAf,CACA,CACI,OACH,CAEDH,IAAI,CAACI,IAAL,CAAUN,oBAAV,EACA,EACA,CACIE,IAAI,CAACI,IAAL,CAAUD,OAAV,EACAF,GAAG,CAAGE,OAAO,CAAC,CAAD,CAAb,CACAD,MAAM,CAAGC,OAAO,CAAC,CAAD,CAAhB,CACAA,OAAO,CAAGJ,yBAAyB,CAACE,GAAD,CAAzB,CAA+BC,MAA/B,CAAV,CACH,CAND,MAOOC,OAAO,GAAK,IAPnB,EAQAH,IAAI,CAAGA,IAAI,CAACK,OAAL,EAAP,CACA;AACA;AACA;AACA,0BAAWL,IAAX,EAEH","sourcesContent":["export default function getShortestPath(end_node_coordinates = [], parent_coordinates_matrix = [[]]) {\n    let path = []\n    let row = end_node_coordinates[0];\n    let column = end_node_coordinates[1]\n    let current = parent_coordinates_matrix[row][column];\n    \n    if(current === null)\n    {\n        return;\n    }\n\n    path.push(end_node_coordinates);\n    do \n    {\n        path.push(current);\n        row = current[0]\n        column = current[1]\n        current = parent_coordinates_matrix[row][column];\n    }\n    while (current !== null)\n    path = path.reverse();\n    // for (let i = 0; i < path.length; i++) {\n    //     yield path[i];\n    // }\n    return [...path];\n\n}"]},"metadata":{},"sourceType":"module"}