{"ast":null,"code":"import shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\nimport { checkNeighbors } from \"./helpers/matrix-helpers/async-helpers/check-neighbors\"; // import { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\n\nimport { PriorityQueue } from \"../data-structures/priority-queue\";\nimport { updatetoVisited } from \"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";\nimport getShortestPath from \"./helpers/matrix-helpers/setters-and-getters/get-shortest-path\"; // import { updateDistance } from \"./helpers/matrix-helpers/setters-and-getters/update-distance\";\n\nimport { calculateWeight } from \"./helpers/matrix-helpers/setters-and-getters/calculate-weight\";\nimport { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\nimport { updateDistance } from \"./helpers/matrix-helpers/setters-and-getters/update-distance\";\nexport default function* aStar(matrix = [[]], start = [0, 0], end = [3, 3], additional_destinations = {}, walls = {}, weights = {}) {\n  let found = false;\n  let start_coordinates = [...start];\n  let end_coordinates = [...end];\n  var priority_queue = new PriorityQueue();\n  let additional_dest = Object.assign({}, additional_destinations);\n  let visited_coordinates = [];\n  let path = [];\n  let parent_matrix = shallowCopy(matrix, null);\n  let visited = shallowCopy(matrix, false);\n  let distance_matrix = shallowCopy(matrix, Infinity);\n  distance_matrix[start_coordinates[0]][start_coordinates[1]] = 0;\n  priority_queue.enqueue([...start_coordinates], manhattanDistance(start_coordinates, end_coordinates));\n\n  while (!priority_queue.isEmpty() && !found) {\n    let q_item = priority_queue.dequeue(); // let f_cost = tuple[0];\n\n    let current_coordinates = q_item.element;\n    updatetoVisited(current_coordinates, visited);\n    visited_coordinates.push(current_coordinates);\n\n    if (Object.keys(additional_dest).length !== 0) {\n      console.log(\"hello\");\n    }\n\n    if (current_coordinates[0] === end_coordinates[0] && current_coordinates[1] === end_coordinates[1] && Object.keys(additional_dest).length === 0) {\n      found = true;\n    } // yield [...current_coordinates];\n    // if(coordinatesAreEqual(current_coordinates,end_coordinates))\n    // {\n    //     break;\n    // }\n\n\n    const generator = checkNeighbors(current_coordinates, visited);\n    let result = generator.next();\n\n    while (!result.done && !found) {\n      let neighbor_coordinates = result.value;\n      let have_visited = visited[neighbor_coordinates[0]][neighbor_coordinates[1]]; // EDIT: needs to change once weight and walls are added in.\n\n      let cost_from_current_node = calculateWeight(distance_matrix[current_coordinates[0]][current_coordinates[1]], neighbor_coordinates, weights);\n      let f_cost = cost_from_current_node + manhattanDistance(neighbor_coordinates, end_coordinates); // cost_from_current_node + manhattanDistance(neighbor_coordinates, end_coordinates) \n\n      let is_current_cost_less = f_cost < distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]];\n      let is_neighbor_in_priority_queue = priority_queue.items.includes([f_cost, neighbor_coordinates]); // if (!have_visited && is_neighbor_in_priority_queue && is_current_cost_less) {\n      //     const index = priority_queue.items.indexOf([f_cost, neighbor_coordinates]);\n      //     priority_queue.items.splice(index);\n      // }\n\n      if (!have_visited && is_current_cost_less && !is_neighbor_in_priority_queue && walls[neighbor_coordinates] === undefined) {\n        // update the distance of the neighbor_node\n        updateDistance(f_cost, neighbor_coordinates, distance_matrix); // distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] = cost_from_current_node;\n        // update the parent node of the neighbor node to the current node\n\n        updateParent(current_coordinates, neighbor_coordinates, parent_matrix);\n        priority_queue.enqueue(neighbor_coordinates, calculateWeight(manhattanDistance(neighbor_coordinates, end_coordinates), neighbor_coordinates, weights));\n      }\n\n      result = generator.next();\n    }\n  }\n\n  yield visited_coordinates; // could be undefined or a path\n\n  let undefined_or_path = getShortestPath(end_coordinates, parent_matrix); // if it is undefined, return undefined (void)\n\n  if (undefined_or_path === undefined) {\n    return;\n  }\n\n  path = undefined_or_path.concat(path);\n  yield path; // yield getShortestPath(end_coordinates, parent_matrix);\n  // yield* traverseShortestPath(end_coordinates,parent_matrix);\n} // export default function* aStar(matrix = [[]], start = [0, 0], end = [3, 3], additional_destinations = {}, walls = {}, weights = {}) {\n//     let start_coordinates = [...start];\n//     let end_coordinates = [...end];\n//     let path = []\n//     let visited_coordinates = []\n//     let priority_queue = new PriorityQueue();\n//     let closed_set = {}\n//     let parent_matrix = shallowCopy(matrix, null);\n//     let visited = shallowCopy(matrix, false);\n//     let g_cost = shallowCopy(matrix, Infinity);\n//     let h_cost = shallowCopy(matrix, Infinity);\n//     let f_cost = shallowCopy(matrix, Infinity);\n//     visited[start[0]][start[1]] = true;\n//     g_cost[start[0]][start[1]] = 0;\n//     h_cost[start[0]][start[1]] = manhattanDistance(start_coordinates, end_coordinates);\n//     f_cost[start[0]][start[1]] = g_cost[start[0]][start[1]] + h_cost[start[0]][start[1]];\n//     priority_queue.enqueue(start_coordinates, f_cost[start[0]][start[1]])\n//     while (!priority_queue.isEmpty()) {\n//         let current = priority_queue.dequeue().element;\n//         visited_coordinates.push(current);\n//         updatetoVisited(current,visited);\n//         if(visited[current[0]][current[1]] && current[0] !== start[0] && current[1] !== start[1])\n//         {\n//             continue\n//         }\n//         const generator = checkNeighbors(current, visited);\n//         let result = generator.next()\n//         while (!result.done) {\n//             let neighbor = result.value;\n//             let temp_g = calculateWeight(g_cost[current[0]][current[1]], neighbor, weights);\n//             let temp_h = manhattanDistance(neighbor, end_coordinates);\n//             let temp_f = temp_g + temp_h;\n//             // if((closed_set[neighbor] !== undefined))\n//             // {\n//             //     console.log(\"in if\")\n//             //     delete closed_set[neighbor];\n//             //     let index = priority_queue.items.indexOf([f_cost, neighbor])\n//             //     console.log(\"index of removed item: \", index)\n//             //     priority_queue.items.splice(index,1);\n//             // }\n//             if(temp_f < f_cost[neighbor[0]][neighbor[1]])\n//                 {\n//                 updateDistance(temp_g, neighbor, g_cost);\n//                 updateDistance(temp_h, neighbor, h_cost);\n//                 updateDistance(temp_f, neighbor, f_cost);\n//                 updateParent(current, neighbor, parent_matrix)\n//                 priority_queue.enqueue(neighbor,f_cost);\n//             }\n//             result = generator.next();\n//         }\n//     }\n//     console.log(f_cost);\n//     yield visited_coordinates\n//     yield getShortestPath(end,parent_matrix);\n// }\n\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n  return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1]);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/a-star.js"],"names":["shallowCopy","checkNeighbors","PriorityQueue","updatetoVisited","getShortestPath","calculateWeight","updateParent","updateDistance","aStar","matrix","start","end","additional_destinations","walls","weights","found","start_coordinates","end_coordinates","priority_queue","additional_dest","Object","assign","visited_coordinates","path","parent_matrix","visited","distance_matrix","Infinity","enqueue","manhattanDistance","isEmpty","q_item","dequeue","current_coordinates","element","push","keys","length","console","log","generator","result","next","done","neighbor_coordinates","value","have_visited","cost_from_current_node","f_cost","is_current_cost_less","is_neighbor_in_priority_queue","items","includes","undefined","undefined_or_path","concat","coordinates1","coordinates2","Math","abs"],"mappings":"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","sourcesContent":["import shallowCopy from \"../helpers/2d-array-functions/shallow-copy\"\nimport { checkNeighbors } from \"./helpers/matrix-helpers/async-helpers/check-neighbors\";\n// import { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\nimport { PriorityQueue } from \"../data-structures/priority-queue\"\nimport { updatetoVisited } from \"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";\nimport getShortestPath from \"./helpers/matrix-helpers/setters-and-getters/get-shortest-path\";\n// import { updateDistance } from \"./helpers/matrix-helpers/setters-and-getters/update-distance\";\nimport { calculateWeight } from \"./helpers/matrix-helpers/setters-and-getters/calculate-weight\";\nimport { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\nimport { updateDistance } from \"./helpers/matrix-helpers/setters-and-getters/update-distance\";\n\nexport default function* aStar(matrix = [[]], start = [0, 0], end = [3, 3], additional_destinations ={}, walls={}, weights={}) {\n    let found = false;\n    let start_coordinates =[...start]\n    let end_coordinates = [...end]\n    var priority_queue = new PriorityQueue();\n    let additional_dest = Object.assign({}, additional_destinations);\n    let visited_coordinates = [];\n    let path = [];\n    let parent_matrix = shallowCopy(matrix, null);\n    let visited = shallowCopy(matrix, false);\n    let distance_matrix = shallowCopy(matrix, Infinity);\n\n\n    distance_matrix[start_coordinates[0]][start_coordinates[1]] = 0;\n\n    priority_queue.enqueue([...start_coordinates], manhattanDistance(start_coordinates, end_coordinates));\n    while (!priority_queue.isEmpty() && !found) {\n        let q_item = priority_queue.dequeue();\n        // let f_cost = tuple[0];\n        let current_coordinates = q_item.element;\n        updatetoVisited(current_coordinates,visited);\n        visited_coordinates.push(current_coordinates);\n\n        if (Object.keys(additional_dest).length !== 0) {\n            console.log(\"hello\")\n\n        }\n        if (((current_coordinates[0] === end_coordinates[0]) && (current_coordinates[1] === end_coordinates[1])) && Object.keys(additional_dest).length === 0) {\n            found = true;\n        }\n        // yield [...current_coordinates];\n\n        // if(coordinatesAreEqual(current_coordinates,end_coordinates))\n        // {\n        //     break;\n        // }\n\n        const generator = checkNeighbors(current_coordinates, visited);\n        let result = generator.next();\n\n        while (!result.done && !found) {\n            let neighbor_coordinates = result.value\n            let have_visited = visited[neighbor_coordinates[0]][neighbor_coordinates[1]];\n            // EDIT: needs to change once weight and walls are added in.\n            let cost_from_current_node = calculateWeight(distance_matrix[current_coordinates[0]][current_coordinates[1]],neighbor_coordinates,weights);\n\n            let f_cost = cost_from_current_node + manhattanDistance(neighbor_coordinates,end_coordinates);\n            // cost_from_current_node + manhattanDistance(neighbor_coordinates, end_coordinates) \n\n            let is_current_cost_less = f_cost < distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]];\n            let is_neighbor_in_priority_queue = priority_queue.items.includes([f_cost, neighbor_coordinates]);\n\n            // if (!have_visited && is_neighbor_in_priority_queue && is_current_cost_less) {\n            //     const index = priority_queue.items.indexOf([f_cost, neighbor_coordinates]);\n            //     priority_queue.items.splice(index);\n\n            // }\n            if (!have_visited && is_current_cost_less && !is_neighbor_in_priority_queue && walls[neighbor_coordinates] === undefined) {\n                // update the distance of the neighbor_node\n                updateDistance(f_cost,neighbor_coordinates,distance_matrix)\n                // distance_matrix[neighbor_coordinates[0]][neighbor_coordinates[1]] = cost_from_current_node;\n                // update the parent node of the neighbor node to the current node\n                updateParent(current_coordinates, neighbor_coordinates, parent_matrix);\n                priority_queue.enqueue(neighbor_coordinates, calculateWeight(manhattanDistance(neighbor_coordinates,end_coordinates),neighbor_coordinates,weights) )\n            }\n\n            result = generator.next();\n        }\n    }\n    yield visited_coordinates;\n    // could be undefined or a path\n    let undefined_or_path = getShortestPath(end_coordinates, parent_matrix);\n    // if it is undefined, return undefined (void)\n    if (undefined_or_path === undefined) {\n        return;\n    }\n\n    path = undefined_or_path.concat(path);\n\n\n    yield path\n    // yield getShortestPath(end_coordinates, parent_matrix);\n    // yield* traverseShortestPath(end_coordinates,parent_matrix);\n\n\n\n\n}\n\n\n// export default function* aStar(matrix = [[]], start = [0, 0], end = [3, 3], additional_destinations = {}, walls = {}, weights = {}) {\n//     let start_coordinates = [...start];\n//     let end_coordinates = [...end];\n//     let path = []\n//     let visited_coordinates = []\n//     let priority_queue = new PriorityQueue();\n//     let closed_set = {}\n//     let parent_matrix = shallowCopy(matrix, null);\n//     let visited = shallowCopy(matrix, false);\n//     let g_cost = shallowCopy(matrix, Infinity);\n//     let h_cost = shallowCopy(matrix, Infinity);\n//     let f_cost = shallowCopy(matrix, Infinity);\n\n//     visited[start[0]][start[1]] = true;\n//     g_cost[start[0]][start[1]] = 0;\n//     h_cost[start[0]][start[1]] = manhattanDistance(start_coordinates, end_coordinates);\n//     f_cost[start[0]][start[1]] = g_cost[start[0]][start[1]] + h_cost[start[0]][start[1]];\n\n//     priority_queue.enqueue(start_coordinates, f_cost[start[0]][start[1]])\n\n\n//     while (!priority_queue.isEmpty()) {\n        \n//         let current = priority_queue.dequeue().element;\n//         visited_coordinates.push(current);\n//         updatetoVisited(current,visited);\n//         if(visited[current[0]][current[1]] && current[0] !== start[0] && current[1] !== start[1])\n//         {\n//             continue\n//         }\n//         const generator = checkNeighbors(current, visited);\n\n//         let result = generator.next()\n//         while (!result.done) {\n//             let neighbor = result.value;\n//             let temp_g = calculateWeight(g_cost[current[0]][current[1]], neighbor, weights);\n//             let temp_h = manhattanDistance(neighbor, end_coordinates);\n//             let temp_f = temp_g + temp_h;\n\n\n//             // if((closed_set[neighbor] !== undefined))\n//             // {\n//             //     console.log(\"in if\")\n//             //     delete closed_set[neighbor];\n//             //     let index = priority_queue.items.indexOf([f_cost, neighbor])\n//             //     console.log(\"index of removed item: \", index)\n//             //     priority_queue.items.splice(index,1);\n//             // }\n//             if(temp_f < f_cost[neighbor[0]][neighbor[1]])\n//                 {\n//                 updateDistance(temp_g, neighbor, g_cost);\n//                 updateDistance(temp_h, neighbor, h_cost);\n//                 updateDistance(temp_f, neighbor, f_cost);\n//                 updateParent(current, neighbor, parent_matrix)\n//                 priority_queue.enqueue(neighbor,f_cost);\n//             }\n\n//             result = generator.next();\n//         }\n\n//     }\n//     console.log(f_cost);\n//     yield visited_coordinates\n    \n//     yield getShortestPath(end,parent_matrix);\n// }\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n    return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1]);\n}"]},"metadata":{},"sourceType":"module"}