{"ast":null,"code":"import isEqual from \"../helpers/2d-array-functions/is-equal\";\nimport shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\nexport default function* dijkstra(matrix = [[]], source = [7, 7], end = [12, 12]) {\n  yield [...source];\n  let adjacency_matrix = shallowCopy(matrix);\n  let visited = shallowCopy(matrix);\n  let parent_coordinates = shallowCopy(matrix);\n  let coordinates = source;\n  let queue = []; // setting all initial values for the source node within each data structure\n\n  adjacency_matrix[source[0]][source[1]] = 0;\n  coordinates = [source[0], source[1]];\n  visited[source[0]][source[1]] = true;\n  parent_coordinates[source[0]][source[1]] = null;\n  queue.push(coordinates);\n\n  for (let row = 0; row < matrix.length; row++) {\n    for (let col = 0; col < matrix[row].length; col++) {\n      if (!isEqual(source, [row, col])) {\n        parent_coordinates[row][col] = null;\n        adjacency_matrix[row][col] = Infinity;\n        visited[row][col] = false;\n      }\n    }\n  }\n\n  let found = false;\n\n  while (!found) {\n    coordinates = queue.shift();\n    const generator = check_neighbors(coordinates, visited);\n    let result = null;\n\n    do {\n      result = generator.next();\n      var neighbors_coordinates = result.value;\n\n      if (!result.done && !found) {\n        update_distance(adjacency_matrix[coordinates[0]][coordinates[1]], neighbors_coordinates, adjacency_matrix);\n        update_to_visited(neighbors_coordinates, visited);\n        update_parent(coordinates, neighbors_coordinates, parent_coordinates);\n        queue.push(neighbors_coordinates);\n        found = isEqual(neighbors_coordinates, end);\n        yield [...neighbors_coordinates];\n      }\n    } while (!result.done);\n  }\n\n  let path = [];\n  let current = parent_coordinates[end[0]][end[1]];\n\n  do {\n    path.push(current);\n    current = parent_coordinates[current[0]][current[1]];\n  } while (current !== null);\n\n  console.log(\"printing array\");\n  path = path.reverse();\n\n  for (let i = 0; i < path.length; i++) {\n    yield path[i];\n  }\n\n  yield [...end];\n}\n\nfunction update_distance(prev_value, node_location, adjacency_matrix) {\n  let row = node_location[0];\n  let column = node_location[1];\n  if (prev_value < adjacency_matrix[row][column]) adjacency_matrix[row][column] = prev_value + 1;\n}\n\nfunction update_parent(parent_node_location, child_node_location, parent_coordinates) {\n  let row = child_node_location[0];\n  let column = child_node_location[1];\n  parent_coordinates[row][column] = parent_node_location;\n}\n\nfunction* check_neighbors(node_location, visited) {\n  let row = node_location[0];\n  let column = node_location[1];\n  const RIGHT = column + 1;\n  const LEFT = column - 1;\n  const UP = row - 1;\n  const DOWN = row + 1;\n\n  if (RIGHT >= 0 && RIGHT < visited.length && !visited[row][RIGHT]) {\n    yield [row, RIGHT];\n  }\n\n  if (LEFT >= 0 && !visited[row][LEFT]) {\n    yield [row, LEFT];\n  }\n\n  if (UP >= 0 && !visited[UP][column]) {\n    yield [UP, column];\n  }\n\n  if (DOWN >= 0 && DOWN < visited.length && !visited[DOWN][column]) {\n    yield [DOWN, column];\n  }\n}\n\nfunction update_to_visited(node_location, visited) {\n  let row = node_location[0];\n  let col = node_location[1];\n  visited[row][col] = true;\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/dijkstra.js"],"names":["isEqual","shallowCopy","dijkstra","matrix","source","end","adjacency_matrix","visited","parent_coordinates","coordinates","queue","push","row","length","col","Infinity","found","shift","generator","check_neighbors","result","next","neighbors_coordinates","value","done","update_distance","update_to_visited","update_parent","path","current","console","log","reverse","i","prev_value","node_location","column","parent_node_location","child_node_location","RIGHT","LEFT","UP","DOWN"],"mappings":"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","sourcesContent":["import isEqual from \"../helpers/2d-array-functions/is-equal\";\nimport shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\n\n\nexport default function* dijkstra(matrix = [[]], source = [7,7], end = [12, 12]) {\n    yield [...source]\n    let adjacency_matrix = shallowCopy(matrix);\n    let visited = shallowCopy(matrix);\n    let parent_coordinates = shallowCopy(matrix);\n    let coordinates = source;\n    let queue = [];\n\n    // setting all initial values for the source node within each data structure\n    adjacency_matrix[source[0]][source[1]] = 0;\n    coordinates = [source[0], source[1]];\n    visited[source[0]][source[1]] = true;\n    parent_coordinates[source[0]][source[1]] = null;\n    queue.push(coordinates);\n\n\n    for (let row = 0; row < matrix.length; row++) {\n        for (let col = 0; col < matrix[row].length; col++) {\n            if (!isEqual(source, [row, col])) {\n                parent_coordinates[row][col] = null;\n                adjacency_matrix[row][col] = Infinity;\n                visited[row][col] = false;\n            }\n        }\n    }\n\n\n    let found = false;\n    while (!found) {\n        coordinates = queue.shift();\n        const generator = check_neighbors(coordinates, visited);\n        let result = null;\n        do {\n            result = generator.next();\n            var neighbors_coordinates = result.value;\n            if (!result.done && !found) {\n                update_distance(adjacency_matrix[coordinates[0]][coordinates[1]], neighbors_coordinates, adjacency_matrix);\n                update_to_visited(neighbors_coordinates, visited);\n                update_parent(coordinates, neighbors_coordinates, parent_coordinates);\n                queue.push(neighbors_coordinates);\n                found = isEqual(neighbors_coordinates, end);\n                yield [...neighbors_coordinates];\n\n            }\n        }\n        while (!result.done)\n    }\n\n    let path = []\n    let current = parent_coordinates[end[0]][end[1]]\n    do {\n        path.push(current);\n        current = parent_coordinates[current[0]][current[1]];\n    }\n    while (current !== null)\n    console.log(\"printing array\")\n    path = path.reverse();\n    for(let i = 0; i < path.length; i++)\n    {\n        yield path[i];\n    }\n    yield[...end];\n\n}\n\nfunction update_distance(prev_value, node_location, adjacency_matrix) {\n    let row = node_location[0];\n    let column = node_location[1];\n    if (prev_value < adjacency_matrix[row][column])\n        adjacency_matrix[row][column] = prev_value + 1;\n}\n\nfunction update_parent(parent_node_location, child_node_location, parent_coordinates) {\n    let row = child_node_location[0]\n    let column = child_node_location[1]\n    parent_coordinates[row][column] = parent_node_location\n}\n\nfunction* check_neighbors(node_location, visited) {\n    let row = node_location[0];\n    let column = node_location[1];\n    const RIGHT = column + 1;\n    const LEFT = column - 1;\n    const UP = row - 1;\n    const DOWN = row + 1;\n\n    if (RIGHT >= 0 && RIGHT < visited.length && !visited[row][RIGHT]) {\n        yield [row, RIGHT];\n    }\n    if (LEFT >= 0 && !visited[row][LEFT]) {\n        yield [row, LEFT];\n    }\n\n    if (UP >= 0 && !visited[UP][column]) {\n        yield [UP, column];\n    }\n    if (DOWN >= 0 && DOWN < visited.length && !visited[DOWN][column]) {\n        yield [DOWN, column];\n    }\n\n}\n\nfunction update_to_visited(node_location, visited) {\n    let row = node_location[0];\n    let col = node_location[1];\n    visited[row][col] = true;\n}"]},"metadata":{},"sourceType":"module"}