{"ast":null,"code":"import { getValueByElementId } from \"../helpers/functions/get-value-by-element-id\";\nimport store from \"../redux/stores/store\";\nimport dijkstra from \"../algorithms/dijkstra\";\nimport { changeNodeToVisited, changeNodeToShortestPath } from \"../helpers/state-functions/update-node-state\";\nimport { dispatchedChangedNodeType } from \"../redux/dispatchs/grid-dispatchs\";\nimport { sleep } from \"../helpers/async-functions/sleep\";\nimport { dispatchedStartedSearch, dispatchedStoppedSearch } from \"../redux/dispatchs/settings-dispatchs\";\nimport { breadthFirstSearch } from \"./breadth-first-search\";\nimport depthFirstSearch from \"./depth-first-search\";\nimport aStar from \"./a-star\";\n\nfunction getAlgorithm(array = [[]], type = \"mergesort\", start_coordinates, end_coordinates) {\n  if (type === \"a*\") {\n    return aStar(array, start_coordinates, end_coordinates, additional_destinations, walls, weights);\n  } else if (type === \"bfs\") {\n    return breadthFirstSearch(array, start_coordinates, end_coordinates, additional_destinations, walls, weights);\n  } else if (type === \"dfs\") {\n    return depthFirstSearch(array, start_coordinates, end_coordinates, additional_destinations, walls, weights);\n  } else if (type === \"dijkstra\") {\n    return dijkstra(array, start_coordinates, end_coordinates, additional_destinations, walls, weights);\n  } // else if (type === \"insertionsort\") {\n  //     return InsertionSort(array);\n  // }\n  // else if (type === \"quicksort\") {\n  //     return QuickSort(array, 0, array.length - 1);\n  // }\n  // else if (type === \"cocktailsort\") {\n  // }\n\n}\n\nexport default async function startPathFinding() {\n  var array = store.getState().grid;\n  let playing = store.getState().settings;\n  let start_coordinates = store.getState().nodes.start_coordinates;\n  let end_coordinates = store.getState().nodes.end_coordinates;\n\n  if (playing) {\n    return;\n  }\n\n  dispatchedStartedSearch();\n  playing = await store.getState().settings; // console.log(\"playing: \", playing);\n  // console.log(\"grid: \", array);\n\n  const pathFindingType = getValueByElementId(\"algorithms\");\n  const generator = getAlgorithm(array, pathFindingType, start_coordinates, end_coordinates);\n  let visited_nodes = generator.next().value;\n  let shortest_path_nodes = generator.next().value;\n  var i = 0;\n\n  while (playing && i < visited_nodes.length) {\n    let copy_matrix = changeNodeToVisited(visited_nodes[i], array);\n    dispatchedChangedNodeType(copy_matrix);\n    playing = await store.getState().settings;\n    i++;\n    await sleep(500 / getValueByElementId(\"speed\"));\n  }\n\n  array = store.getState().grid;\n  i = 0;\n\n  while (playing && i < shortest_path_nodes.length) {\n    let copy_matrix = changeNodeToShortestPath(shortest_path_nodes[i], array);\n    dispatchedChangedNodeType(copy_matrix);\n    playing = await store.getState().settings;\n    i++;\n    await sleep(500 / getValueByElementId(\"speed\"));\n  }\n\n  dispatchedStoppedSearch(); // // && playing\n  // while (!result.done && playing) {\n  //     let value = result.value\n  //     console.log(\"value: \", value)\n  //     let shallow_matrix = updateNodeState(value, array);\n  //     dispatchedChangedNodeType(shallow_matrix);\n  //     result = generator.next();\n  //     playing = store.getState().settings\n  //     await sleep(1000 / getValueByElementId(\"speed\"));\n  // }\n  // dispatchedStoppedSearch();\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/pathfind.js"],"names":["getValueByElementId","store","dijkstra","changeNodeToVisited","changeNodeToShortestPath","dispatchedChangedNodeType","sleep","dispatchedStartedSearch","dispatchedStoppedSearch","breadthFirstSearch","depthFirstSearch","aStar","getAlgorithm","array","type","start_coordinates","end_coordinates","additional_destinations","walls","weights","startPathFinding","getState","grid","playing","settings","nodes","pathFindingType","generator","visited_nodes","next","value","shortest_path_nodes","i","length","copy_matrix"],"mappings":"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","sourcesContent":["import { getValueByElementId } from \"../helpers/functions/get-value-by-element-id\";\nimport store from \"../redux/stores/store\"\nimport dijkstra from \"../algorithms/dijkstra\"\nimport { changeNodeToVisited, changeNodeToShortestPath } from \"../helpers/state-functions/update-node-state\";\nimport { dispatchedChangedNodeType } from \"../redux/dispatchs/grid-dispatchs\";\nimport { sleep } from \"../helpers/async-functions/sleep\";\nimport { dispatchedStartedSearch, dispatchedStoppedSearch } from \"../redux/dispatchs/settings-dispatchs\";\nimport { breadthFirstSearch } from \"./breadth-first-search\";\nimport depthFirstSearch from \"./depth-first-search\";\nimport aStar from \"./a-star\";\n\nfunction getAlgorithm(array = [[]], type = \"mergesort\", start_coordinates, end_coordinates) {\n    if (type === \"a*\") {\n        return aStar(array, start_coordinates, end_coordinates, additional_destinations, walls, weights);\n    }\n    else if (type === \"bfs\") {\n        return breadthFirstSearch(array, start_coordinates, end_coordinates, additional_destinations, walls, weights);\n    }\n    else if (type === \"dfs\") {\n        return depthFirstSearch(array, start_coordinates, end_coordinates, additional_destinations, walls, weights);\n    }\n    else if (type === \"dijkstra\") {\n        return dijkstra(array, start_coordinates, end_coordinates, additional_destinations, walls, weights);\n    }\n    // else if (type === \"insertionsort\") {\n    //     return InsertionSort(array);\n    // }\n    // else if (type === \"quicksort\") {\n    //     return QuickSort(array, 0, array.length - 1);\n    // }\n    // else if (type === \"cocktailsort\") {\n\n    // }\n}\n\nexport default async function startPathFinding() {\n    var array = store.getState().grid;\n    let playing = store.getState().settings;\n    let start_coordinates = store.getState().nodes.start_coordinates;\n    let end_coordinates = store.getState().nodes.end_coordinates;\n\n    if (playing) {\n        return;\n    }\n\n    dispatchedStartedSearch();\n    playing = await store.getState().settings;\n\n    // console.log(\"playing: \", playing);\n    // console.log(\"grid: \", array);\n\n\n    const pathFindingType = getValueByElementId(\"algorithms\");\n    const generator = getAlgorithm(array, pathFindingType, start_coordinates, end_coordinates);\n\n    let visited_nodes = generator.next().value;\n\n    let shortest_path_nodes = generator.next().value;\n\n\n    var i = 0;\n    while (playing && i < visited_nodes.length) {\n\n        let copy_matrix = changeNodeToVisited(visited_nodes[i], array);\n        dispatchedChangedNodeType(copy_matrix);\n        playing = await store.getState().settings;\n        i++;\n        await sleep(500 / getValueByElementId(\"speed\"));\n\n    }\n\n    array = store.getState().grid;\n    i = 0;\n    while (playing && i < shortest_path_nodes.length) {\n\n        let copy_matrix = changeNodeToShortestPath(shortest_path_nodes[i], array);\n        dispatchedChangedNodeType(copy_matrix);\n        playing = await store.getState().settings;\n        i++;\n        await sleep(500 / getValueByElementId(\"speed\"));\n\n    }\n    dispatchedStoppedSearch();\n\n    // // && playing\n    // while (!result.done && playing) {\n\n    //     let value = result.value\n    //     console.log(\"value: \", value)\n    //     let shallow_matrix = updateNodeState(value, array);\n    //     dispatchedChangedNodeType(shallow_matrix);\n    //     result = generator.next();\n    //     playing = store.getState().settings\n    //     await sleep(1000 / getValueByElementId(\"speed\"));\n    // }\n    // dispatchedStoppedSearch();\n}"]},"metadata":{},"sourceType":"module"}