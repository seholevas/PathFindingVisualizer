{"ast":null,"code":"import * as gridActions from \"../actions/types/grid-types\";\nconst INITIAL_STATE = [[{\n  type: \"start_node\",\n  visited: false,\n  shortest_path: true,\n  shortest_path: true\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}], [{\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}], [{\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}], [{\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}, {\n  type: \"end_node\",\n  visited: false,\n  shortest_path: true\n}, {\n  type: \"empty_node\",\n  visited: false,\n  shortest_path: true\n}]]; // const empty_STATE=[[\"empty\",false, shortest_path: true,false, shortest_path: true],[\"pizza\"],[\"topping\"]];\n// const empty_STATE=[[{type: \"row 1 col 0\", visited: false, shortest_path: true},{type: \"pizza\", visited: false, shortest_path: true}],[{type: \"topping\", visited: false, shortest_path: true},{},{}]];\n\nexport default function reducer(state = INITIAL_STATE, action) {\n  if (action.type === gridActions.CHANGED_NODE_TYPE) {\n    return { ...state\n    };\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/redux/reducers/grid-reducer.js"],"names":["gridActions","INITIAL_STATE","type","visited","shortest_path","reducer","state","action","CHANGED_NODE_TYPE"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,6BAA7B;AAEA,MAAMC,aAAa,GACf,CACI,CAAC;AAAEC,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE,IAArD;AAA2DA,EAAAA,aAAa,EAAE;AAA1E,CAAD,EAAkF;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAAlF,EAA+I;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA/I,EAA4M;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA5M,CADJ,EAEI,CAAC;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAAD,EAA8D;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA9D,EAA2H;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA3H,EAAwL;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAAxL,CAFJ,EAGI,CAAC;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAAD,EAA8D;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA9D,EAA2H;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA3H,EAAwL;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAAxL,CAHJ,EAII,CAAC;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAAD,EAA8D;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAA9D,EAA2H;AAAEF,EAAAA,IAAI,EAAE,UAAR;AAAoBC,EAAAA,OAAO,EAAE,KAA7B;AAAoCC,EAAAA,aAAa,EAAE;AAAnD,CAA3H,EAAsL;AAAEF,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,aAAa,EAAE;AAArD,CAAtL,CAJJ,CADJ,C,CAOA;AACA;;AAGA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGL,aAAzB,EAAwCM,MAAxC,EAAgD;AAC3D,MAAIA,MAAM,CAACL,IAAP,KAAgBF,WAAW,CAACQ,iBAAhC,EAAmD;AAC/C,WAAO,EAAE,GAAGF;AAAL,KAAP;AACH;;AACD,SAAOA,KAAP;AACH","sourcesContent":["import * as gridActions from \"../actions/types/grid-types\"\n\nconst INITIAL_STATE =\n    [\n        [{ type: \"start_node\", visited: false, shortest_path: true, shortest_path: true}, { type: \"empty_node\", visited: false, shortest_path: true }, { type: \"empty_node\", visited: false, shortest_path: true }, { type: \"empty_node\", visited: false, shortest_path: true }],\n        [{ type: \"empty_node\", visited: false, shortest_path: true }, { type: \"empty_node\", visited: false, shortest_path: true }, { type: \"empty_node\", visited: false, shortest_path: true }, { type: \"empty_node\", visited: false, shortest_path: true }],\n        [{ type: \"empty_node\", visited: false, shortest_path: true }, { type: \"empty_node\", visited: false, shortest_path: true }, { type: \"empty_node\", visited: false, shortest_path: true }, { type: \"empty_node\", visited: false, shortest_path: true },],\n        [{ type: \"empty_node\", visited: false, shortest_path: true }, { type: \"empty_node\", visited: false, shortest_path: true }, { type: \"end_node\", visited: false, shortest_path: true }, { type: \"empty_node\", visited: false, shortest_path: true }]\n    ];\n// const empty_STATE=[[\"empty\",false, shortest_path: true,false, shortest_path: true],[\"pizza\"],[\"topping\"]];\n// const empty_STATE=[[{type: \"row 1 col 0\", visited: false, shortest_path: true},{type: \"pizza\", visited: false, shortest_path: true}],[{type: \"topping\", visited: false, shortest_path: true},{},{}]];\n\n\nexport default function reducer(state = INITIAL_STATE, action) {\n    if (action.type === gridActions.CHANGED_NODE_TYPE) {\n        return { ...state, };\n    }\n    return state\n}"]},"metadata":{},"sourceType":"module"}