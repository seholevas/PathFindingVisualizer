{"ast":null,"code":"import { getValueByElementId } from \"../functions/get-value-by-element-id\";\nimport generateMatrix from \"../2d-array-functions/generate-matrix\";\nimport { dispatchedChangedMatrixSize } from \"../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\nimport store from \"../../redux/stores/store\";\nimport { dispatchedRemovedAdditionalDestination, dispatchedRemovedWeight, dispatchedRemovedWall, dispatchedMovedEnd, dispatchedMovedStart } from \"../../redux/dispatchs/node-dispatchs\";\nimport { clearPath, clearAll } from \"./clear-matrix\";\nexport function changeArraySize() {\n  const size_of_matrix = getValueByElementId(\"size\");\n  const matrix = generateMatrix(size_of_matrix);\n  const shallow_copy = shallowCopy(matrix);\n  const start = store.getState().nodes.start_coordinates;\n  const end = store.getState().nodes.end_coordinates;\n  const grid_size = store.getState().grid.length;\n\n  if (start[0] < size_of_matrix - 1 && start[1] < size_of_matrix - 1) {\n    shallow_copy[start[0]][start[1]] = {\n      type: \"start_node\",\n      visited: false,\n      shortest_path: false\n    };\n  } else {\n    dispatchedMovedStart([size_of_matrix - 1, size_of_matrix - 1]);\n    shallow_copy[size_of_matrix - 1][size_of_matrix - 1] = {\n      type: \"start_node\",\n      visited: false,\n      shortest_path: false\n    };\n  }\n\n  if (end[0] < size_of_matrix - 1 && end[1] < size_of_matrix - 1) {\n    shallow_copy[end[0]][end[1]] = {\n      type: \"end_node\",\n      visited: false,\n      shortest_path: false\n    };\n  } else {\n    dispatchedMovedEnd([size_of_matrix - 1, size_of_matrix - 1]);\n    shallow_copy[size_of_matrix - 1][size_of_matrix - 1] = {\n      type: \"end_node\",\n      visited: false,\n      shortest_path: false\n    };\n  }\n\n  clearPath();\n  clearAll();\n  dispatchedChangedMatrixSize(shallow_copy);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/state-functions/change-array-size.js"],"names":["getValueByElementId","generateMatrix","dispatchedChangedMatrixSize","shallowCopy","store","dispatchedRemovedAdditionalDestination","dispatchedRemovedWeight","dispatchedRemovedWall","dispatchedMovedEnd","dispatchedMovedStart","clearPath","clearAll","changeArraySize","size_of_matrix","matrix","shallow_copy","start","getState","nodes","start_coordinates","end","end_coordinates","grid_size","grid","length","type","visited","shortest_path"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,sCAApC;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AACA,SAAQC,2BAAR,QAA0C,sCAA1C;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,SAASC,sCAAT,EAAiDC,uBAAjD,EAA0EC,qBAA1E,EAAiGC,kBAAjG,EAAqHC,oBAArH,QAAiJ,sCAAjJ;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,gBAApC;AAEA,OAAO,SAASC,eAAT,GACP;AACI,QAAMC,cAAc,GAAGb,mBAAmB,CAAC,MAAD,CAA1C;AACA,QAAMc,MAAM,GAAGb,cAAc,CAACY,cAAD,CAA7B;AACA,QAAME,YAAY,GAAGZ,WAAW,CAACW,MAAD,CAAhC;AACA,QAAME,KAAK,GAAGZ,KAAK,CAACa,QAAN,GAAiBC,KAAjB,CAAuBC,iBAArC;AACA,QAAMC,GAAG,GAAGhB,KAAK,CAACa,QAAN,GAAiBC,KAAjB,CAAuBG,eAAnC;AACA,QAAMC,SAAS,GAAGlB,KAAK,CAACa,QAAN,GAAiBM,IAAjB,CAAsBC,MAAxC;;AAEA,MAAKR,KAAK,CAAC,CAAD,CAAL,GAAWH,cAAc,GAAC,CAA3B,IAAkCG,KAAK,CAAC,CAAD,CAAL,GAAWH,cAAc,GAAC,CAAhE,EAAoE;AAChEE,IAAAA,YAAY,CAACC,KAAK,CAAC,CAAD,CAAN,CAAZ,CAAuBA,KAAK,CAAC,CAAD,CAA5B,IAAmC;AAAES,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,OAAO,EAAE,KAA/B;AAAsCC,MAAAA,aAAa,EAAE;AAArD,KAAnC;AACH,GAFD,MAGK;AACDlB,IAAAA,oBAAoB,CAAC,CAACI,cAAc,GAAC,CAAhB,EAAmBA,cAAc,GAAC,CAAlC,CAAD,CAApB;AACAE,IAAAA,YAAY,CAACF,cAAc,GAAC,CAAhB,CAAZ,CAA+BA,cAAc,GAAC,CAA9C,IAAmD;AAAEY,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,OAAO,EAAE,KAA/B;AAAsCC,MAAAA,aAAa,EAAE;AAArD,KAAnD;AACH;;AACD,MAAIP,GAAG,CAAC,CAAD,CAAH,GAASP,cAAc,GAAC,CAAxB,IAA6BO,GAAG,CAAC,CAAD,CAAH,GAASP,cAAc,GAAC,CAAzD,EAA4D;AACxDE,IAAAA,YAAY,CAACK,GAAG,CAAC,CAAD,CAAJ,CAAZ,CAAqBA,GAAG,CAAC,CAAD,CAAxB,IAA+B;AAAEK,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,OAAO,EAAE,KAA7B;AAAoCC,MAAAA,aAAa,EAAE;AAAnD,KAA/B;AACH,GAFD,MAGK;AACDnB,IAAAA,kBAAkB,CAAC,CAACK,cAAc,GAAC,CAAhB,EAAmBA,cAAc,GAAC,CAAlC,CAAD,CAAlB;AACAE,IAAAA,YAAY,CAACF,cAAc,GAAC,CAAhB,CAAZ,CAA+BA,cAAc,GAAC,CAA9C,IAAmD;AAAEY,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,OAAO,EAAE,KAA7B;AAAoCC,MAAAA,aAAa,EAAE;AAAnD,KAAnD;AAEH;;AAQDjB,EAAAA,SAAS;AACTC,EAAAA,QAAQ;AACRT,EAAAA,2BAA2B,CAACa,YAAD,CAA3B;AACH","sourcesContent":["import { getValueByElementId } from \"../functions/get-value-by-element-id\";\nimport generateMatrix from \"../2d-array-functions/generate-matrix\";\nimport {dispatchedChangedMatrixSize} from \"../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\nimport store from \"../../redux/stores/store\";\nimport { dispatchedRemovedAdditionalDestination, dispatchedRemovedWeight, dispatchedRemovedWall, dispatchedMovedEnd, dispatchedMovedStart } from \"../../redux/dispatchs/node-dispatchs\";\nimport { clearPath, clearAll } from \"./clear-matrix\";\n\nexport function changeArraySize()\n{\n    const size_of_matrix = getValueByElementId(\"size\");\n    const matrix = generateMatrix(size_of_matrix);\n    const shallow_copy = shallowCopy(matrix);\n    const start = store.getState().nodes.start_coordinates;\n    const end = store.getState().nodes.end_coordinates;\n    const grid_size = store.getState().grid.length;\n\n    if ((start[0] < size_of_matrix-1) && (start[1] < size_of_matrix-1)) {\n        shallow_copy[start[0]][start[1]] = { type: \"start_node\", visited: false, shortest_path: false };\n    }\n    else {\n        dispatchedMovedStart([size_of_matrix-1, size_of_matrix-1])\n        shallow_copy[size_of_matrix-1][size_of_matrix-1] = { type: \"start_node\", visited: false, shortest_path: false };\n    }\n    if (end[0] < size_of_matrix-1 && end[1] < size_of_matrix-1) {\n        shallow_copy[end[0]][end[1]] = { type: \"end_node\", visited: false, shortest_path: false };\n    }\n    else {\n        dispatchedMovedEnd([size_of_matrix-1, size_of_matrix-1])\n        shallow_copy[size_of_matrix-1][size_of_matrix-1] = { type: \"end_node\", visited: false, shortest_path: false };\n        \n    }\n  \n    \n\n\n\n\n\n    clearPath();\n    clearAll();\n    dispatchedChangedMatrixSize(shallow_copy);\n}\n"]},"metadata":{},"sourceType":"module"}