{"ast":null,"code":"const top = 0;\n\nconst parent = i => (i + 1 >>> 1) - 1;\n\nconst left = i => (i << 1) + 1;\n\nconst right = i => i + 1 << 1;\n\nclass PriorityQueue {\n  constructor(comparator = (a, b) => a > b) {\n    this._heap = [];\n    this._comparator = comparator;\n  }\n\n  size() {\n    return this._heap.length;\n  }\n\n  isEmpty() {\n    return this.size() == 0;\n  }\n\n  peek() {\n    return this._heap[top];\n  }\n\n  push(...values) {\n    values.forEach(value => {\n      this._heap.push(value);\n\n      this._siftUp();\n    });\n    return this.size();\n  }\n\n  pop() {\n    const poppedValue = this.peek();\n    const bottom = this.size() - 1;\n\n    if (bottom > top) {\n      this._swap(top, bottom);\n    }\n\n    this._heap.pop();\n\n    this._siftDown();\n\n    return poppedValue;\n  }\n\n  replace(value) {\n    const replacedValue = this.peek();\n    this._heap[top] = value;\n\n    this._siftDown();\n\n    return replacedValue;\n  }\n\n  _greater(i, j) {\n    return this._comparator(this._heap[i], this._heap[j]);\n  }\n\n  _swap(i, j) {\n    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\n  }\n\n  _siftUp() {\n    let node = this.size() - 1;\n\n    while (node > top && this._greater(node, parent(node))) {\n      this._swap(node, parent(node));\n\n      node = parent(node);\n    }\n  }\n\n  _siftDown() {\n    let node = top;\n\n    while (left(node) < this.size() && this._greater(left(node), node) || right(node) < this.size() && this._greater(right(node), node)) {\n      let maxChild = right(node) < this.size() && this._greater(right(node), left(node)) ? right(node) : left(node);\n\n      this._swap(node, maxChild);\n\n      node = maxChild;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/data-structures/min-priority-queue.js"],"names":["top","parent","i","left","right","PriorityQueue","constructor","comparator","a","b","_heap","_comparator","size","length","isEmpty","peek","push","values","forEach","value","_siftUp","pop","poppedValue","bottom","_swap","_siftDown","replace","replacedValue","_greater","j","node","maxChild"],"mappings":"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","sourcesContent":["const top = 0;\nconst parent = i => ((i + 1) >>> 1) - 1;\nconst left = i => (i << 1) + 1;\nconst right = i => (i + 1) << 1;\n\nclass PriorityQueue {\n    constructor(comparator = (a, b) => a > b) {\n      this._heap = [];\n      this._comparator = comparator;\n    }\n    size() {\n      return this._heap.length;\n    }\n    isEmpty() {\n      return this.size() == 0;\n    }\n    peek() {\n      return this._heap[top];\n    }\n    push(...values) {\n      values.forEach(value => {\n        this._heap.push(value);\n        this._siftUp();\n      });\n      return this.size();\n    }\n    pop() {\n      const poppedValue = this.peek();\n      const bottom = this.size() - 1;\n      if (bottom > top) {\n        this._swap(top, bottom);\n      }\n      this._heap.pop();\n      this._siftDown();\n      return poppedValue;\n    }\n    replace(value) {\n      const replacedValue = this.peek();\n      this._heap[top] = value;\n      this._siftDown();\n      return replacedValue;\n    }\n    _greater(i, j) {\n      return this._comparator(this._heap[i], this._heap[j]);\n    }\n    _swap(i, j) {\n      [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\n    }\n    _siftUp() {\n      let node = this.size() - 1;\n      while (node > top && this._greater(node, parent(node))) {\n        this._swap(node, parent(node));\n        node = parent(node);\n      }\n    }\n    _siftDown() {\n      let node = top;\n      while (\n        (left(node) < this.size() && this._greater(left(node), node)) ||\n        (right(node) < this.size() && this._greater(right(node), node))\n      ) {\n        let maxChild = (right(node) < this.size() && this._greater(right(node), left(node))) ? right(node) : left(node);\n        this._swap(node, maxChild);\n        node = maxChild;\n      }\n    }\n  }"]},"metadata":{},"sourceType":"module"}