{"ast":null,"code":"import _regeneratorRuntime from\"/home/steven/SWE/Code/path-finding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/home/steven/SWE/Code/path-finding-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(breadthFirstSearch);import shallowCopy from\"../helpers/2d-array-functions/shallow-copy\";import{checkNeighbors}from\"./helpers/matrix-helpers/async-helpers/check-neighbors\";import{updatetoVisited}from\"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";import{updateParent}from\"./helpers/matrix-helpers/setters-and-getters/update-parent\";import getShortestPath from\"./helpers/matrix-helpers/setters-and-getters/get-shortest-path\";// import coordinatesAreEqual from \"./helpers/matrix-helpers/setters-and-getters/coordinates-are-equal\";\nexport function breadthFirstSearch(){var matrix,start,end,additional_destinations,walls,visited_coordinates,queue,path,start_coordinates,end_coordinates,visited,found,additional_dest,parent_matrix,vertex_coordinates,new_path,add_to_visited_nodes,add_to_path,generator,result,value,undefined_or_path,_args=arguments;return _regeneratorRuntime.wrap(function breadthFirstSearch$(_context){while(1){switch(_context.prev=_context.next){case 0:matrix=_args.length>0&&_args[0]!==undefined?_args[0]:[[]];start=_args.length>1&&_args[1]!==undefined?_args[1]:[0,0];end=_args.length>2&&_args[2]!==undefined?_args[2]:[3,3];additional_destinations=_args.length>3?_args[3]:undefined;walls=_args.length>4?_args[4]:undefined;visited_coordinates=[];queue=[];path=[];start_coordinates=_toConsumableArray(start);end_coordinates=_toConsumableArray(end);visited=shallowCopy(matrix,false);found=false;additional_dest=Object.assign({},additional_destinations);parent_matrix=shallowCopy(matrix,null);// console.log(\"visited: \", visited);\nvisited[start_coordinates[0]][start_coordinates[1]]=true;visited_coordinates.push(start_coordinates);queue.push(start_coordinates);case 17:if(!(queue.length!==0&&!found)){_context.next=35;break;}vertex_coordinates=queue.shift();if(!(additional_dest[vertex_coordinates]!==undefined)){_context.next=32;break;}delete additional_dest[vertex_coordinates];new_path=breadthFirstSearch(matrix,vertex_coordinates,end_coordinates,additional_dest,walls);add_to_visited_nodes=new_path.next().value;add_to_path=new_path.next().value;visited_coordinates=visited_coordinates.concat(add_to_visited_nodes);console.log(\"in additional[dest] - path pre-concat: \",path);// if no path to finish line\nif(!(add_to_path===undefined)){_context.next=28;break;}return _context.abrupt(\"break\",35);case 28:path=path.concat(add_to_path);console.log(\"in additional[dest] - path post-concat: \",path);end_coordinates=vertex_coordinates;found=true;case 32:if(vertex_coordinates[0]===end_coordinates[0]&&vertex_coordinates[1]===end_coordinates[1]&&Object.keys(additional_dest).length===0){found=true;}else{generator=checkNeighbors(vertex_coordinates,visited);result=generator.next();while(!result.done){value=result.value;if(!visited[value[0]][value[1]]&&walls[value]===undefined){// yield value;\nupdatetoVisited(value,visited);updateParent(vertex_coordinates,value,parent_matrix);queue.push(value);visited_coordinates.push(value);}result=generator.next();}}_context.next=17;break;case 35:_context.next=37;return visited_coordinates;case 37:// could be undefined or a path\nundefined_or_path=getShortestPath(end_coordinates,parent_matrix);// if it is undefined, return undefined (void)\nif(!(undefined_or_path===undefined)){_context.next=40;break;}return _context.abrupt(\"return\");case 40:path=undefined_or_path.concat(path);_context.next=43;return path;case 43:case\"end\":return _context.stop();}}},_marked);}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/breadth-first-search.js"],"names":["breadthFirstSearch","shallowCopy","checkNeighbors","updatetoVisited","updateParent","getShortestPath","matrix","start","end","additional_destinations","walls","visited_coordinates","queue","path","start_coordinates","end_coordinates","visited","found","additional_dest","Object","assign","parent_matrix","push","length","vertex_coordinates","shift","undefined","new_path","add_to_visited_nodes","next","value","add_to_path","concat","console","log","keys","generator","result","done","undefined_or_path"],"mappings":"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","sourcesContent":["import shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\nimport { checkNeighbors } from \"./helpers/matrix-helpers/async-helpers/check-neighbors\";\nimport { updatetoVisited } from \"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";\nimport { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\nimport getShortestPath from \"./helpers/matrix-helpers/setters-and-getters/get-shortest-path\"\n// import coordinatesAreEqual from \"./helpers/matrix-helpers/setters-and-getters/coordinates-are-equal\";\nexport function* breadthFirstSearch(matrix = [[]], start = [0, 0], end = [3, 3], additional_destinations, walls) {\n    let visited_coordinates = [];\n    let queue = [];\n    let path = []\n    let start_coordinates = [...start];\n    let end_coordinates = [...end];\n    let visited = shallowCopy(matrix, false);\n    let found = false;\n    let additional_dest = Object.assign({}, additional_destinations);\n    let parent_matrix = shallowCopy(matrix, null);\n    // console.log(\"visited: \", visited);\n    visited[start_coordinates[0]][start_coordinates[1]] = true;\n    visited_coordinates.push(start_coordinates);\n    queue.push(start_coordinates);\n\n\n    while (queue.length !== 0 && !found) {\n        let vertex_coordinates = queue.shift();\n        if (additional_dest[vertex_coordinates] !== undefined) {\n            delete additional_dest[vertex_coordinates];\n            let new_path = breadthFirstSearch(matrix, vertex_coordinates, end_coordinates, additional_dest, walls)\n            let add_to_visited_nodes = new_path.next().value\n            let add_to_path = new_path.next().value\n            visited_coordinates = visited_coordinates.concat(add_to_visited_nodes);\n            console.log(\"in additional[dest] - path pre-concat: \", path)\n            // if no path to finish line\n            if (add_to_path === undefined)\n                break;\n            path = path.concat(add_to_path);\n            console.log(\"in additional[dest] - path post-concat: \", path)\n\n\n            end_coordinates = vertex_coordinates;\n            found = true;\n\n        }\n        if (((vertex_coordinates[0] === end_coordinates[0]) && (vertex_coordinates[1] === end_coordinates[1])) && Object.keys(additional_dest).length === 0) {\n            found = true;\n        }\n        else {\n            const generator = checkNeighbors(vertex_coordinates, visited);\n            let result = generator.next();\n\n            while (!result.done) {\n                let value = result.value\n\n                if (!visited[value[0]][value[1]] && walls[value] === undefined) {\n                    // yield value;\n                    updatetoVisited(value, visited);\n                    updateParent(vertex_coordinates, value, parent_matrix);\n                    queue.push(value);\n                    visited_coordinates.push(value);\n                }\n                result = generator.next();\n            }\n        }\n    }\n\n    yield visited_coordinates;\n\n    // could be undefined or a path\n    let undefined_or_path = getShortestPath(end_coordinates, parent_matrix);\n    // if it is undefined, return undefined (void)\n    if (undefined_or_path === undefined) {\n        return;\n    }\n\n    path = undefined_or_path.concat(path);\n\n\n    yield path\n}"]},"metadata":{},"sourceType":"module"}