{"ast":null,"code":"// User defined class \n// to store element and its priority \nclass QElement {\n  constructor(element, priority) {\n    this.element = element;\n    this.priority = priority;\n  }\n\n} // PriorityQueue class \n\n\nexport class PriorityQueue {\n  // An array is used to implement priority \n  constructor() {\n    this.items = [];\n  } // functions to be implemented \n  // enqueue(item, priority) \n\n\n  enqueue(element, priority) {\n    // creating object from queue element \n    var qElement = new QElement(element, priority);\n    var contain = false; // iterating through the entire \n    // item array to add element at the \n    // correct location of the Queue \n\n    for (var i = 0; i < this.items.length; i++) {\n      if (this.items[i].priority > qElement.priority) {\n        // Once the correct location is found it is \n        // enqueued \n        this.items.splice(i, 0, qElement);\n        contain = true;\n        break;\n      }\n    } // if the element have the highest priority \n    // it is added at the end of the queue \n\n\n    if (!contain) {\n      this.items.push(qElement);\n    }\n  } // dequeue() \n\n\n  dequeue() {\n    // return the dequeued element \n    // and remove it. \n    // if the queue is empty \n    // returns Underflow \n    if (this.isEmpty()) return \"Underflow\";\n    return this.items.shift();\n  } // front() \n\n\n  front() {\n    // returns the highest priority element \n    // in the Priority queue without removing it. \n    if (this.isEmpty()) return \"No elements in Queue\";\n    return this.items[0];\n  } // isEmpty() \n  // isEmpty function \n\n\n  isEmpty() {\n    // return true if the queue is empty. \n    return this.items.length === 0;\n  }\n\n  rear() {\n    // returns the lowest priorty \n    // element of the queue \n    if (this.isEmpty()) return \"No elements in Queue\";\n    return this.items[this.items.length - 1];\n  } // printPQueue() \n\n\n  printPQueue() {\n    var str = \"\";\n\n    for (var i = 0; i < this.items.length; i++) str += this.items[i].element + \" \";\n\n    return str;\n  }\n\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/data-structures/priority-queue.js"],"names":["QElement","constructor","element","priority","PriorityQueue","items","enqueue","qElement","contain","i","length","splice","push","dequeue","isEmpty","shift","front","rear","printPQueue","str"],"mappings":"AACA;AACA;AACA,MAAMA,QAAN,CAAe;AACXC,EAAAA,WAAW,CAACC,OAAD,EAAUC,QAAV,EAAoB;AAC3B,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACH;;AAJU,C,CAOf;;;AACA,OAAO,MAAMC,aAAN,CAAoB;AAEvB;AACAH,EAAAA,WAAW,GAAG;AACV,SAAKI,KAAL,GAAa,EAAb;AACH,GALsB,CAMvB;AACA;;;AACAC,EAAAA,OAAO,CAACJ,OAAD,EAAUC,QAAV,EAAoB;AACvB;AACA,QAAII,QAAQ,GAAG,IAAIP,QAAJ,CAAaE,OAAb,EAAsBC,QAAtB,CAAf;AACA,QAAIK,OAAO,GAAG,KAAd,CAHuB,CAKvB;AACA;AACA;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,KAAL,CAAWK,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,UAAI,KAAKJ,KAAL,CAAWI,CAAX,EAAcN,QAAd,GAAyBI,QAAQ,CAACJ,QAAtC,EAAgD;AAC5C;AACA;AACA,aAAKE,KAAL,CAAWM,MAAX,CAAkBF,CAAlB,EAAqB,CAArB,EAAwBF,QAAxB;AACAC,QAAAA,OAAO,GAAG,IAAV;AACA;AACH;AACJ,KAhBsB,CAkBvB;AACA;;;AACA,QAAI,CAACA,OAAL,EAAc;AACV,WAAKH,KAAL,CAAWO,IAAX,CAAgBL,QAAhB;AACH;AACJ,GA/BsB,CAgCvB;;;AACAM,EAAAA,OAAO,GAAG;AACN;AACA;AACA;AACA;AACA,QAAI,KAAKC,OAAL,EAAJ,EACI,OAAO,WAAP;AACJ,WAAO,KAAKT,KAAL,CAAWU,KAAX,EAAP;AACH,GAzCsB,CA6CvB;;;AAEAC,EAAAA,KAAK,GAAG;AACJ;AACA;AACA,QAAI,KAAKF,OAAL,EAAJ,EACI,OAAO,sBAAP;AACJ,WAAO,KAAKT,KAAL,CAAW,CAAX,CAAP;AACH,GArDsB,CAsDvB;AACA;;;AACAS,EAAAA,OAAO,GAAG;AACN;AACA,WAAO,KAAKT,KAAL,CAAWK,MAAX,KAAsB,CAA7B;AACH;;AAEDO,EAAAA,IAAI,GAAG;AACH;AACA;AACA,QAAI,KAAKH,OAAL,EAAJ,EACI,OAAO,sBAAP;AACJ,WAAO,KAAKT,KAAL,CAAW,KAAKA,KAAL,CAAWK,MAAX,GAAoB,CAA/B,CAAP;AACH,GAnEsB,CAoEvB;;;AACAQ,EAAAA,WAAW,GAAG;AACV,QAAIC,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,KAAL,CAAWK,MAA/B,EAAuCD,CAAC,EAAxC,EACIU,GAAG,IAAI,KAAKd,KAAL,CAAWI,CAAX,EAAcP,OAAd,GAAwB,GAA/B;;AACJ,WAAOiB,GAAP;AACH;;AA1EsB","sourcesContent":["\n// User defined class \n// to store element and its priority \nclass QElement {\n    constructor(element, priority) {\n        this.element = element;\n        this.priority = priority;\n    }\n}\n\n// PriorityQueue class \nexport class PriorityQueue {\n\n    // An array is used to implement priority \n    constructor() {\n        this.items = [];\n    }\n    // functions to be implemented \n    // enqueue(item, priority) \n    enqueue(element, priority) {\n        // creating object from queue element \n        var qElement = new QElement(element, priority);\n        var contain = false;\n\n        // iterating through the entire \n        // item array to add element at the \n        // correct location of the Queue \n        for (var i = 0; i < this.items.length; i++) {\n            if (this.items[i].priority > qElement.priority) {\n                // Once the correct location is found it is \n                // enqueued \n                this.items.splice(i, 0, qElement);\n                contain = true;\n                break;\n            }\n        }\n\n        // if the element have the highest priority \n        // it is added at the end of the queue \n        if (!contain) {\n            this.items.push(qElement);\n        }\n    }\n    // dequeue() \n    dequeue() {\n        // return the dequeued element \n        // and remove it. \n        // if the queue is empty \n        // returns Underflow \n        if (this.isEmpty())\n            return \"Underflow\";\n        return this.items.shift();\n    }\n\n\n\n    // front() \n\n    front() {\n        // returns the highest priority element \n        // in the Priority queue without removing it. \n        if (this.isEmpty())\n            return \"No elements in Queue\";\n        return this.items[0];\n    }\n    // isEmpty() \n    // isEmpty function \n    isEmpty() {\n        // return true if the queue is empty. \n        return this.items.length === 0;\n    }\n\n    rear() {\n        // returns the lowest priorty \n        // element of the queue \n        if (this.isEmpty())\n            return \"No elements in Queue\";\n        return this.items[this.items.length - 1];\n    }\n    // printPQueue() \n    printPQueue() {\n        var str = \"\";\n        for (var i = 0; i < this.items.length; i++)\n            str += this.items[i].element + \" \";\n        return str;\n    }\n} \n"]},"metadata":{},"sourceType":"module"}