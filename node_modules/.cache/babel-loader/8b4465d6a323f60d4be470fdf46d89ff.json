{"ast":null,"code":"import { getValueByElementId } from \"../helpers/functions/get-value-by-element-id\";\nimport store from \"../redux/stores/store\";\n\nfunction getAlgorithm(array = [[]], type = \"mergesort\") {\n  if (type === \"a*\") {// return Merge(array);\n  } else if (type === \"bfs\") {// return BubbleSort(array);\n  } else if (type === \"dfs\") {// return SelectionSort(array);\n  } else if (type === \"dijkstra\") {\n    return Dijikstra(array);\n  } // else if (type === \"insertionsort\") {\n  //     return InsertionSort(array);\n  // }\n  // else if (type === \"quicksort\") {\n  //     return QuickSort(array, 0, array.length - 1);\n  // }\n  // else if (type === \"cocktailsort\") {\n  // }\n\n}\n\nexport default function startPathFinding() {\n  const array = store.getState().grid;\n  const playing = store.getState().settings;\n  const pathFindingType = getValueByElementId(\"algorithms\");\n  const generator = getAlgorithm(array, pathFindingType);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/pathfind.js"],"names":["getValueByElementId","store","getAlgorithm","array","type","Dijikstra","startPathFinding","getState","grid","playing","settings","pathFindingType","generator"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,8CAApC;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;AAEA,SAASC,YAAT,CAAsBC,KAAK,GAAG,CAAC,EAAD,CAA9B,EAAoCC,IAAI,GAAG,WAA3C,EAAwD;AACpD,MAAIA,IAAI,KAAK,IAAb,EAAmB,CACf;AACH,GAFD,MAGK,IAAIA,IAAI,KAAK,KAAb,EAAoB,CACrB;AACH,GAFI,MAGA,IAAIA,IAAI,KAAK,KAAb,EAAoB,CACrB;AACH,GAFI,MAGA,IAAIA,IAAI,KAAK,UAAb,EAAyB;AAC1B,WAAOC,SAAS,CAACF,KAAD,CAAhB;AACH,GAZmD,CAapD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACH;;AAED,eAAe,SAASG,gBAAT,GAA4B;AACvC,QAAMH,KAAK,GAAGF,KAAK,CAACM,QAAN,GAAiBC,IAA/B;AACA,QAAMC,OAAO,GAAGR,KAAK,CAACM,QAAN,GAAiBG,QAAjC;AAEA,QAAMC,eAAe,GAAGX,mBAAmB,CAAC,YAAD,CAA3C;AACA,QAAMY,SAAS,GAAGV,YAAY,CAACC,KAAD,EAAQQ,eAAR,CAA9B;AACH","sourcesContent":["import { getValueByElementId } from \"../helpers/functions/get-value-by-element-id\";\nimport store from \"../redux/stores/store\"\n\nfunction getAlgorithm(array = [[]], type = \"mergesort\") {\n    if (type === \"a*\") {\n        // return Merge(array);\n    }\n    else if (type === \"bfs\") {\n        // return BubbleSort(array);\n    }\n    else if (type === \"dfs\") {\n        // return SelectionSort(array);\n    }\n    else if (type === \"dijkstra\") {\n        return Dijikstra(array)\n    }\n    // else if (type === \"insertionsort\") {\n    //     return InsertionSort(array);\n    // }\n    // else if (type === \"quicksort\") {\n    //     return QuickSort(array, 0, array.length - 1);\n    // }\n    // else if (type === \"cocktailsort\") {\n\n    // }\n}\n\nexport default function startPathFinding() {\n    const array = store.getState().grid;\n    const playing = store.getState().settings;\n\n    const pathFindingType = getValueByElementId(\"algorithms\");\n    const generator = getAlgorithm(array, pathFindingType);\n}"]},"metadata":{},"sourceType":"module"}