{"ast":null,"code":"import shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\nimport { checkNeighbors } from \"./helpers/matrix-helpers/async-helpers/check-neighbors\";\nimport { updatetoVisited } from \"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";\nimport { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\nimport getShortestPath from \"./helpers/matrix-helpers/setters-and-getters/get-shortest-path\";\nimport coordinatesAreEqual from \"./helpers/matrix-helpers/setters-and-getters/coordinates-are-equal\";\nexport function* breadthFirstSearch(matrix = [[]], start_coordinates = [0, 0], end_coordinates = [3, 3], additional_destinations, walls) {\n  let visited_coordinates = [];\n  let queue = [];\n  let path = [];\n  let visited = shallowCopy(matrix, false);\n  let found = false;\n  let additional_dest = Object.assign({}, additional_destinations);\n  let parent_matrix = shallowCopy(matrix, null);\n  console.log(\"visited: \", visited);\n  visited[start_coordinates[0]][start_coordinates[1]] = true;\n  visited_coordinates.push(start_coordinates);\n  queue.push(start_coordinates);\n\n  while (queue.length !== 0 && !found) {\n    let vertex_coordinates = queue.shift();\n\n    if (additional_dest[vertex_coordinates] !== undefined) {\n      var keys = additional_dest.keys();\n      delete additional_dest[vertex_coordinates];\n      let new_path = breadthFirstSearch(matrix, vertex_coordinates, end_coordinates, additional_dest, walls);\n      let add_to_visited_nodes = new_path.next().value;\n      let add_to_path = new_path.next().value;\n      visited_coordinates = visited_coordinates.concat(add_to_visited_nodes);\n      path = path.concat(add_to_path);\n    } else if (vertex_coordinates[0] === end_coordinates[0] && vertex_coordinates[1] === end_coordinates[1] && additional_dest.keys().length === 0) {\n      found = true;\n    } else {\n      const generator = checkNeighbors(vertex_coordinates, visited);\n      let result = generator.next();\n\n      while (!result.done) {\n        let value = result.value;\n\n        if (!visited[value[0]][value[1]] && walls[value] === undefined) {\n          // yield value;\n          updatetoVisited(value, visited);\n          updateParent(vertex_coordinates, value, parent_matrix);\n          queue.push(value);\n          visited_coordinates.push(value);\n        }\n\n        result = generator.next();\n      }\n    }\n  }\n\n  path = getShortestPath(end_coordinates, parent_matrix);\n  yield visited_coordinates;\n  yield path;\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/breadth-first-search.js"],"names":["shallowCopy","checkNeighbors","updatetoVisited","updateParent","getShortestPath","coordinatesAreEqual","breadthFirstSearch","matrix","start_coordinates","end_coordinates","additional_destinations","walls","visited_coordinates","queue","path","visited","found","additional_dest","Object","assign","parent_matrix","console","log","push","length","vertex_coordinates","shift","undefined","keys","new_path","add_to_visited_nodes","next","value","add_to_path","concat","generator","result","done"],"mappings":"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","sourcesContent":["import shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\nimport { checkNeighbors } from \"./helpers/matrix-helpers/async-helpers/check-neighbors\";\nimport { updatetoVisited } from \"./helpers/matrix-helpers/setters-and-getters/update-to-visited\";\nimport { updateParent } from \"./helpers/matrix-helpers/setters-and-getters/update-parent\";\nimport getShortestPath from \"./helpers/matrix-helpers/setters-and-getters/get-shortest-path\"\nimport coordinatesAreEqual from \"./helpers/matrix-helpers/setters-and-getters/coordinates-are-equal\";\nexport function* breadthFirstSearch(matrix = [[]], start_coordinates = [0, 0], end_coordinates = [3,3], additional_destinations, walls) {\n    let visited_coordinates = [];\n    let queue = [];\n    let path = []\n    let visited = shallowCopy(matrix, false);\n    let found = false;\n    let additional_dest = Object.assign({},additional_destinations);\n    let parent_matrix = shallowCopy(matrix, null);\n    console.log(\"visited: \", visited);\n    visited[start_coordinates[0]][start_coordinates[1]] = true;\n    visited_coordinates.push(start_coordinates);\n    queue.push(start_coordinates);\n\n\n    while (queue.length !== 0 && !found) {\n        let vertex_coordinates = queue.shift();\n        if(additional_dest[vertex_coordinates] !== undefined)\n        {\n            var keys = additional_dest.keys();\n            delete additional_dest[vertex_coordinates];\n            let new_path = breadthFirstSearch(matrix,vertex_coordinates,end_coordinates,additional_dest,walls)\n            let add_to_visited_nodes = new_path.next().value\n            let add_to_path = new_path.next().value\n\n            visited_coordinates = visited_coordinates.concat(add_to_visited_nodes);\n            path = path.concat(add_to_path);\n\n        }\n        else if (((vertex_coordinates[0] ===  end_coordinates[0]) && (vertex_coordinates[1] === end_coordinates[1])) && additional_dest.keys().length === 0) {\n            found = true;            \n        }\n        else {\n            const generator = checkNeighbors(vertex_coordinates, visited);\n            let result = generator.next();\n\n            while (!result.done) {\n                let value = result.value\n\n                if (!visited[value[0]][value[1]] && walls[value] === undefined)\n                {\n                    // yield value;\n                    updatetoVisited(value, visited);\n                    updateParent(vertex_coordinates,value,parent_matrix);\n                    queue.push(value);\n                    visited_coordinates.push(value);\n                }    \n                result = generator.next();\n            }\n        }\n    }\n    path = getShortestPath(end_coordinates, parent_matrix);\n    yield visited_coordinates;\n    yield path\n}"]},"metadata":{},"sourceType":"module"}