{"ast":null,"code":"export default function* dijkstra(matrix = [[]], source = [2, 2], final = [0, 3]) {\n  let adjacency_matrix = shallow_copy(matrix);\n  let visited = shallow_copy(matrix);\n  let path = shallow_copy(matrix);\n  let coordinates = source;\n  let queue = [];\n  adjacency_matrix[source[0]][source[1]] = 0;\n  coordinates = [source[0], source[1]];\n  visited[source[0]][source[1]] = true;\n  path[source[0]][source[1]] = source;\n  queue.push(coordinates);\n\n  for (let row = 0; row < matrix.length; row++) {\n    for (let col = 0; col < matrix[row].length; col++) {\n      if (!isEqual(source, [row, col])) {\n        path[row][col] = false;\n        adjacency_matrix[row][col] = Infinity;\n        visited[row][col] = false;\n      }\n    }\n  }\n\n  let found = false;\n\n  while (!found) {\n    coordinates = queue.shift();\n    const generator = check_neighbors(coordinates, visited);\n    let result = null;\n\n    do {\n      result = generator.next();\n      var neighbors_coordinates = result.value;\n\n      if (!result.done && !found) {\n        update_distance(adjacency_matrix[coordinates[0]][coordinates[1]], neighbors_coordinates, adjacency_matrix);\n        update_to_visited(neighbors_coordinates, visited);\n        queue.push(neighbors_coordinates);\n        found = isEqual(neighbors_coordinates, final);\n        yield [...neighbors_coordinates];\n      }\n    } while (!result.done);\n  }\n\n  yield visited;\n  yield path;\n  yield [...adjacency_matrix];\n}\n\nfunction update_distance(prev_value, node_location, adjacency_matrix) {\n  // let prev_row = prev_node_location[0];\n  // let prev_column = prev_node_location[1];\n  let row = node_location[0];\n  let column = node_location[1];\n  if (prev_value < adjacency_matrix[row][column]) adjacency_matrix[row][column] = prev_value + 1;\n}\n\nfunction isEqual(array1 = [], array2 = []) {\n  if (array1.length !== array2.length) return false;\n\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction update_parent(node_location) {}\n\nfunction* check_neighbors(node_location, visited) {\n  let row = node_location[0];\n  let column = node_location[1];\n  const RIGHT = column + 1;\n  const LEFT = column - 1;\n  const UP = row - 1;\n  const DOWN = row + 1;\n\n  if (RIGHT >= 0 && RIGHT < visited.length && !visited[row][RIGHT]) {\n    yield [row, RIGHT];\n  }\n\n  if (LEFT >= 0 && !visited[row][LEFT]) {\n    yield [row, LEFT];\n  }\n\n  if (UP >= 0 && !visited[UP][column]) {\n    yield [UP, column];\n  }\n\n  if (DOWN >= 0 && DOWN < visited.length && !visited[DOWN][column]) {\n    yield [DOWN, column];\n  }\n}\n\nfunction update_to_visited(node_location, visited) {\n  let row = node_location[0];\n  let col = node_location[1];\n  visited[row][col] = true;\n}\n\nfunction shallow_copy(array) {\n  const temp = [];\n\n  for (let i = 0; i < array.length; i++) {\n    temp.push([...array[i]]);\n  } // console.log('temp: ', temp)\n\n\n  return temp;\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/dijkstra.js"],"names":["dijkstra","matrix","source","final","adjacency_matrix","shallow_copy","visited","path","coordinates","queue","push","row","length","col","isEqual","Infinity","found","shift","generator","check_neighbors","result","next","neighbors_coordinates","value","done","update_distance","update_to_visited","prev_value","node_location","column","array1","array2","i","update_parent","RIGHT","LEFT","UP","DOWN","array","temp"],"mappings":"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","sourcesContent":["export default function* dijkstra(matrix = [[]], source = [2, 2], final = [0, 3]) {\n    let adjacency_matrix = shallow_copy(matrix);\n    let visited = shallow_copy(matrix);\n    let path = shallow_copy(matrix);\n    let coordinates = source;\n    let queue = [];\n\n    adjacency_matrix[source[0]][source[1]] = 0;\n    coordinates = [source[0], source[1]];\n    visited[source[0]][source[1]] = true;\n    path[source[0]][source[1]] = source;\n    queue.push(coordinates);\n\n\n    for (let row = 0; row < matrix.length; row++) {\n        for (let col = 0; col < matrix[row].length; col++) {\n            if (!isEqual(source, [row, col])) {\n                path[row][col] = false;\n                adjacency_matrix[row][col] = Infinity;\n                visited[row][col] = false;\n            }\n        }\n    }\n\n\n    let found = false;\n    while (!found) {\n        coordinates = queue.shift();\n        const generator = check_neighbors(coordinates, visited);\n        let result = null;\n        do {\n            result = generator.next();\n            var neighbors_coordinates = result.value;\n            if (!result.done && !found) {\n                update_distance(adjacency_matrix[coordinates[0]][coordinates[1]], neighbors_coordinates, adjacency_matrix);\n                update_to_visited(neighbors_coordinates, visited);\n                queue.push(neighbors_coordinates);\n                found = isEqual(neighbors_coordinates, final);\n                yield [...neighbors_coordinates];\n\n            }\n        }\n        while (!result.done)\n    }\n\n    yield visited;\n\n    yield path;\n\n    yield [...adjacency_matrix]\n\n\n}\n\nfunction update_distance(prev_value, node_location, adjacency_matrix) {\n    // let prev_row = prev_node_location[0];\n    // let prev_column = prev_node_location[1];\n    let row = node_location[0];\n    let column = node_location[1];\n    if (prev_value < adjacency_matrix[row][column])\n        adjacency_matrix[row][column] = prev_value + 1;\n}\n\nfunction isEqual(array1 = [], array2 = []) {\n    if (array1.length !== array2.length)\n        return false;\n\n    for (let i = 0; i < array1.length; i++) {\n        if (array1[i] !== array2[i]) {\n            return false\n        }\n    }\n    return true;\n}\n\n\nfunction update_parent(node_location)\n{\n    \n}\n\nfunction* check_neighbors(node_location, visited) {\n    let row = node_location[0];\n    let column = node_location[1];\n    const RIGHT = column + 1;\n    const LEFT = column - 1;\n    const UP = row - 1;\n    const DOWN = row + 1;\n\n    if (RIGHT >= 0 && RIGHT < visited.length && !visited[row][RIGHT]) {\n        yield [row, RIGHT];\n    }\n    if (LEFT >= 0 && !visited[row][LEFT]) {\n        yield [row, LEFT];\n    }\n\n    if (UP >= 0 && !visited[UP][column]) {\n        yield [UP, column];\n    }\n    if (DOWN >= 0 && DOWN < visited.length && !visited[DOWN][column]) {\n        yield [DOWN, column];\n    }\n\n}\n\nfunction update_to_visited(node_location, visited) {\n    let row = node_location[0];\n    let col = node_location[1];\n    visited[row][col] = true;\n}\n\nfunction shallow_copy(array) {\n    const temp = [];\n\n    for (let i = 0; i < array.length; i++) {\n        temp.push([...array[i]])\n    }\n    // console.log('temp: ', temp)\n    return temp;\n}"]},"metadata":{},"sourceType":"module"}