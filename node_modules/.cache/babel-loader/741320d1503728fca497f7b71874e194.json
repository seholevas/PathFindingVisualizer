{"ast":null,"code":"import store from \"../../redux/stores/store\";\nimport { dispatchedChangedNodeType } from \"../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\nimport { getValueByElementId } from \"../functions/get-value-by-element-id\";\nexport default function updateNodeType(id = \"\") {\n  let node_type = getValueByElementId(\"node-types\");\n  let coordinates = id.split(\"-\");\n  let grid = store.getState().grid;\n  let node = grid[coordinates[0]][coordinates[1]];\n\n  if (node[\"type\"] === node_type) {\n    node[\"type\"] = \"empty_node\";\n  } else if (node[\"type\"] !== \"start_node\" && node[\"type\"] !== \"end_node\") {\n    node[\"type\"] = node_type;\n  }\n\n  grid[coordinates[0]][coordinates[1]] = node;\n  const copy = shallowCopy(grid);\n  dispatchedChangedNodeType(copy);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/helpers/dom-helpers/update-node-type.js"],"names":["store","dispatchedChangedNodeType","shallowCopy","getValueByElementId","updateNodeType","id","node_type","coordinates","split","grid","getState","node","copy"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,0BAAlB;AACA,SAASC,yBAAT,QAA0C,sCAA1C;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,SAASC,mBAAT,QAAoC,sCAApC;AAEA,eAAe,SAASC,cAAT,CAAwBC,EAAE,GAAG,EAA7B,EAAiC;AAC5C,MAAIC,SAAS,GAAGH,mBAAmB,CAAC,YAAD,CAAnC;AACA,MAAII,WAAW,GAAGF,EAAE,CAACG,KAAH,CAAS,GAAT,CAAlB;AACA,MAAIC,IAAI,GAAGT,KAAK,CAACU,QAAN,GAAiBD,IAA5B;AACA,MAAIE,IAAI,GAAGF,IAAI,CAACF,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,CAAX;;AAEA,MAAII,IAAI,CAAC,MAAD,CAAJ,KAAiBL,SAArB,EAAgC;AAC5BK,IAAAA,IAAI,CAAC,MAAD,CAAJ,GAAe,YAAf;AACH,GAFD,MAGK,IAAIA,IAAI,CAAC,MAAD,CAAJ,KAAiB,YAAjB,IAAiCA,IAAI,CAAC,MAAD,CAAJ,KAAiB,UAAtD,EAAkE;AACnEA,IAAAA,IAAI,CAAC,MAAD,CAAJ,GAAeL,SAAf;AACH;;AAEDG,EAAAA,IAAI,CAACF,WAAW,CAAC,CAAD,CAAZ,CAAJ,CAAqBA,WAAW,CAAC,CAAD,CAAhC,IAAuCI,IAAvC;AACA,QAAMC,IAAI,GAAGV,WAAW,CAACO,IAAD,CAAxB;AACAR,EAAAA,yBAAyB,CAACW,IAAD,CAAzB;AACH","sourcesContent":["import store from \"../../redux/stores/store\";\nimport { dispatchedChangedNodeType } from \"../../redux/dispatchs/grid-dispatchs\";\nimport shallowCopy from \"../2d-array-functions/shallow-copy\";\nimport { getValueByElementId } from \"../functions/get-value-by-element-id\";\n\nexport default function updateNodeType(id = \"\") {\n    let node_type = getValueByElementId(\"node-types\");\n    let coordinates = id.split(\"-\");\n    let grid = store.getState().grid;\n    let node = grid[coordinates[0]][coordinates[1]]\n\n    if (node[\"type\"] === node_type) {\n        node[\"type\"] = \"empty_node\";\n    }\n    else if (node[\"type\"] !== \"start_node\" && node[\"type\"] !== \"end_node\") {\n        node[\"type\"] = node_type;\n    }\n\n    grid[coordinates[0]][coordinates[1]] = node;\n    const copy = shallowCopy(grid)\n    dispatchedChangedNodeType(copy);\n}"]},"metadata":{},"sourceType":"module"}