{"ast":null,"code":"// 1  procedure BFS(G, root) is\n// 2      let Q be a queue\n// 3      label root as discovered\n// 4      Q.enqueue(root)\n// 5      while Q is not empty do\n// 6          v := Q.dequeue()\n// 7          if v is the goal then\n// 8              return v\n// 9          for all edges from v to w in G.adjacentEdges(v) do\n// 10             if w is not labeled as discovered then\n// 11                 label w as discovered\n// 12                 w.parent := v\n// 13                 Q.enqueue(w)\nimport shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\nexport function* breadthFirstSearch(matrix = [[]], start_coordinates = [], end_coordinates = []) {\n  let queue = [];\n  visited = shallowCopy(matrix, false);\n  console.log(visited);\n  yield start_coordinates;\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/breadth-first-search.js"],"names":["shallowCopy","breadthFirstSearch","matrix","start_coordinates","end_coordinates","queue","visited","console","log"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,WAAP,MAAwB,4CAAxB;AAEA,OAAO,UAAUC,kBAAV,CAA6BC,MAAM,GAAC,CAAC,EAAD,CAApC,EAA0CC,iBAAiB,GAAG,EAA9D,EAAkEC,eAAe,GAAC,EAAlF,EACP;AACI,MAAIC,KAAK,GAAG,EAAZ;AACAC,EAAAA,OAAO,GAAGN,WAAW,CAACE,MAAD,EAAS,KAAT,CAArB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,QAAMH,iBAAN;AACH","sourcesContent":["// 1  procedure BFS(G, root) is\n// 2      let Q be a queue\n// 3      label root as discovered\n// 4      Q.enqueue(root)\n// 5      while Q is not empty do\n// 6          v := Q.dequeue()\n// 7          if v is the goal then\n// 8              return v\n// 9          for all edges from v to w in G.adjacentEdges(v) do\n// 10             if w is not labeled as discovered then\n// 11                 label w as discovered\n// 12                 w.parent := v\n// 13                 Q.enqueue(w)\n\nimport shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\n\nexport function* breadthFirstSearch(matrix=[[]], start_coordinates = [], end_coordinates=[])\n{\n    let queue = [];\n    visited = shallowCopy(matrix, false);\n    console.log(visited)\n    yield start_coordinates;\n}"]},"metadata":{},"sourceType":"module"}