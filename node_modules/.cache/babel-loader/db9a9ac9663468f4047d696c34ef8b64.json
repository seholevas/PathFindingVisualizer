{"ast":null,"code":"import shallowCopy from \"../../../helpers/2d-array-functions/shallow-copy\";\nimport { checkNeighbors } from \"./async-helpers/check-neighbors\";\nimport { updateParent } from \"./setters-and-getters/update-parent\";\nimport coordinatesAreEqual from \"./setters-and-getters/coordinates-are-equal\"; // import {PriorityQueue} from \"../../../data-structures/min-priority-queue\";\n\nexport default function* aStar(adjacency_matrix = [[]], start_coordinates = [0, 0], end_cordinates = [3, 3]) {\n  // let priority_queue = new PriorityQueue((a,b) => a[1] > b[1]);\n  let priority_queue = [];\n  let parent_matrix = shallowCopy(adjacency_matrix, null);\n  let visited = shallowCopy(adjacency_matrix, false);\n  let distance_matrix = shallowCopy(adjacency_matrix, Infinity);\n  adjacency_matrix[start_coordinates[0]][start_coordinates[1]] = 0 + manhattanDistance(start_coordinates, end_cordinates);\n\n  while (priority_queue.length !== 0) {}\n}\n\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n  return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1]);\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/helpers/matrix-helpers/a-star.js"],"names":["shallowCopy","checkNeighbors","updateParent","coordinatesAreEqual","aStar","adjacency_matrix","start_coordinates","end_cordinates","priority_queue","parent_matrix","visited","distance_matrix","Infinity","manhattanDistance","length","coordinates1","coordinates2","Math","abs"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,kDAAxB;AACA,SAASC,cAAT,QAA+B,iCAA/B;AACA,SAASC,YAAT,QAA6B,qCAA7B;AACA,OAAOC,mBAAP,MAAgC,6CAAhC,C,CACA;;AAEA,eAAe,UAAUC,KAAV,CAAgBC,gBAAgB,GAAG,CAAC,EAAD,CAAnC,EAAyCC,iBAAiB,GAAG,CAAC,CAAD,EAAI,CAAJ,CAA7D,EAAqEC,cAAc,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAtF,EAA8F;AACzG;AACA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,aAAa,GAAGT,WAAW,CAACK,gBAAD,EAAmB,IAAnB,CAA/B;AACA,MAAIK,OAAO,GAAGV,WAAW,CAACK,gBAAD,EAAmB,KAAnB,CAAzB;AACA,MAAIM,eAAe,GAAGX,WAAW,CAACK,gBAAD,EAAmBO,QAAnB,CAAjC;AAEAP,EAAAA,gBAAgB,CAACC,iBAAiB,CAAC,CAAD,CAAlB,CAAhB,CAAuCA,iBAAiB,CAAC,CAAD,CAAxD,IAA+D,IAAIO,iBAAiB,CAACP,iBAAD,EAAoBC,cAApB,CAApF;;AAEA,SAAMC,cAAc,CAACM,MAAf,KAA0B,CAAhC,EACA,CAEC;AAKJ;;AAGD,SAASD,iBAAT,CAA2BE,YAAY,GAAG,EAA1C,EAA8CC,YAAY,GAAG,EAA7D,EAAiE;AAC7D,SAAOC,IAAI,CAACC,GAAL,CAASH,YAAY,CAAC,CAAD,CAAZ,GAAkBC,YAAY,CAAC,CAAD,CAAvC,IAA8CC,IAAI,CAACC,GAAL,CAASH,YAAY,CAAC,CAAD,CAAZ,GAAkBC,YAAY,CAAC,CAAD,CAAvC,CAArD;AACH","sourcesContent":["import shallowCopy from \"../../../helpers/2d-array-functions/shallow-copy\"\nimport { checkNeighbors } from \"./async-helpers/check-neighbors\";\nimport { updateParent } from \"./setters-and-getters/update-parent\";\nimport coordinatesAreEqual from \"./setters-and-getters/coordinates-are-equal\";\n// import {PriorityQueue} from \"../../../data-structures/min-priority-queue\";\n\nexport default function* aStar(adjacency_matrix = [[]], start_coordinates = [0, 0], end_cordinates = [3, 3]) {\n    // let priority_queue = new PriorityQueue((a,b) => a[1] > b[1]);\n    let priority_queue = [];\n    let parent_matrix = shallowCopy(adjacency_matrix, null);\n    let visited = shallowCopy(adjacency_matrix, false);\n    let distance_matrix = shallowCopy(adjacency_matrix, Infinity);\n    \n    adjacency_matrix[start_coordinates[0]][start_coordinates[1]] = 0 + manhattanDistance(start_coordinates, end_cordinates);\n\n    while(priority_queue.length !== 0)\n    {\n        \n    }\n\n\n\n\n}\n\n\nfunction manhattanDistance(coordinates1 = [], coordinates2 = []) {\n    return Math.abs(coordinates1[0] - coordinates2[0]) + Math.abs(coordinates1[1] - coordinates2[1]);\n}"]},"metadata":{},"sourceType":"module"}