{"ast":null,"code":"import { getValueByElementId } from \"../helpers/functions/get-value-by-element-id\";\n\nfunction getSort(array = [], type = \"mergesort\") {\n  if (type === \"a*\") {\n    return Merge(array);\n  } else if (type === \"bfs\") {\n    return BubbleSort(array);\n  } else if (type === \"dfs\") {\n    return SelectionSort(array);\n  } else if (type === \"dijkstra\") {\n    return Dijikstra(array);\n  } // else if (type === \"insertionsort\") {\n  //     return InsertionSort(array);\n  // }\n  // else if (type === \"quicksort\") {\n  //     return QuickSort(array, 0, array.length - 1);\n  // }\n  // else if (type === \"cocktailsort\") {\n  // }\n\n}\n\nexport default function startPathFinding() {\n  const elementsValue = getValueByElementId();\n  console.log(\"finding path!\");\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/pathfind.js"],"names":["getValueByElementId","getSort","array","type","Merge","BubbleSort","SelectionSort","Dijikstra","startPathFinding","elementsValue","console","log"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,8CAApC;;AAEA,SAASC,OAAT,CAAiBC,KAAK,GAAG,EAAzB,EAA6BC,IAAI,GAAG,WAApC,EAAiD;AAC7C,MAAIA,IAAI,KAAK,IAAb,EAAmB;AACf,WAAOC,KAAK,CAACF,KAAD,CAAZ;AACH,GAFD,MAGK,IAAIC,IAAI,KAAK,KAAb,EAAoB;AACrB,WAAOE,UAAU,CAACH,KAAD,CAAjB;AACH,GAFI,MAGA,IAAIC,IAAI,KAAK,KAAb,EAAoB;AACrB,WAAOG,aAAa,CAACJ,KAAD,CAApB;AACH,GAFI,MAGA,IAAIC,IAAI,KAAK,UAAb,EAAyB;AAC1B,WAAOI,SAAS,CAACL,KAAD,CAAhB;AACH,GAZ4C,CAa7C;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACH;;AAED,eAAe,SAASM,gBAAT,GAA4B;AACvC,QAAMC,aAAa,GAAGT,mBAAmB,EAAzC;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH","sourcesContent":["import { getValueByElementId } from \"../helpers/functions/get-value-by-element-id\";\n\nfunction getSort(array = [], type = \"mergesort\") {\n    if (type === \"a*\") {\n        return Merge(array);\n    }\n    else if (type === \"bfs\") {\n        return BubbleSort(array);\n    }\n    else if (type === \"dfs\") {\n        return SelectionSort(array);\n    }\n    else if (type === \"dijkstra\") {\n        return Dijikstra(array)\n    }\n    // else if (type === \"insertionsort\") {\n    //     return InsertionSort(array);\n    // }\n    // else if (type === \"quicksort\") {\n    //     return QuickSort(array, 0, array.length - 1);\n    // }\n    // else if (type === \"cocktailsort\") {\n\n    // }\n}\n\nexport default function startPathFinding() {\n    const elementsValue = getValueByElementId()\n    console.log(\"finding path!\");\n}"]},"metadata":{},"sourceType":"module"}