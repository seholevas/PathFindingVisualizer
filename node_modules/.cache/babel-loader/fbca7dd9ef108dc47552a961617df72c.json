{"ast":null,"code":"// function reconstruct_path(cameFrom, current)\n//     total_path := {current}\n//     while current in cameFrom.Keys:\n//         current := cameFrom[current]\n//         total_path.prepend(current)\n//     return total_path\n// // A* finds a path from start to goal.\n// // h is the heuristic function. h(n) estimates the cost to reach goal from node n.\n// function A_Star(start, goal, h)\n//     // The set of discovered nodes that may need to be (re-)expanded.\n//     // Initially, only the start node is known.\n//     // This is usually implemented as a min-heap or priority queue rather than a hash-set.\n//     openSet := {start}\n//     // For node n, cameFrom[n] is the node immediately preceding it on the cheapest path from start\n//     // to n currently known.\n//     cameFrom := an empty map\n//     // For node n, gScore[n] is the cost of the cheapest path from start to n currently known.\n//     gScore := map with default value of Infinity\n//     gScore[start] := 0\n//     // For node n, fScore[n] := gScore[n] + h(n). fScore[n] represents our current best guess as to\n//     // how short a path from start to finish can be if it goes through n.\n//     fScore := map with default value of Infinity\n//     fScore[start] := h(start)\n//     while openSet is not empty\n//         // This operation can occur in O(1) time if openSet is a min-heap or a priority queue\n//         current := the node in openSet having the lowest fScore[] value\n//         if current = goal\n//             return reconstruct_path(cameFrom, current)\n//         openSet.Remove(current)\n//         for each neighbor of current\n//             // d(current,neighbor) is the weight of the edge from current to neighbor\n//             // tentative_gScore is the distance from start to the neighbor through current\n//             tentative_gScore := gScore[current] + d(current, neighbor)\n//             if tentative_gScore < gScore[neighbor]\n//                 // This path to neighbor is better than any previous one. Record it!\n//                 cameFrom[neighbor] := current\n//                 gScore[neighbor] := tentative_gScore\n//                 fScore[neighbor] := gScore[neighbor] + h(neighbor)\n//                 if neighbor not in openSet\n//                     openSet.add(neighbor)\n//     // Open set is empty but goal was never reached\n//     return failure\nimport shallowCopy from \"../../../helpers/2d-array-functions/shallow-copy\";\nexport default function aStar(start_coordinates = [0, 0], end_cordinates = [3, 3], adjacency_matrix = [[]]) {\n  let open_set = [];\n  let parent_matrix = shallowCopy(adjacency_matrix, null);\n  open_set.push([...start_coordinates]);\n}\n\nfunction calculateCost(val1, val2) {\n  return val1 + val2;\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/helpers/matrix-helpers/a-star.js"],"names":["shallowCopy","aStar","start_coordinates","end_cordinates","adjacency_matrix","open_set","parent_matrix","push","calculateCost","val1","val2"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,OAAOA,WAAP,MAAwB,kDAAxB;AAEA,eAAe,SAASC,KAAT,CAAeC,iBAAiB,GAAC,CAAC,CAAD,EAAG,CAAH,CAAjC,EAAwCC,cAAc,GAAC,CAAC,CAAD,EAAG,CAAH,CAAvD,EAA8DC,gBAAgB,GAAC,CAAC,EAAD,CAA/E,EACf;AACI,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,aAAa,GAAGN,WAAW,CAACI,gBAAD,EAAmB,IAAnB,CAA/B;AACAC,EAAAA,QAAQ,CAACE,IAAT,CAAc,CAAC,GAAGL,iBAAJ,CAAd;AAGH;;AAED,SAASM,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EACA;AACI,SAAOD,IAAI,GAAGC,IAAd;AACH","sourcesContent":["// function reconstruct_path(cameFrom, current)\n//     total_path := {current}\n//     while current in cameFrom.Keys:\n//         current := cameFrom[current]\n//         total_path.prepend(current)\n//     return total_path\n\n\n\n// // A* finds a path from start to goal.\n// // h is the heuristic function. h(n) estimates the cost to reach goal from node n.\n// function A_Star(start, goal, h)\n//     // The set of discovered nodes that may need to be (re-)expanded.\n//     // Initially, only the start node is known.\n//     // This is usually implemented as a min-heap or priority queue rather than a hash-set.\n//     openSet := {start}\n\n//     // For node n, cameFrom[n] is the node immediately preceding it on the cheapest path from start\n//     // to n currently known.\n//     cameFrom := an empty map\n\n//     // For node n, gScore[n] is the cost of the cheapest path from start to n currently known.\n//     gScore := map with default value of Infinity\n//     gScore[start] := 0\n\n//     // For node n, fScore[n] := gScore[n] + h(n). fScore[n] represents our current best guess as to\n//     // how short a path from start to finish can be if it goes through n.\n//     fScore := map with default value of Infinity\n//     fScore[start] := h(start)\n\n//     while openSet is not empty\n//         // This operation can occur in O(1) time if openSet is a min-heap or a priority queue\n//         current := the node in openSet having the lowest fScore[] value\n//         if current = goal\n//             return reconstruct_path(cameFrom, current)\n\n//         openSet.Remove(current)\n//         for each neighbor of current\n//             // d(current,neighbor) is the weight of the edge from current to neighbor\n//             // tentative_gScore is the distance from start to the neighbor through current\n//             tentative_gScore := gScore[current] + d(current, neighbor)\n//             if tentative_gScore < gScore[neighbor]\n//                 // This path to neighbor is better than any previous one. Record it!\n//                 cameFrom[neighbor] := current\n//                 gScore[neighbor] := tentative_gScore\n//                 fScore[neighbor] := gScore[neighbor] + h(neighbor)\n//                 if neighbor not in openSet\n//                     openSet.add(neighbor)\n\n//     // Open set is empty but goal was never reached\n//     return failure\nimport shallowCopy from \"../../../helpers/2d-array-functions/shallow-copy\"\n\nexport default function aStar(start_coordinates=[0,0], end_cordinates=[3,3], adjacency_matrix=[[]])\n{\n    let open_set = []\n    let parent_matrix = shallowCopy(adjacency_matrix, null);\n    open_set.push([...start_coordinates]);\n\n\n}\n\nfunction calculateCost(val1, val2)\n{\n    return val1 + val2;\n}"]},"metadata":{},"sourceType":"module"}