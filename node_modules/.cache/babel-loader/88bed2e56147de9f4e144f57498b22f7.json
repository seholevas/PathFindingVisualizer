{"ast":null,"code":"// 1  procedure BFS(G, root) is\n// 2      let Q be a queue\n// 3      label root as discovered\n// 4      Q.enqueue(root)\n// 5      while Q is not empty do\n// 6          v := Q.dequeue()\n// 7          if v is the goal then\n// 8              return v\n// 9          for all edges from v to w in G.adjacentEdges(v) do\n// 10             if w is not labeled as discovered then\n// 11                 label w as discovered\n// 12                 w.parent := v\n// 13                 Q.enqueue(w)\nimport shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\nimport { check_neighbors } from \"./dijkstra\";\nexport function* breadthFirstSearch(matrix = [[]], start_coordinates = [2, 2], end_coordinates = [3, 3]) {\n  yield start_coordinates;\n  let queue = [];\n  let visited = shallowCopy(matrix, false);\n  let found = false;\n  let parent_matrix = shallowCopy(matrix, null);\n  console.log(\"visited: \", visited);\n  visited[start_coordinates[0]][start_coordinates[1]] = true;\n  queue.push(start_coordinates);\n\n  while (queue.length !== 0 && !found) {\n    let vertex_coordinates = queue.pop();\n\n    if (vertex_coordinates == end_coordinates) {\n      found = true;\n      yield vertex_coordinates;\n    } else {\n      const generator = check_neighbors(vertex_coordinates, visited);\n      let result = generator.next(); // && playing\n\n      while (!result.done) {\n        let value = result.value;\n        console.log(\"value: \", value);\n        if (visited[value[0]][value[1]] === false) result = generator.next(); // await sleep(1000 / getValueByElementId(\"speed\"));    }\n        // dispatchSortStopped()\n      }\n    } // f\n\n  } // console.log(visited);\n\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/breadth-first-search.js"],"names":["shallowCopy","check_neighbors","breadthFirstSearch","matrix","start_coordinates","end_coordinates","queue","visited","found","parent_matrix","console","log","push","length","vertex_coordinates","pop","generator","result","next","done","value"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,WAAP,MAAwB,4CAAxB;AACA,SAASC,eAAT,QAAgC,YAAhC;AAEA,OAAO,UAAUC,kBAAV,CAA6BC,MAAM,GAAG,CAAC,EAAD,CAAtC,EAA4CC,iBAAiB,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAhE,EAAwEC,eAAe,GAAG,CAAC,CAAD,EAAI,CAAJ,CAA1F,EAAkG;AACrG,QAAMD,iBAAN;AAEA,MAAIE,KAAK,GAAG,EAAZ;AACA,MAAIC,OAAO,GAAGP,WAAW,CAACG,MAAD,EAAS,KAAT,CAAzB;AACA,MAAIK,KAAK,GAAG,KAAZ;AACA,MAAIC,aAAa,GAAGT,WAAW,CAACG,MAAD,EAAS,IAAT,CAA/B;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,OAAzB;AACAA,EAAAA,OAAO,CAACH,iBAAiB,CAAC,CAAD,CAAlB,CAAP,CAA8BA,iBAAiB,CAAC,CAAD,CAA/C,IAAsD,IAAtD;AACAE,EAAAA,KAAK,CAACM,IAAN,CAAWR,iBAAX;;AAGA,SAAOE,KAAK,CAACO,MAAN,KAAiB,CAAjB,IAAsB,CAACL,KAA9B,EAAqC;AACjC,QAAIM,kBAAkB,GAAGR,KAAK,CAACS,GAAN,EAAzB;;AACA,QAAID,kBAAkB,IAAIT,eAA1B,EAA2C;AACvCG,MAAAA,KAAK,GAAG,IAAR;AACA,YAAMM,kBAAN;AACH,KAHD,MAIK;AACD,YAAME,SAAS,GAAGf,eAAe,CAACa,kBAAD,EAAqBP,OAArB,CAAjC;AACA,UAAIU,MAAM,GAAGD,SAAS,CAACE,IAAV,EAAb,CAFC,CAID;;AACA,aAAO,CAACD,MAAM,CAACE,IAAf,EAAqB;AACjB,YAAIC,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACAV,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBS,KAAvB;AAEA,YAAIb,OAAO,CAACa,KAAK,CAAC,CAAD,CAAN,CAAP,CAAkBA,KAAK,CAAC,CAAD,CAAvB,MAAgC,KAApC,EACIH,MAAM,GAAGD,SAAS,CAACE,IAAV,EAAT,CALa,CAMjB;AACA;AACH;AAEJ,KArBgC,CAuBjC;;AACH,GApCoG,CAqCrG;;AACH","sourcesContent":["// 1  procedure BFS(G, root) is\n// 2      let Q be a queue\n// 3      label root as discovered\n// 4      Q.enqueue(root)\n// 5      while Q is not empty do\n// 6          v := Q.dequeue()\n// 7          if v is the goal then\n// 8              return v\n// 9          for all edges from v to w in G.adjacentEdges(v) do\n// 10             if w is not labeled as discovered then\n// 11                 label w as discovered\n// 12                 w.parent := v\n// 13                 Q.enqueue(w)\n\nimport shallowCopy from \"../helpers/2d-array-functions/shallow-copy\";\nimport { check_neighbors } from \"./dijkstra\"\n\nexport function* breadthFirstSearch(matrix = [[]], start_coordinates = [2, 2], end_coordinates = [3, 3]) {\n    yield start_coordinates;\n\n    let queue = [];\n    let visited = shallowCopy(matrix, false);\n    let found = false;\n    let parent_matrix = shallowCopy(matrix, null);\n    console.log(\"visited: \", visited);\n    visited[start_coordinates[0]][start_coordinates[1]] = true;\n    queue.push(start_coordinates);\n\n\n    while (queue.length !== 0 && !found) {\n        let vertex_coordinates = queue.pop();\n        if (vertex_coordinates == end_coordinates) {\n            found = true;\n            yield vertex_coordinates;\n        }\n        else {\n            const generator = check_neighbors(vertex_coordinates, visited);\n            let result = generator.next();\n\n            // && playing\n            while (!result.done) {\n                let value = result.value\n                console.log(\"value: \", value)\n\n                if (visited[value[0]][value[1]] === false)\n                    result = generator.next();\n                // await sleep(1000 / getValueByElementId(\"speed\"));    }\n                // dispatchSortStopped()\n            }\n\n        }\n\n        // f\n    }\n    // console.log(visited);\n}"]},"metadata":{},"sourceType":"module"}