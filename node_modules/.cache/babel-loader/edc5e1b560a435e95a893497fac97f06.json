{"ast":null,"code":"import { getValueByElementId } from \"../helpers/functions/get-value-by-element-id\";\nimport store from \"../redux/stores/store\";\nimport dijkstra from \"../algorithms/dijkstra\";\nimport updateNodeState from \"../helpers/state-functions/update-node-state\";\nimport { dispatchedChangedNodeType } from \"../redux/dispatchs/grid-dispatchs\";\nimport { sleep } from \"../helpers/async-functions/sleep\";\nimport { dispatchedStartedSearch } from \"../redux/dispatchs/settings-dispatchs\";\n\nfunction getAlgorithm(array = [[]], type = \"mergesort\") {\n  if (type === \"a*\") {// return Merge(array);\n  } else if (type === \"bfs\") {// return BubbleSort(array);\n  } else if (type === \"dfs\") {// return SelectionSort(array);\n  } else if (type === \"dijkstra\") {\n    return dijkstra(array);\n  } // else if (type === \"insertionsort\") {\n  //     return InsertionSort(array);\n  // }\n  // else if (type === \"quicksort\") {\n  //     return QuickSort(array, 0, array.length - 1);\n  // }\n  // else if (type === \"cocktailsort\") {\n  // }\n\n}\n\nexport default async function startPathFinding() {\n  const array = store.getState().grid;\n  let playing = store.getState().settings;\n\n  if (playing) {\n    return;\n  }\n\n  dispatchedStartedSearch();\n  playing = store.getState().settings;\n  console.log(\"playing: \", playing);\n  console.log(\"grid: \", array);\n  const pathFindingType = getValueByElementId(\"algorithms\");\n  const generator = getAlgorithm(array, pathFindingType);\n  let result = generator.next(); // && playing\n\n  while (!result.done && playing) {\n    let value = result.value;\n    console.log(\"value: \", value);\n    let shallow_matrix = updateNodeState(value, array);\n    dispatchedChangedNodeType(shallow_matrix);\n    result = generator.next();\n    await sleep(2000);\n    playing = store.getState().settings;\n    console.log(\"playing\", playing); // await sleep(1000 / getValueByElementId(\"speed\"));    }\n    // dispatchSortStopped()\n  }\n}","map":{"version":3,"sources":["/home/steven/SWE/Code/path-finding-visualizer/src/algorithms/pathfind.js"],"names":["getValueByElementId","store","dijkstra","updateNodeState","dispatchedChangedNodeType","sleep","dispatchedStartedSearch","getAlgorithm","array","type","startPathFinding","getState","grid","playing","settings","console","log","pathFindingType","generator","result","next","done","value","shallow_matrix"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,8CAApC;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,eAAP,MAA4B,8CAA5B;AACA,SAASC,yBAAT,QAA0C,mCAA1C;AACA,SAASC,KAAT,QAAsB,kCAAtB;AACA,SAASC,uBAAT,QAAwC,uCAAxC;;AAEA,SAASC,YAAT,CAAsBC,KAAK,GAAG,CAAC,EAAD,CAA9B,EAAoCC,IAAI,GAAG,WAA3C,EAAwD;AACpD,MAAIA,IAAI,KAAK,IAAb,EAAmB,CACf;AACH,GAFD,MAGK,IAAIA,IAAI,KAAK,KAAb,EAAoB,CACrB;AACH,GAFI,MAGA,IAAIA,IAAI,KAAK,KAAb,EAAoB,CACrB;AACH,GAFI,MAGA,IAAIA,IAAI,KAAK,UAAb,EAAyB;AAC1B,WAAOP,QAAQ,CAACM,KAAD,CAAf;AACH,GAZmD,CAapD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACH;;AAED,eAAe,eAAeE,gBAAf,GAAkC;AAC7C,QAAMF,KAAK,GAAGP,KAAK,CAACU,QAAN,GAAiBC,IAA/B;AACA,MAAIC,OAAO,GAAGZ,KAAK,CAACU,QAAN,GAAiBG,QAA/B;;AAEA,MAAID,OAAJ,EAAa;AACT;AACH;;AAEDP,EAAAA,uBAAuB;AACvBO,EAAAA,OAAO,GAAGZ,KAAK,CAACU,QAAN,GAAiBG,QAA3B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,OAAzB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,KAAtB;AAGA,QAAMS,eAAe,GAAGjB,mBAAmB,CAAC,YAAD,CAA3C;AACA,QAAMkB,SAAS,GAAGX,YAAY,CAACC,KAAD,EAAQS,eAAR,CAA9B;AACA,MAAIE,MAAM,GAAGD,SAAS,CAACE,IAAV,EAAb,CAjB6C,CAmB7C;;AACA,SAAO,CAACD,MAAM,CAACE,IAAR,IAAgBR,OAAvB,EAAgC;AAE5B,QAAIS,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBM,KAAvB;AACA,QAAIC,cAAc,GAAGpB,eAAe,CAACmB,KAAD,EAAQd,KAAR,CAApC;AACAJ,IAAAA,yBAAyB,CAACmB,cAAD,CAAzB;AACAJ,IAAAA,MAAM,GAAGD,SAAS,CAACE,IAAV,EAAT;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACAQ,IAAAA,OAAO,GAAGZ,KAAK,CAACU,QAAN,GAAiBG,QAA3B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAvB,EAT4B,CAY5B;AACA;AACH;AACJ","sourcesContent":["import { getValueByElementId } from \"../helpers/functions/get-value-by-element-id\";\nimport store from \"../redux/stores/store\"\nimport dijkstra from \"../algorithms/dijkstra\"\nimport updateNodeState from \"../helpers/state-functions/update-node-state\";\nimport { dispatchedChangedNodeType } from \"../redux/dispatchs/grid-dispatchs\";\nimport { sleep } from \"../helpers/async-functions/sleep\";\nimport { dispatchedStartedSearch } from \"../redux/dispatchs/settings-dispatchs\";\n\nfunction getAlgorithm(array = [[]], type = \"mergesort\") {\n    if (type === \"a*\") {\n        // return Merge(array);\n    }\n    else if (type === \"bfs\") {\n        // return BubbleSort(array);\n    }\n    else if (type === \"dfs\") {\n        // return SelectionSort(array);\n    }\n    else if (type === \"dijkstra\") {\n        return dijkstra(array);\n    }\n    // else if (type === \"insertionsort\") {\n    //     return InsertionSort(array);\n    // }\n    // else if (type === \"quicksort\") {\n    //     return QuickSort(array, 0, array.length - 1);\n    // }\n    // else if (type === \"cocktailsort\") {\n\n    // }\n}\n\nexport default async function startPathFinding() {\n    const array = store.getState().grid;\n    let playing = store.getState().settings;\n\n    if (playing) {\n        return;\n    }\n\n    dispatchedStartedSearch();\n    playing = store.getState().settings;\n\n    console.log(\"playing: \", playing);\n    console.log(\"grid: \", array);\n\n\n    const pathFindingType = getValueByElementId(\"algorithms\");\n    const generator = getAlgorithm(array, pathFindingType);\n    let result = generator.next();\n\n    // && playing\n    while (!result.done && playing) {\n\n        let value = result.value\n        console.log(\"value: \", value)\n        let shallow_matrix = updateNodeState(value, array);\n        dispatchedChangedNodeType(shallow_matrix);\n        result = generator.next();\n        await sleep(2000);\n        playing = store.getState().settings\n        console.log(\"playing\", playing);\n\n\n        // await sleep(1000 / getValueByElementId(\"speed\"));    }\n        // dispatchSortStopped()\n    }\n}"]},"metadata":{},"sourceType":"module"}